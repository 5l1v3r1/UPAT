#! /usr/bin/env python
#
# Support module generated by PAGE version 4.8.6
# In conjunction with Tcl version 8.6
#    Jan 01, 2017 12:08:22 PM


import sys
import commands
import tkFileDialog
import os
import subprocess
import shelve
import re
import time
import datetime


try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global vSel_Gen_Web_Auth_Type
    vSel_Gen_Web_Auth_Type = StringVar()

    global vSel_Speed_Default
    vSel_Speed_Default = StringVar()
    

    global vChk_Gen_Web_IncMeta
    vChk_Gen_Web_IncMeta = StringVar()

    global vChk_Gen_Web_Keep
    vChk_Gen_Web_Keep = StringVar()

    global vChk_Gen_Web_Write
    vChk_Gen_Web_Write = StringVar()

    global vChk_Gen_Web_ShowCount
    vChk_Gen_Web_ShowCount = StringVar()

    global vChk_Gen_Web_Verbose
    vChk_Gen_Web_Verbose = StringVar()

    global vChk_Gen_Saved_Separate
    vChk_Gen_Saved_Separate = StringVar()

    global vChk_Gen_Saved_Removebegin
    vChk_Gen_Saved_Removebegin = StringVar()

    global vChk_Gen_Saved_Removeend
    vChk_Gen_Saved_Removeend = StringVar()

    global vChk_Gen_Saved_Incnames
    vChk_Gen_Saved_Incnames = StringVar()

    global vChk_Gen_Saved_Verbose
    vChk_Gen_Saved_Verbose = StringVar()

    global vChk_Gen_Brute_Fixed
    vChk_Gen_Brute_Fixed = StringVar()

    global vChk_Gen_Brute_Nogen
    vChk_Gen_Brute_Nogen = StringVar()

    global vChk_Gen_Brute_Invert
    vChk_Gen_Brute_Invert = StringVar()

    global vChk_Gen_Brute_Permute
    vChk_Gen_Brute_Permute = StringVar()

    global vChk_Gen_Brute_Start
    vChk_Gen_Brute_Start = StringVar()

    global vChk_Merge_Sort
    vChk_Merge_Sort = StringVar()

    global vChk_Merge_Duplicates
    vChk_Merge_Duplicates = StringVar()

    global vChk_Merge_Reverse
    vChk_Merge_Reverse = StringVar()

    global vChk_Ana_Wd_Masks
    vChk_Ana_Wd_Masks = StringVar()

    global vChk_Ana_Wd_Rare
    vChk_Ana_Wd_Rare = StringVar()
    
    global vChk_Ana_Masks_Sort
    vChk_Ana_Masks_Sort = StringVar()

    global vChk_Ana_Masks_Target
    vChk_Ana_Masks_Target = StringVar()

    global vChk_Ana_Masks_Speed
    vChk_Ana_Masks_Speed = StringVar()

    global vChk_Ana_Masks_MinLen
    vChk_Ana_Masks_MinLen = StringVar()

    global vChk_Ana_Masks_MaxLen
    vChk_Ana_Masks_MaxLen = StringVar()

    global vChk_Ana_Masks_MinRun
    vChk_Ana_Masks_MinRun = StringVar()

    global vChk_Ana_Masks_MaxRun
    vChk_Ana_Masks_MaxRun = StringVar()

    global vChk_Ana_Masks_MinOcc
    vChk_Ana_Masks_MinOcc = StringVar()

    global vChk_Ana_Masks_MaxOcc
    vChk_Ana_Masks_MaxOcc = StringVar()

    global vChk_Ana_Masks_OutputFN
    vChk_Ana_Masks_OutputFN = StringVar()    

    global vChk_Ana_Test_Manual
    vChk_Ana_Test_Manual = StringVar()
    
    global vChk_Ana2_Wd_Out
    vChk_Ana2_Wd_Out = StringVar()

    global vChk_Ana_Pol_MinSym
    vChk_Ana_Pol_MinSym = StringVar()

    global vChk_Ana_Pol_MaxSym
    vChk_Ana_Pol_MaxSym = StringVar()

    global vChk_Ana_Pol_MinUp
    vChk_Ana_Pol_MinUp = StringVar()

    global vChk_Ana_Pol_MaxUp
    vChk_Ana_Pol_MaxUp = StringVar()

    global vChk_Ana_Pol_MinDigit
    vChk_Ana_Pol_MinDigit = StringVar()

    global vChk_Ana_Pol_MaxDigit
    vChk_Ana_Pol_MaxDigit = StringVar()

    global vChk_Ana_Pol_MinLow
    vChk_Ana_Pol_MinLow = StringVar()

    global vChk_Ana_Pol_MaxLow
    vChk_Ana_Pol_MaxLow = StringVar()

    global vChk_Ana_Pol_MinLen
    vChk_Ana_Pol_MinLen = StringVar()

    global vChk_Ana_Pol_MaxLen
    vChk_Ana_Pol_MaxLen = StringVar()
    
    global vChk_Ana_Pol_Speed
    vChk_Ana_Pol_Speed = StringVar()

    global vChk_Attack_Dic_Mangling
    vChk_Attack_Dic_Mangling = StringVar()

    global vChk_Attack_Dic_Restore
    vChk_Attack_Dic_Restore = StringVar()

    global vChk_Attack_Dic_Name
    vChk_Attack_Dic_Name = StringVar()

    global vChk_Attack_Dic_Status
    vChk_Attack_Dic_Status = StringVar()

    global vChk_Attack_Dic_Show
    vChk_Attack_Dic_Show = StringVar()
    
    global vChk_Attack_BF_Masks
    vChk_Attack_BF_Masks = StringVar()

    global vChk_Attack_BF_Name
    vChk_Attack_BF_Name = StringVar()

    global vChk_Attack_BF_Restore
    vChk_Attack_BF_Restore = StringVar()

    global vChk_Attack_BF_Out
    vChk_Attack_BF_Out = StringVar()

    global vSel_Attack_BF_Hash
    vSel_Attack_BF_Hash = StringVar()

    global vChk_Attack_BF_Status_Timer
    vChk_Attack_BF_Status_Timer = StringVar()

    global vChk_Attack_BF_Runtime
    vChk_Attack_BF_Runtime = StringVar()

    global vChk_Attack_BF_Speed
    vChk_Attack_BF_Speed = StringVar()

    global vSel_Attack_BF_Device
    vSel_Attack_BF_Device = StringVar()

    global vChk_Attack_BF_PowerTuning
    vChk_Attack_BF_PowerTuning = StringVar()

    global vSel_Attack_BF_Workload
    vSel_Attack_BF_Workload = StringVar()
    
    global vLbl_Home_Msg
    vLbl_Home_Msg = StringVar()
    
    global vLbl_Gen_Web_Tip
    vLbl_Gen_Web_Tip = StringVar()
    
    global vLbl_Merge_Tip
    vLbl_Merge_Tip = StringVar()
    
    global vLbl_Tools_Len_Tip
    vLbl_Tools_Len_Tip = StringVar()
    
    global vLbl_Tools_Gate_Tip
    vLbl_Tools_Gate_Tip = StringVar()
    
    global vLbl_Ana_Wd_Tip
    vLbl_Ana_Wd_Tip = StringVar()
    
    global vChk_NewPass_Specials
    vChk_NewPass_Specials = StringVar()
    
    global vChk_Attack_Dic_Force
    vChk_Attack_Dic_Force = StringVar()
    
    global vSel_Attack_Dic_Force
    vSel_Attack_Dic_Force = StringVar()
    
    global vLbl_Attack_Dic_Tip
    vLbl_Attack_Dic_Tip = StringVar()
    
    global vLbl_Attack_BF_Tip
    vLbl_Attack_BF_Tip = StringVar()


def Btn_Ana_Masks_Browse_Click():
    global w
    print('home_support.Btn_Ana_Masks_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Ana_Masks_Path.delete(0,END)
        w.Txt_Ana_Masks_Path.insert(0,file1.name)
    
    

def Btn_Ana_Masks_Run_Click(Txt_Ana_Masks_Path,Chk_Ana_Masks_Sort,Chk_Ana_Masks_OutputFN,Txt_Ana_Masks_OutputFN,Chk_Ana_Masks_Target,Txt_Ana_Masks_Target,Chk_Ana_Masks_Speed,Txt_Ana_Masks_Speed,Chk_Ana_Masks_MinLen,Txt_Ana_Masks_MinLen,Chk_Ana_Masks_MaxLen,Txt_Ana_Masks_MaxLen,Chk_Ana_Masks_MinRun,Txt_Ana_Masks_MinRun,Chk_Ana_Masks_MaxRun,Txt_Ana_Masks_MaxRun,Chk_Ana_Masks_MinOcc,Txt_Ana_Masks_MinOcc,Chk_Ana_Masks_MaxOcc,Txt_Ana_Masks_MaxOcc):
    global w
    print('home_support.Btn_Ana_Masks_Run_Click')
    
    
    cmd = 'python maskgen.py "'+Txt_Ana_Masks_Path+'"'
    
    if Chk_Ana_Masks_Sort=='1':
        cmd+=' --occurrence'
    
    if Chk_Ana_Masks_OutputFN=='1':
        cmd+=' -o "'+os.getcwd()+'/'+Txt_Ana_Masks_OutputFN+'"'
    
    if Chk_Ana_Masks_Target=='1':
        cmd+=' -t '+Txt_Ana_Masks_Target
    
    if Chk_Ana_Masks_Speed=='1':
        cmd+=' --pps='+Txt_Ana_Masks_Speed
    
    if Chk_Ana_Masks_MinLen=='1':
        cmd+=' --minlength='+Txt_Ana_Masks_MinLen
    
    if Chk_Ana_Masks_MaxLen=='1':
        cmd+=' --maxlength='+Txt_Ana_Masks_MaxLen
    
    if Chk_Ana_Masks_MinRun=='1':
        cmd+=' --mintime='+Txt_Ana_Masks_MinRun
    
    if Chk_Ana_Masks_MaxRun=='1':
        cmd+=' --maxtime='+Txt_Ana_Masks_MaxRun
    
    if Chk_Ana_Masks_MinOcc=='1':
        cmd+=' --minoccurence='+Txt_Ana_Masks_MinOcc
    
    if Chk_Ana_Masks_MaxOcc=='1':
        cmd+=' --maxoccurence='+Txt_Ana_Masks_MaxOcc
    
    
    print(cmd)
    
    
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    w.Txt_Ana_Masks_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Ana_Masks_Output.insert(0.0,time_start+' | '+"Maskgen is running...\n")
    w.Btn_Ana_Masks_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_pack'])
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    w.Txt_Ana_Masks_Output.insert(0.0,output)
    w.Txt_Ana_Masks_Output.insert(0.0,time_end+' | '+"Maskgen has finished.\n")
    
    w.Btn_Ana_Masks_Run.configure(state=NORMAL)
    
    

def Btn_Ana_Masks_Speed_Click():
    print('home_support.Btn_Ana_Masks_Speed_Click')
    
    w.TNotebook2.select(6)
    
    



def Btn_Ana2_Wd_Browse_Click():
    global w
    print('home_support.Btn_Ana2_Wd_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Ana2_Wd_Path.delete(0,END)
        w.Txt_Ana2_Wd_Path.insert(0,file1.name)
    
    

def Btn_Ana2_Wd_Run_Click(Txt_Ana2_Wd_Path,Txt_Ana2_Wd_Out,Chk_Ana2_Wd_Out):
    global w
    print('home_support.Btn_Ana2_Wd_Run_Click')
    
    
    cmd = 'ruby pipal.rb -v "'+Txt_Ana2_Wd_Path+'"'
    
    if Chk_Ana2_Wd_Out=='1':
        cmd+=' -o "'+os.getcwd()+'/'+Txt_Ana2_Wd_Out+'"'
        
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    w.Txt_Ana2_Wd_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Ana2_Wd_Output.insert(0.0,time_start+' | '+"Pipal is running...\n")
    w.Btn_Ana2_Wd_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_pipal'])
    
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Ana2_Wd_Output.insert(0.0,output)
    w.Txt_Ana2_Wd_Output.insert(0.0,time_end+' | '+"Pipal has finished.\n")
    
    
    w.Btn_Ana2_Wd_Run.configure(state=NORMAL)


def Btn_Ana_Pol_Run_Click(Txt_Ana_Pol_OutputFN,Chk_Ana_Pol_MinLen,Txt_Ana_Pol_MinLen,Chk_Ana_Pol_MaxLen,Txt_Ana_Pol_MaxLen,Chk_Ana_Pol_MinLow,Txt_Ana_Pol_MinLow,Chk_Ana_Pol_MaxLow,Txt_Ana_Pol_MaxLow,Chk_Ana_Pol_MinUp,Txt_Ana_Pol_MinUp,Chk_Ana_Pol_MaxUp,Txt_Ana_Pol_MaxUp,Chk_Ana_Pol_MinDigit,Txt_Ana_Pol_MinDigit,Chk_Ana_Pol_MaxDigit,Txt_Ana_Pol_MaxDigit,Chk_Ana_Pol_MinSym,Txt_Ana_Pol_MinSym,Chk_Ana_Pol_MaxSym,Txt_Ana_Pol_MaxSym,Chk_Ana_Pol_Speed,Txt_Ana_Pol_Speed):
    global w
    print('home_support.Btn_Ana_Pol_Run_Click')
    
    
    cmd = 'python policygen.py'
    
    if Chk_Ana_Pol_MinLen=='1':
        cmd+=' --minlength '+Txt_Ana_Pol_MinLen
    
    if Chk_Ana_Pol_MaxLen=='1':
        cmd+=' --maxlength '+Txt_Ana_Pol_MaxLen
    
    if Chk_Ana_Pol_MinLow=='1':
        cmd+=' --minlower '+Txt_Ana_Pol_MinLow
    
    if Chk_Ana_Pol_MaxLow=='1':
        cmd+=' --maxlower '+Txt_Ana_Pol_MaxLow
        
    if Chk_Ana_Pol_MinUp=='1':
        cmd+=' --minupper '+Txt_Ana_Pol_MinUp
    
    if Chk_Ana_Pol_MaxUp=='1':
        cmd+=' --maxupper '+Txt_Ana_Pol_MaxUp
        
    if Chk_Ana_Pol_MinDigit=='1':
        cmd+=' --mindigit '+Txt_Ana_Pol_MinDigit
    
    if Chk_Ana_Pol_MaxDigit=='1':
        cmd+=' --maxdigit '+Txt_Ana_Pol_MaxDigit
    
    if Chk_Ana_Pol_MinSym=='1':
        cmd+=' --minspecial '+Txt_Ana_Pol_MinSym
    
    if Chk_Ana_Pol_MaxSym=='1':
        cmd+=' --maxspecial '+Txt_Ana_Pol_MaxSym
        
    if Chk_Ana_Pol_Speed=='1':
        cmd+=' --pps='+Txt_Ana_Pol_Speed
    
        
    cmd+=' -o "'+os.getcwd()+'/'+Txt_Ana_Pol_OutputFN+'"'
    
    
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    w.Txt_Ana_Pol_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Ana_Pol_Output.insert(0.0,time_start+' | '+"Policygen is running...\n")
    w.Btn_Ana_Pol_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_pack'])
    
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    w.Txt_Ana_Pol_Output.insert(0.0,output)
        
    #repeat estimated time line on top of the output
    test=output
    test_arr=test.split('\n')
    w.Txt_Ana_Pol_Output.insert(2.0,test_arr[-2]+'\n')
    
    w.Txt_Ana_Pol_Output.insert(0.0,time_end+' | '+"Policygen has finished.\n")
    
    w.Btn_Ana_Pol_Run.configure(state=NORMAL)

def Btn_Ana_Test_Browse1_Click():
    global w
    print('home_support.Btn_Ana_Test_Browse1_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Ana_Test_Path1.delete(0,END)
        w.Txt_Ana_Test_Path1.insert(0,file1.name)
    
    

def Btn_Ana_Test_Browse2_Click():
    global w
    print('home_support.Btn_Ana_Test_Browse2_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Ana_Test_Path2.delete(0,END)
        w.Txt_Ana_Test_Path2.insert(0,file1.name)
    
    

def Btn_Ana_Test_Run_Click(Txt_Ana_Test_Path1,Txt_Ana_Test_Path2,Txt_Ana_Test_Manual,Chk_Ana_Test_Manual):
    global w
    print('home_support.Btn_Ana_Test_Run_Click')
    
    
    cmd = 'python maskgen.py "'+Txt_Ana_Test_Path1+'"'
    
    if Chk_Ana_Test_Manual=='1':
        cmd+=' --checkmasks="'+Txt_Ana_Test_Manual+'"'
    else:
        cmd+=' --checkmasksfile "'+Txt_Ana_Test_Path2+'"'
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    w.Txt_Ana_Test_Output.insert(0.0,time_start+' | '+"Maskgen is running...\n")
    w.Txt_Ana_Test_Output.insert(0.0,cmd+'\n\n')
    w.Btn_Ana_Test_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_pack'])
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    w.Txt_Ana_Test_Output.insert(0.0,output)
    w.Txt_Ana_Test_Output.insert(0.0,time_end+' | '+"Maskgen has finished.\n")
    
    w.Btn_Ana_Test_Run.configure(state=NORMAL)
    

def Btn_Ana_Wd_Browse_Click():
    global w
    print('home_support.Btn_Ana_Wd_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Ana_Wd_Path.delete(0,END)
        w.Txt_Ana_Wd_Path.insert(0,file1.name)
    
    

def Btn_Ana_Wd_Run_Click(Txt_Ana_Wd_Path,Txt_Ana_Wd_Masks,Chk_Ana_Wd_Masks,Chk_Ana_Wd_Rare):
    global w
    print('home_support.Btn_Ana_Wd_Run_Click')
    
    
    cmd = 'python statsgen.py '+Txt_Ana_Wd_Path
    
    if Chk_Ana_Wd_Masks=='1':
        cmd+=' -o "'+os.getcwd()+'/'+Txt_Ana_Wd_Masks+'"'
        #set maskgen path to mask file and output filename
        w.Txt_Ana_Masks_Path.delete(0,END)
        w.Txt_Ana_Masks_Path.insert(0,os.getcwd()+'/'+Txt_Ana_Wd_Masks)
        
        w.Txt_Ana_Masks_OutputFN.delete(0,END)
        w.Txt_Ana_Masks_OutputFN.insert(0,Txt_Ana_Wd_Masks[:-5]+"hcmasks")
                
        #set test mask coverage paths & attack BF masks path
        w.Txt_Ana_Test_Path1.delete(0,END)
        w.Txt_Ana_Test_Path1.insert(0,os.getcwd()+'/'+Txt_Ana_Wd_Masks)
        
        w.Txt_Ana_Test_Path2.delete(0,END)
        w.Txt_Ana_Test_Path2.insert(0,os.getcwd()+'/'+Txt_Ana_Wd_Masks[:-5]+"hcmasks")
        
        vChk_Attack_BF_Masks.set(1)
        w.Txt_Attack_BF_Masks_Path.delete(0,END)
        w.Txt_Attack_BF_Masks_Path.insert(0,os.getcwd()+'/'+Txt_Ana_Wd_Masks[:-5]+"hcmasks")
    
    if Chk_Ana_Wd_Rare=='1':
        cmd+=' --hiderare'
    
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Ana_Wd_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Ana_Wd_Output.insert(0.0,time_start+' | '+"Statsgen is running...\n")
    w.Btn_Ana_Wd_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_pack'])
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    w.Txt_Ana_Wd_Output.insert(0.0,output)
    w.Txt_Ana_Wd_Output.insert(0.0,time_end+' | '+"Statsgen has finished.\n")
    
    w.Btn_Ana_Wd_Run.configure(state=NORMAL)
    
    
    
def Btn_Gen_Output_Delete():
    print('home_support.Btn_Gen_Output_Delete')
    w.Txt_Gen_Output.delete(0.0,END)
    
def Btn_Gen_Output_Copy():
    print('home_support.Btn_Gen_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Gen_Output.get(0.0,END))
    
def Btn_Merge_Output_Delete():
    print('home_support.Btn_Merge_Output_Delete')
    w.Txt_Merge_Output.delete(0.0,END)
    
def Btn_Merge_Output_Copy():
    print('home_support.Btn_Merge_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Merge_Output.get(0.0,END))
    
def Btn_Tools_Len_Output_Delete():
    print('home_support.Btn_Tools_Len_Output_Delete')
    w.Txt_Tools_Len_Output.delete(0.0,END)
    
def Btn_Tools_Len_Output_Copy():
    print('home_support.Btn_Tools_Len_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Tools_Len_Output.get(0.0,END))
    
def Btn_Tools_Gate_Output_Delete():
    print('home_support.Btn_Tools_Gate_Output_Delete')
    w.Txt_Tools_Gate_Output.delete(0.0,END)
    
def Btn_Tools_Gate_Output_Copy():
    print('home_support.Btn_Tools_Gate_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Tools_Gate_Output.get(0.0,END))
    
def Btn_Ana_Wd_Output_Delete():
    print('home_support.Btn_Ana_Wd_Output_Delete')
    w.Txt_Ana_Wd_Output.delete(0.0,END)
    
def Btn_Ana_Wd_Output_Copy():
    print('home_support.Btn_Ana_Wd_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Ana_Wd_Output.get(0.0,END))
    
def Btn_Ana2_Wd_Output_Delete():
    print('home_support.Btn_Ana2_Wd_Output_Delete')
    w.Txt_Ana2_Wd_Output.delete(0.0,END)
    
def Btn_Ana2_Wd_Output_Copy():
    print('home_support.Btn_Ana2_Wd_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Ana2_Wd_Output.get(0.0,END))

def Btn_Ana_Masks_Output_Delete():
    print('home_support.Btn_Ana_Masks_Output_Delete')
    w.Txt_Ana_Masks_Output.delete(0.0,END)
    
def Btn_Ana_Masks_Output_Copy():
    print('home_support.Btn_Ana_Masks_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Ana_Masks_Output.get(0.0,END))
    
def Btn_Ana_Pol_Output_Delete():
    print('home_support.Btn_Ana_Pol_Output_Delete')
    w.Txt_Ana_Pol_Output.delete(0.0,END)
    
def Btn_Ana_Pol_Output_Copy():
    print('home_support.Btn_Ana_Pol_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Ana_Pol_Output.get(0.0,END))

def Btn_Ana_Test_Output_Delete():
    print('home_support.Btn_Ana_Test_Output_Delete')
    w.Txt_Ana_Test_Output.delete(0.0,END)
    
def Btn_Ana_Test_Output_Copy():
    print('home_support.Btn_Ana_Test_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Ana_Test_Output.get(0.0,END))
    
def Btn_Speed_Output_Delete():
    print('home_support.Btn_Speed_Output_Delete')
    w.Txt_Speed_Output.delete(0.0,END)
    
def Btn_Speed_Output_Copy():
    print('home_support.Btn_Speed_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Speed_Output.get(0.0,END))
    
def Btn_Attack_Dic_Output_Delete():
    print('home_support.Btn_Attack_Dic_Output_Delete')
    w.Txt_Attack_Dic_Output.delete(0.0,END)
    
def Btn_Attack_Dic_Output_Copy():
    print('home_support.Btn_Attack_Dic_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_Attack_Dic_Output.get(0.0,END))
    
def Btn_NewPass_Output_Delete():
    print('home_support.Btn_NewPass_Output_Delete')
    w.Txt_NewPass_Output.delete(0.0,END)
    
def Btn_NewPass_Output_Copy():
    print('home_support.Btn_NewPass_Output_Copy')
    import pyperclip
    pyperclip.copy(w.Txt_NewPass_Output.get(0.0,END))
    

def Btn_Gen_Brute_Browse_Click():
    global w
    print('home_support.Btn_Gen_Brute_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Gen_Brute_CharsetFN.delete(0,END)
        w.Txt_Gen_Brute_CharsetFN.insert(0,file1.name)
        
    

def Btn_Gen_Brute_Run_Click(Txt_Gen_Brute_Min,Txt_Gen_Brute_Max,Txt_Gen_Brute_FN,Txt_Gen_Brute_CharsetFN,Txt_Gen_Brute_Charset,Chk_Gen_Brute_Nogen,Txt_Gen_Brute_Nogen,Chk_Gen_Brute_Invert,Chk_Gen_Brute_Fixed,Txt_Gen_Brute_Fixed,Chk_Gen_Brute_Start,Txt_Gen_Brute_Start):
    global w
    print('home_support.Btn_Gen_Brute_Run_Click')
    
    cmd = 'crunch '+Txt_Gen_Brute_Min+' '+Txt_Gen_Brute_Max+' -f '+Txt_Gen_Brute_CharsetFN+' '+Txt_Gen_Brute_Charset
    
    if Chk_Gen_Brute_Fixed=='1':
        cmd+=' -t '+Txt_Gen_Brute_Fixed
        
    if Chk_Gen_Brute_Nogen=='1':
        cmd+=' -d '+Txt_Gen_Brute_Nogen
        
    if Chk_Gen_Brute_Invert=='1':
        cmd+=' -i'
        
    if Chk_Gen_Brute_Start=='1':
        cmd+=' -s '+Txt_Gen_Brute_Start
        
    cmd += ' > "'+d['path_dict']+'/'+Txt_Gen_Brute_FN+'"'
    
    print(cmd)
    
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Gen_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Gen_Output.insert(0.0,time_start+' | '+"Crunch is running...\n")
    w.Btn_Gen_Brute_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    
    output = commands.getstatusoutput(cmd)
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    w.Txt_Gen_Output.insert(0.0,'\n\n')
    w.Txt_Gen_Output.insert(0.0,output)
    w.Txt_Gen_Output.insert(0.0,time_end+' | '+"Crunch has finished.\n")
    
    #refresh dictionaries repository
    file1=d['path_dict']
    w.List_Import_Repos.delete(0,END)
    for root, dirs, files in os.walk(file1, topdown=False):
        for name in files:
            path=os.path.join(root, name)
            w.List_Import_Repos.insert(0, path[len(file1):])
    
    w.Btn_Gen_Brute_Run.configure(state=NORMAL)

def Btn_Gen_Saved_Browse_Click():
    print('home_support.Btn_Gen_Saved_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Gen_Saved_Path.delete(0,END)
        w.Txt_Gen_Saved_Path.insert(0,file1.name)
    
    

def Btn_Gen_Saved_Run_Click(Txt_Gen_Saved_Path,Txt_Gen_Saved_FN,Txt_Gen_Saved_Minlen,Chk_Gen_Saved_Removebegin,Chk_Gen_Saved_Removeend,Chk_Gen_Saved_Incnames,Chk_Gen_Saved_Verbose):
    print('home_support.Btn_Gen_Saved_Run_Click')
    
    cmd = 'perl '+d['path_wyd']+'/wyd.pl -o "'+d['path_dict']+'/'+Txt_Gen_Saved_FN+'" -s '+Txt_Gen_Saved_Minlen
    
    if Chk_Gen_Saved_Removebegin=='1':
        cmd+=' -b'
    
    if Chk_Gen_Saved_Removeend=='1':
        cmd+=' -e'
    
    if Chk_Gen_Saved_Incnames=='1':
        cmd+=' -f'
        
    if Chk_Gen_Saved_Verbose=='1':
        cmd+=' -v'
            
    cmd+=' '+Txt_Gen_Saved_Path
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Gen_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Gen_Output.insert(0.0,time_start+' | '+"Wyd is running...\n")
    w.Btn_Gen_Saved_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    output = commands.getstatusoutput(cmd)
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Gen_Output.insert(0.0,'\n\n')
    w.Txt_Gen_Output.insert(0.0,output)
    w.Txt_Gen_Output.insert(0.0,time_end+' | '+"Wyd has finished.\n")

    w.Btn_Gen_Saved_Run.configure(state=NORMAL)
    
    #refresh repository
    file1=d['path_dict']
    w.List_Import_Repos.delete(0,END)
    for root, dirs, files in os.walk(file1, topdown=False):
        for name in files:
            path=os.path.join(root, name)
            w.List_Import_Repos.insert(0, path[len(file1):])

def Btn_Gen_User_Run_Click(args):
    print('home_support.Btn_Gen_User_Run_Click')
    
    w.Btn_Gen_User_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    os.system("gnome-terminal -x ./cupp.sh "+d['path_cupp']+"/ "+d['path_dict'])
    
    #refresh wordlist repository list after 1 min   
    time.sleep(60)
    
    file1=d['path_dict']
    w.List_Import_Repos.delete(0,END)
    for root, dirs, files in os.walk(file1, topdown=False):
        for name in files:
            path=os.path.join(root, name)
            w.List_Import_Repos.insert(0, path[len(file1):])

    w.Btn_Gen_User_Run.configure(state=NORMAL)
    

def Btn_Gen_Web_Run_Click(Txt_Gen_Web_URL,Txt_Gen_Web_UA,Txt_Gen_Web_Minlen,Txt_Gen_Web_Depth,Chk_Gen_Web_IncMeta,Sel_Gen_Web_Auth_Type,Txt_Gen_Web_Auth_User,Txt_Gen_Web_Auth_Pass,Chk_Gen_Web_Keep,Chk_Gen_Web_Write,Txt_Gen_Web_OutputFN,Chk_Gen_Web_ShowCount,Chk_Gen_Web_Verbose):
    global w
    print('home_support.Btn_Gen_Web_Run_Click')
    
    
    cmd = 'ruby cewl.rb --ua \''+Txt_Gen_Web_UA+'\' --min_word_length '+Txt_Gen_Web_Minlen+' --depth '+Txt_Gen_Web_Depth
    
    if Chk_Gen_Web_IncMeta=='1':
        cmd+=' --meta'
        
    if Chk_Gen_Web_Keep=='1':
        cmd+=' --keep'
    
    if Chk_Gen_Web_Write=='1':
        cwd = os.getcwd()
        cmd+=' --write \''+d['path_dict']+'/'+Txt_Gen_Web_OutputFN+'\''
        
    if Chk_Gen_Web_ShowCount=='1':
        cmd+=' --count'
        
    if Sel_Gen_Web_Auth_Type!='none':
        cmd+=' --auth_type '+Sel_Gen_Web_Auth_Type+' --auth_user '+Txt_Gen_Web_Auth_User+' --auth_pass '+Txt_Gen_Web_Auth_Pass
    
    if Chk_Gen_Web_Verbose=='1':
        cmd+=' --verbose'
    
    cmd+=' '+Txt_Gen_Web_URL
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Gen_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Gen_Output.insert(0.0,time_start+' | '+"CeWL is running...\n")
    w.Btn_Gen_Web_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_cewl'])
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Gen_Output.insert(0.0,output)
    w.Txt_Gen_Output.insert(0.0,time_end+' | '+"CeWL has finished.\n")
    
    #refresh wordlist repository list
    file1=d['path_dict']
    w.List_Import_Repos.delete(0,END)
    for root, dirs, files in os.walk(file1, topdown=False):
        for name in files:
            path=os.path.join(root, name)
            w.List_Import_Repos.insert(0, path[len(file1):])
    
    w.Btn_Gen_Web_Run.configure(state=NORMAL)
    
def Btn_Home_Analyze_Click():
    print('home_support.Btn_Home_Analyze_Click')
    
    w.TNotebook2.select(5)
    
    

def Btn_Home_GenerateWordlist_Click():
    print('home_support.Btn_Home_GenerateWordlist_Click')
    
    w.TNotebook2.select(3)
    
    

def Btn_Home_Import_Click():
    print('home_support.Btn_Home_Import_Click')
    
    w.TNotebook2.select(2)
    
    

def Btn_Home_Merge_Click():
    print('home_support.Btn_Home_Merge_Click')
    
    w.TNotebook2.select(4)
    
    

def Btn_Home_RunSpeedTest_Click():
    print('home_support.Btn_Home_RunSpeedTest_Click')
    
    w.TNotebook2.select(6)
    
    
    
def Btn_Home_Attack_Click():
    print('home_support.Btn_Home_Attack_Click')
    
    w.TNotebook2.select(7)
    
    

def Btn_Home_Config_Click():
    print('home_support.Btn_Home_Config_Click')
    
    w.TNotebook2.select(1)
    
    
    
def Btn_Home_NewPass_Click():
    print('home_support.Btn_Home_NewPass_Click')
    
    w.TNotebook2.select(8)
    
    

def Btn_Import_Browse_Click():
    global w
    print('home_support.Btn_Import_Browse_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Import_Path.delete(0,END)
        w.Txt_Import_Path.insert(0,file1)
        w.List_Import_Repos.delete(0,END)
        for root, dirs, files in os.walk(file1, topdown=False):
            for name in files:
                path=os.path.join(root, name)
                w.List_Import_Repos.insert(0, path[len(file1):])
    
    
    
def Btn_Import_Refresh_Click():
    global w
    print('home_support.Btn_Import_Refresh_Click')
    
    file1=d['path_dict']
    w.List_Import_Repos.delete(0,END)
    for root, dirs, files in os.walk(file1, topdown=False):
        for name in files:
            path=os.path.join(root, name)
            w.List_Import_Repos.insert(0, path[len(file1):])
    
    
    
def Btn_Import_Select_Click():
    global w
    print('home_support.Btn_Import_Select_Click')
    
    path=w.Txt_Import_Path.get()+w.List_Import_Repos.get(ACTIVE)
    
    w.Txt_Merge_Path1.delete(0,END)
    w.Txt_Merge_Path1.insert(0,path)
    
    w.Txt_Ana_Wd_Path.delete(0,END)
    w.Txt_Ana_Wd_Path.insert(0,path)
    
    w.Txt_Ana2_Wd_Path.delete(0,END)
    w.Txt_Ana2_Wd_Path.insert(0,path)
    
    w.Txt_Ana_Wd_Masks.delete(0,END)
    w.Txt_Ana_Wd_Masks.insert(0,w.List_Import_Repos.get(ACTIVE)[1:]+".masks")
    
    w.Txt_Attack_Dic_Wd_Path.delete(0,END)
    w.Txt_Attack_Dic_Wd_Path.insert(0,path)
    
    
    
def Btn_Import_Uncompress_Click():
    global w
    print('home_support.Btn_Import_Uncompress_Click')
    
    path=w.Txt_Import_Path.get()+w.List_Import_Repos.get(ACTIVE)
    
    base=os.path.basename(path)
    filename, file_extension = os.path.splitext(base)
    
        
    if file_extension==".gz":
        cmd='gunzip -c "'+path+'" > "'+d['path_dict']+'/'+filename+'"'
        output = subprocess.check_output(cmd, shell=True,cwd=d['path_dict'])
        print output
        
    if file_extension==".zip":
        cmd='unzip "'+path+'"'
        output = subprocess.check_output(cmd, shell=True,cwd=d['path_dict'])
        print output
        
    if file_extension==".bz2":
        cmd='bzip2 -dkc "'+path+'" > "'+d['path_dict']+'/'+filename+'"'
        output = subprocess.check_output(cmd, shell=True,cwd=d['path_dict'])
        print output
        
    if file_extension==".tar":
        cmd='tar -xvf "'+path+'"'
        output = subprocess.check_output(cmd, shell=True,cwd=d['path_dict'])
        print output
    
    #refresh repository
    file1=d['path_dict']
    w.List_Import_Repos.delete(0,END)
    for root, dirs, files in os.walk(file1, topdown=False):
        for name in files:
            path=os.path.join(root, name)
            w.List_Import_Repos.insert(0, path[len(file1):])

def Btn_Merge_Browse1_Click():
    print('home_support.Btn_Merge_Browse1_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Merge_Path1.delete(0,END)
        w.Txt_Merge_Path1.insert(0,file1.name)
        
    

def Btn_Merge_Browse2_Click():
    print('home_support.Btn_Merge_Browse2_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Merge_Path2.delete(0,END)
        w.Txt_Merge_Path2.insert(0,file1.name)
        
    

def Btn_Merge_Browse3_Click():
    print('home_support.Btn_Merge_Browse3_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Merge_Path3.delete(0,END)
        w.Txt_Merge_Path3.insert(0,file1.name)
        
    

def Btn_Merge_Browse4_Click():
    print('home_support.Btn_Merge_Browse4_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Merge_Path4.delete(0,END)
        w.Txt_Merge_Path4.insert(0,file1.name)
        
    

def Btn_Merge_Run_Click(Txt_Merge_Path1,Txt_Merge_Path2,Txt_Merge_Path3,Txt_Merge_Path4,Txt_Merge_OutputFN,Chk_Merge_Sort,Chk_Merge_Duplicates,Chk_Merge_Reverse):
    global top_level
    print('home_support.Btn_Merge_Run_Click')
    
    
    cmd = 'python dymerge.py'
    
    if Txt_Merge_Path1!='':
        cmd+=' '+Txt_Merge_Path1
        
    if Txt_Merge_Path2!='':
        cmd+=' '+Txt_Merge_Path2
        
    if Txt_Merge_Path3!='':
        cmd+=' '+Txt_Merge_Path3
        
    if Txt_Merge_Path4!='':
        cmd+=' '+Txt_Merge_Path4
    
    cmd +=' -o "'+d['path_dict']+'/'+Txt_Merge_OutputFN+'"'
    
    if Chk_Merge_Sort=='1':
        cmd+=' -s'
    
    if Chk_Merge_Duplicates=='1':
        cmd+=' -u'
    
    if Chk_Merge_Reverse=='1':
        cmd+=' -r'
    
    print(cmd)
    
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Merge_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Merge_Output.insert(0.0,time_start+' | '+"DyMerge is running...\n")
    w.Btn_Merge_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_dymerge'])
    #output.wait()
    
    #remove color and style on text (can't be rendered in textbox)
    output = output.replace("\033[0m","")
    output = output.replace("\033[1m","")
    output = output.replace("\033[31m","")
    output = output.replace("\033[32m","")
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Merge_Output.insert(0.0,output)
    w.Txt_Merge_Output.insert(0.0,time_end+' | '+"DyMerge has finished.\n")
    
    
    #refresh dictionaries repository
    file1=d['path_dict']
    w.List_Import_Repos.delete(0,END)
    for root, dirs, files in os.walk(file1, topdown=False):
        for name in files:
            path=os.path.join(root, name)
            w.List_Import_Repos.insert(0, path[len(file1):])
    
    w.Btn_Merge_Run.configure(state=NORMAL)
    

def Btn_Tools_Len_Browse_Click():
    print('home_support.Btn_Tools_Len_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Tools_Len_Path.delete(0,END)
        w.Txt_Tools_Len_Path.insert(0,file1.name)
        
    
    
def Btn_Tools_Gate_Browse_Click():
    print('home_support.Btn_Tools_Gate_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Tools_Gate_Path.delete(0,END)
        w.Txt_Tools_Gate_Path.insert(0,file1.name)
        
    

def Btn_Tools_Len_Run_Click(Txt_Tools_Len_Path,Txt_Tools_Len_OutputFN,Txt_Tools_Len_MinLen,Txt_Tools_Len_MaxLen):
    print('home_support.Btn_Tools_Len_Run_Click')
    
    cmd = './len.bin '+Txt_Tools_Len_MinLen+' '+Txt_Tools_Len_MaxLen+' < "'+Txt_Tools_Len_Path+'" > "'+d['path_dict']+'/'+Txt_Tools_Len_OutputFN+'"'
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Tools_Len_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Tools_Len_Output.insert(0.0,time_start+' | '+"Len is running...\n")
    w.Btn_Tools_Len_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_len'])
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Tools_Len_Output.insert(0.0,output)
    w.Txt_Tools_Len_Output.insert(0.0,time_end+' | '+"Len has finished.\n")
    
    w.Btn_Tools_Len_Run.configure(state=NORMAL)
    
    

def Btn_Tools_Gate_Run_Click(Txt_Tools_Gate_Path,Txt_Tools_Gate_OutputFN,Txt_Tools_Gate_Sections,Txt_Tools_Gate_Offset):
    print('home_support.Btn_Tools_Gate_Run_Click')
    
    
    cmd = './gate.bin '+Txt_Tools_Gate_Sections+' '+Txt_Tools_Gate_Offset+' < "'+Txt_Tools_Gate_Path+'" > "'+d['path_dict']+'/'+Txt_Tools_Gate_OutputFN+'"'
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Tools_Gate_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Tools_Gate_Output.insert(0.0,time_start+' | '+"Gate is running...\n")
    w.Btn_Tools_Gate_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_len'])
    
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Tools_Gate_Output.insert(0.0,output)
    w.Txt_Tools_Gate_Output.insert(0.0,time_end+' | '+"Gate has finished.\n")
    
    w.Btn_Tools_Gate_Run.configure(state=NORMAL)
    


def Btn_Speed_Run_Click(args):
    global w
    print('home_support.Btn_Speed_Run_Click')
    
    cmd=d['path_hashcat']+'/hashcat64.bin -b'
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Speed_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Speed_Output.insert(0.0,time_start+' | '+"Hashcat is running...\n")
    w.Btn_Speed_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    output = commands.getstatusoutput(cmd)[1]
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Speed_Output.insert(0.0,'\n\n')
    w.Txt_Speed_Output.insert(0.0,output)
    w.Txt_Speed_Output.insert(0.0,time_end+' | '+"Hashcat has finished.\n")
      
    w.List_Speed_Devices.delete(0,END)
    #search for devices
    devices_list=[];
    pattern = re.compile(r'\* Device (.*)')
    
    for m in re.finditer(pattern, output):
        w.List_Speed_Devices.insert(END, m.group(1))
        devices_list.append(m.group(1))
        
    #search hash types and speeds per device (supports 2 devices)
    w.List_Speed_PPS.delete(0,END)
    pattern = re.compile(r'Hashtype: (.*)\n\nSpeed.Dev.#1.....: (.*) (.*)(\nSpeed.Dev.#2.....: (.*) (.*)|)')
    hash_default_list=[];
    pps_list=[];
    
    for m in re.finditer(pattern, output):
        if m.group(4)!="":
            opt=m.group(1)+": #1: "+m.group(2).strip()
            w.List_Speed_PPS.insert(END, opt)
            pps_list.append(opt)
            
            opt=m.group(1)+": #2:"+m.group(5).strip()
            w.List_Speed_PPS.insert(END, opt)
            pps_list.append(opt)
        else:
            speed=m.group(2).strip()
            if speed.endswith(" MH/s"):
                speed=float(speed[:-5])*1000000
                speed=int(speed)
            else:
                if speed.endswith(" kH/s"):
                    speed=float(speed[:-5])*1000
                    speed=int(speed)
                else:  
                    if speed.endswith(" H/s"):
                        speed=float(speed[:-4])*1
                        speed=int(speed)
            
            opt=m.group(1)+": "+str(speed)
            w.List_Speed_PPS.insert(END, opt)
            pps_list.append(opt)
        
        #populate list hash/speed
        hash_default_list.append(opt)
    
    #populate list of hash to pick a default one
    w.Sel_Speed_Default.configure(values=hash_default_list)
    
    #select last
    w.Sel_Speed_Default.set(opt)
    #w.Sel_Speed_Default.set(d['Sel_Speed_Default'])
    
    #store results speedtest
    d['List_Speed_Devices']=devices_list
    d['List_Speed_Default']=hash_default_list
    d['List_Speed_PPS']=pps_list
    
    w.Btn_Speed_Run.configure(state=NORMAL)
    
    

def Btn_NewPass_Click(Txt_NewPass_Len,Chk_NewPass_Specials):
    import os
    import pyperclip
    import time
    
    global w
    print('home_support.Btn_Gen_Web_Run_Click')
    
    cmd = './passtrust -c -r -l '+Txt_NewPass_Len
    
    if Chk_NewPass_Specials=='1':
        cmd+=' -s'

    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_NewPass_Output.insert(0.0,cmd+'\n\n')
    w.Txt_NewPass_Output.insert(0.0,time_start+' | '+"PassTrust is running...\n")
    w.Btn_NewPass_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    print(cmd)
    
    FNULL = open(os.devnull, 'w')
    tmp = subprocess.Popen(cmd, stdout=FNULL, shell=True,cwd=d['path_passtrust'])
    
    #wait 2s, copy clipboard and kill process
    time.sleep(2)    
    
    #cp password from clipboard
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    output="Password generated: "+pyperclip.paste()+"\n\n"
    
    tmp.kill()
    
    w.Txt_NewPass_Output.insert(0.0,time_end+' | '+"PassTrust has finished.\n")
    w.Txt_NewPass_Output.insert(0.0,output)
    
    pyperclip.copy("test")
    
    w.Btn_NewPass_Run.configure(state=NORMAL)
    
def Btn_Cfg_Abrase_Click():
    print('home_support.Btn_Cfg_Abrase_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Abrase.delete(0,END)
        w.Txt_Cfg_Abrase.insert(0,file1)
        
    

def Btn_Cfg_Cewl_Click():
    print('home_support.Btn_Cfg_Cewl_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Cewl.delete(0,END)
        w.Txt_Cfg_Cewl.insert(0,file1)
        
    
    
def Btn_Cfg_Crunch_Click():
    print('home_support.Btn_Cfg_Crunch_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Crunch.delete(0,END)
        w.Txt_Cfg_Crunch.insert(0,file1)
        
    
    
def Btn_Cfg_Cupp_Click():
    print('home_support.Btn_Cfg_Cupp_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Cupp.delete(0,END)
        w.Txt_Cfg_Cupp.insert(0,file1)
        
    
    
def Btn_Cfg_Dymerge_Click():
    print('home_support.Btn_Cfg_Dymerge_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Dymerge.delete(0,END)
        w.Txt_Cfg_Dymerge.insert(0,file1)
        
    
    
def Btn_Cfg_Hashcat_Click():
    print('home_support.Btn_Cfg_Hashcat_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Hashcat.delete(0,END)
        w.Txt_Cfg_Hashcat.insert(0,file1)
        
    
    
def Btn_Cfg_John_Click():
    print('home_support.Btn_Cfg_John_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_John.delete(0,END)
        w.Txt_Cfg_John.insert(0,file1)
        
    
    
def Btn_Cfg_Len_Click():
    print('home_support.Btn_Cfg_Len_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Len.delete(0,END)
        w.Txt_Cfg_Len.insert(0,file1)
        
    
    
def Btn_Cfg_Pack_Click():
    print('home_support.Btn_Cfg_Pack_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Pack.delete(0,END)
        w.Txt_Cfg_Pack.insert(0,file1)
        
    
    
def Btn_Cfg_Passtrust_Click():
    print('home_support.Btn_Cfg_Passtrust_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Passtrust.delete(0,END)
        w.Txt_Cfg_Passtrust.insert(0,file1)
        
    
    
def Btn_Cfg_Pwdlyser_Click():
    print('home_support.Btn_Cfg_Pwdlyser_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Pwdlyser.delete(0,END)
        w.Txt_Cfg_Pwdlyser.insert(0,file1)
        
    
    
def Btn_Cfg_Pipal_Click():
    print('home_support.Btn_Cfg_Pipal_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Pipal.delete(0,END)
        w.Txt_Cfg_Pipal.insert(0,file1)
        
    
    
def Btn_Cfg_Wyd_Click():
    print('home_support.Btn_Cfg_Wyd_Click')
    
    file1 = tkFileDialog.askdirectory(title='Choose a folder')
    if file1 != None:
        w.Txt_Cfg_Wyd.delete(0,END)
        w.Txt_Cfg_Wyd.insert(0,file1)
        
    
    
def Btn_Cfg_Update_Click(Txt_Cfg_Abrase,Txt_Cfg_Cewl,Txt_Cfg_Crunch,Txt_Cfg_Cupp,Txt_Cfg_Dymerge,Txt_Cfg_Hashcat,Txt_Cfg_John,Txt_Cfg_Len,Txt_Cfg_Pack,Txt_Cfg_Passtrust,Txt_Cfg_Pwdlyser,Txt_Cfg_Pipal,Txt_Cfg_Wyd):
    print('home_support.Btn_Cfg_Update_Click')
    
    d['path_abrase']=Txt_Cfg_Abrase
    d['path_cewl']=Txt_Cfg_Cewl
    d['path_crunch']=Txt_Cfg_Crunch
    d['path_cupp']=Txt_Cfg_Cupp
    d['path_dymerge']=Txt_Cfg_Dymerge
    d['path_hashcat']=Txt_Cfg_Hashcat
    d['path_john']=Txt_Cfg_John
    d['path_len']=Txt_Cfg_Len
    d['path_pack']=Txt_Cfg_Pack
    d['path_passtrust']=Txt_Cfg_Passtrust
    d['path_pwdlyser']=Txt_Cfg_Pwdlyser
    d['path_pipal']=Txt_Cfg_Pipal
    d['path_wyd']=Txt_Cfg_Wyd
    
    d.sync()
    
    
    
def Btn_Speed_Apply_Click(Sel_Speed_Default):
    print('home_support.Btn_Speed_Apply_Click')
    
    d['Sel_Speed_Default']=Sel_Speed_Default
    
    d.sync()
    
    #get pps from selection
    pos=Sel_Speed_Default.index(":")
    speed=Sel_Speed_Default[pos+2:]
    
    #set pps fields to preset
    w.Txt_Ana_Masks_Speed.delete(0,END)
    w.Txt_Ana_Masks_Speed.insert(0,speed)
    vChk_Ana_Masks_Speed.set(1)
    w.Txt_Ana_Pol_Speed.delete(0,END)
    w.Txt_Ana_Pol_Speed.insert(0,speed)
    vChk_Ana_Pol_Speed.set(1)
    
    

def Btn_Attack_Dic_Run_Click(Txt_Attack_Dic_Wd_Path,Txt_Attack_Dic_Pwd_Path,Chk_Attack_Dic_Mangling,Chk_Attack_Dic_Restore,Txt_Attack_Dic_Restore,Chk_Attack_Dic_Name,Txt_Attack_Dic_Name,Chk_Attack_Dic_Status,Txt_Attack_Dic_Status,Chk_Attack_Dic_Show,Chk_Attack_Dic_Force,Sel_Attack_Dic_Force):
    print('home_support.Btn_Attack_Dic_Run_Click')
    
    
    cmd = './john'
    if Chk_Attack_Dic_Force=='1':
        cmd+=' --format='+Sel_Attack_Dic_Force
            
    if Chk_Attack_Dic_Show=='0':
        cmd+=' --wordlist='+Txt_Attack_Dic_Wd_Path
        
        if Chk_Attack_Dic_Mangling=='1':
            cmd+=' --rules'
        
        if Chk_Attack_Dic_Restore=='1':
            cmd+=' --restore='+Txt_Attack_Dic_Restore
        
        if Chk_Attack_Dic_Name=='1':
            cmd+=' --session='+Txt_Attack_Dic_Name
        
        if Chk_Attack_Dic_Status=='1':
            cmd+=' --status='+Txt_Attack_Dic_Status
    else:  
        cmd+=' --show'
    
    cmd+=' '+Txt_Attack_Dic_Pwd_Path
    
    print(cmd)
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Attack_Dic_Output.insert(0.0,cmd+'\n\n')
    w.Txt_Attack_Dic_Output.insert(0.0,time_start+' | '+"John is running...\n")
    w.Btn_Attack_Dic_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    output = subprocess.check_output(cmd, shell=True,cwd=d['path_john'])
        
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    w.Txt_Attack_Dic_Output.insert(0.0,output)
    w.Txt_Attack_Dic_Output.insert(0.0,time_end+' | '+"John has finished.\n")
    
    w.Btn_Attack_Dic_Run.configure(state=NORMAL)

def Btn_Attack_Dic_Del_Click():
    print('home_support.Btn_Attack_Dic_Del_Click')
    
    potfile=d['path_john']+'/john.pot'
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    if os.path.isfile(potfile):
        os.remove(potfile)
        output = "POT file removed."
    else:
        output = "POT file not found."

    w.Txt_Attack_Dic_Output.insert(0.0,time_start+' | '+output)
    w.Txt_Attack_Dic_Output.insert(0.0,'\n\n')
    
def Btn_Attack_BF_Del_Click():
    print('home_support.Btn_Attack_BF_Del_Click')
    
    potfile=d['path_hashcat']+'/hashcat.potfile'
    
    if os.path.isfile(potfile):
        os.remove(potfile)


def Btn_Attack_Dic_Wd_Browse_Click():
    print('home_support.Btn_Attack_Dic_Wd_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Attack_Dic_Wd_Path.delete(0,END)
        w.Txt_Attack_Dic_Wd_Path.insert(0,file1.name)
        
    

def Btn_Attack_Dic_Pwd_Browse_Click():
    print('home_support.Btn_Attack_Dic_Pwd_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Attack_Dic_Pwd_Path.delete(0,END)
        w.Txt_Attack_Dic_Pwd_Path.insert(0,file1.name)
        
    

def Btn_Attack_BF_Wd_Browse_Click():
    print('home_support.Btn_Attack_BF_Wd_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Attack_BF_Wd_Path.delete(0,END)
        w.Txt_Attack_BF_Wd_Path.insert(0,file1.name)
    
    
    
def Btn_Attack_BF_Pwd_Browse_Click():
    print('home_support.Btn_Attack_BF_Pwd_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Attack_BF_Pwd_Path.delete(0,END)
        w.Txt_Attack_BF_Pwd_Path.insert(0,file1.name)
    
    
    
def Btn_Attack_BF_Hash_Browse_Click():
    print('home_support.Btn_Attack_BF_Hash_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Attack_BF_Hash_Path.delete(0,END)
        w.Txt_Attack_BF_Hash_Path.insert(0,file1.name)
    
    
    
def Btn_Attack_BF_Masks_Browse_Click():
    print('home_support.Btn_Attack_BF_Masks_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Attack_BF_Masks_Path.delete(0,END)
        w.Txt_Attack_BF_Masks_Path.insert(0,file1.name)
    
    
    
def Btn_Attack_BF_Out_Browse_Click():
    print('home_support.Btn_Attack_BF_Out_Browse_Click')
    
    file1 = tkFileDialog.askopenfile(mode='rb',title='Choose a file')
    if file1 != None:
        w.Txt_Attack_BF_Out_Path.delete(0,END)
        w.Txt_Attack_BF_Out_Path.insert(0,file1.name)
    
    


def Btn_Attack_BF_Run_Click(Txt_Attack_BF_Pwd_Path,Sel_Attack_BF_Hash,Txt_Attack_BF_Masks_Path,Chk_Attack_BF_Masks,Chk_Attack_BF_Out,Txt_Attack_BF_Out_Path,Chk_Attack_BF_Name,Txt_Attack_BF_Name,Chk_Attack_BF_Restore,Txt_Attack_BF_Restore,Chk_Attack_BF_Status_Timer,Txt_Attack_BF_Status_Timer,Chk_Attack_BF_Runtime,Txt_Attack_BF_Runtime,Chk_Attack_BF_Speed,Sel_Attack_BF_Device,Txt_Attack_BF_Temp,Txt_Attack_BF_TempRetain,Sel_Attack_BF_Workload,Chk_Attack_BF_PowerTuning):
    print('home_support.Btn_Attack_Dic_Run_Click')
    
    
    cmd = d['path_hashcat']+'/hashcat64.bin --attack-mode 3'
    
    if Chk_Attack_BF_Restore=='1':
        cmd+=' --restore --session='+Txt_Attack_BF_Restore
    
    if Chk_Attack_BF_Name=='1':
        cmd+=' --session='+Txt_Attack_BF_Name
        
    if Chk_Attack_BF_Out=='1':
        cmd+=' -o \''+Txt_Attack_BF_Out_Path+'\' --outfile-format=3'
        
    if Chk_Attack_BF_Status_Timer=='1':
        cmd+=' --status --status-timer='+Txt_Attack_BF_Status_Timer
        
    if Chk_Attack_BF_Runtime=='1':
        cmd+=' --runtime='+Txt_Attack_BF_Runtime
        
    if Chk_Attack_BF_Speed=='1':
        cmd+=' --speed-only'
        
        
    if Chk_Attack_BF_PowerTuning=='1':
        cmd+=' --powertune-enable'
        
    if Sel_Attack_BF_Device=='CPU only':
        cmd+=' --opencl-device-types=1'
    if Sel_Attack_BF_Device=='GPU only':
        cmd+=' --opencl-device-types=2'
        cmd+=' --gpu-temp-abort='+Txt_Attack_BF_Temp
        cmd+=' --gpu-temp-retain='+Txt_Attack_BF_TempRetain
    if Sel_Attack_BF_Device=='FPGA only':
        cmd+=' --opencl-device-types=3'
    if Sel_Attack_BF_Device=='GPU, CPU':
        cmd+=' --opencl-device-types=2,1'
        cmd+=' --gpu-temp-abort='+Txt_Attack_BF_Temp
        cmd+=' --gpu-temp-retain='+Txt_Attack_BF_TempRetain
    if Sel_Attack_BF_Device=='GPU, FPGA, CPU':
        cmd+=' --opencl-device-types=2,3,1'
        cmd+=' --gpu-temp-abort='+Txt_Attack_BF_Temp
        cmd+=' --gpu-temp-retain='+Txt_Attack_BF_TempRetain
        
    if Sel_Attack_BF_Workload=='Low':
        cmd+=' --workload-profile=1'
    if Sel_Attack_BF_Workload=='Default':
        cmd+=' --workload-profile=2'
    if Sel_Attack_BF_Workload=='High':
        cmd+=' --workload-profile=3'
    if Sel_Attack_BF_Workload=='Nightmare':
        cmd+=' --workload-profile=4'
    
    #get Hash type from selection
    pos=Sel_Attack_BF_Hash.index("|")
    hashtype=Sel_Attack_BF_Hash[:pos]
    cmd+=' --hash-type='+hashtype.strip()
        
    cmd+=' \''+Txt_Attack_BF_Pwd_Path+'\''
    
    if Chk_Attack_BF_Masks=='1':
        cmd+=' \''+Txt_Attack_BF_Masks_Path+'\''
    
    
    time_start=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    
    print(time_start+' | '+"Hashcat is running...\n")
    w.Btn_Attack_BF_Run.configure(state=DISABLED)
    Tk.update(top_level)
    
    print(cmd)
    os.system(cmd)
    os.system('gnome-terminal -x '+cmd)
    time_end=datetime.datetime.fromtimestamp(time.time()).strftime('%H:%M:%S')
    print(time_end+' | '+"Hashcat has finished.\n")
    
    w.Btn_Attack_BF_Run.configure(state=NORMAL)
    
def Tips_Home(tip_num):
    if tip_num==0:
        vLbl_Home_Msg.set("More info when going over a tip icon...\n\nDISCLAIMER: UPAT is for educational purposes only. We don't promote malicious and unethical practices.\n\nAny actions and or activities related to the material contained within this application is solely your responsibility. The misuse of the tools launched from this application can result in criminal charges brought against the persons in question. The author of UPAT will not be held responsible in the event any criminal charges be brought against any individuals misusing the tools to break the law.")
    if tip_num==1:
        vLbl_Home_Msg.set("In this tab you can Browse the Wordlists Repository and Select one to set the various tools input with its path.\n\nOpen-source dictionaries have been added to this folder with some famous ones such as the TOP 500 worst passwords compilation or ones taken from recent leaks such as the Rock-You website.\n\nThis allows to preconfigure quicker your options.")
    if tip_num==2:
        vLbl_Home_Msg.set("In this tab you can Generate a new wordlist based on web crawling of a given URL or a saved document contents.\n\nYou can also Profile a User by answering some questions on your target in an interactive manner.\n\nFinally, you can also create a brute-force list providing information on the expected charset.")
    if tip_num==3:
        vLbl_Home_Msg.set("In this tab you can Manipulate existing wordlists in a handy manner.\n\nYou can merge up to four files into one to run a larger dictionary attack.\n\nYou can split a file in equal sections to distribute the load in multiple sessions or machines.\n\nYou can also extract words of a given length from an existing wordlist to create a new one more specific.")
    if tip_num==4:
        vLbl_Home_Msg.set("In this tab you can Analyze a wordlist, to learn more on its composition in terms of length, charset, frequency distribution, etc.\n\nYou can then create a masks file that can then be used by Hashcat for a more precise brute-force attack.\n\nYou can also compare the masks coverage of a previously created mask file against a wordlist.")
    if tip_num==5:
        vLbl_Home_Msg.set("In this tab you can Run the speedtest that will use Hashcat to compute pps (Password-per-second) speed values for your machine for each hash type handled.\n\nThis gives you an indication of the performances to expect when running the attack, and also allows you to have an estimate on time-to-crack when generating masks.")
    if tip_num==6:
        vLbl_Home_Msg.set("In this tab you can Run the Attack, dictionary-based using the wordlist selected or brute-force based taking advantage of all your hardware computation power.")
    if tip_num==7:
        vLbl_Home_Msg.set("In this tab you can Configure tools paths.")
    if tip_num==8:
        vLbl_Home_Msg.set("In this tab you can Generate a new strong password.")
          
def Tips_Gen_Web(tip_num):
    if tip_num==0:
        vLbl_Gen_Web_Tip.set("More info when going over a tip icon...")
    if tip_num==1:
        vLbl_Gen_Web_Tip.set("Fill this area only if the web page requires HTTP authentication.")
    if tip_num==2:
        vLbl_Gen_Web_Tip.set("The spider depth defines how many levels of links are crawled from the first page specified.")
    if tip_num==3:
        vLbl_Gen_Web_Tip.set("Including the meta data set in the web page headers can provide interesting keywords.")
    if tip_num==4:
        vLbl_Gen_Web_Tip.set("Manipulating the User-Agent can be useful to hide UPAT signature or browse version-specific pages.")
    if tip_num==5:
        vLbl_Gen_Web_Tip.set("Showing the count of each word list to help in finding top occurrences.")

def Tips_Gen_Saved(tip_num):
    if tip_num==0:
        vLbl_Gen_Web_Tip.set("More info when going over a tip icon...")
    if tip_num==1:
        vLbl_Gen_Web_Tip.set("Minimum length should be set so that it excludes common liaison words.")
    if tip_num==2:
        vLbl_Gen_Web_Tip.set("Removing any special characters or numbers before and after words will ensure having clean wordlist entries.")
    if tip_num==3:
        vLbl_Gen_Web_Tip.set("Including the file name can provide interesting keywords.")

def Tips_Gen_Brute(tip_num):
    if tip_num==0:
        vLbl_Gen_Web_Tip.set("More info when going over a tip icon...")
    if tip_num==1:
        vLbl_Gen_Web_Tip.set("The charset defines the keyspace of your brute-force list.")
    if tip_num==2:
        vLbl_Gen_Web_Tip.set("You may exclude adjacents duplicates as not common and they may be forbidden by policy.")
    if tip_num==3:
        vLbl_Gen_Web_Tip.set("A starting string can be set to restart from a previous session or list.")

def Tips_Merge(tip_num):
    if tip_num==0:
        vLbl_Merge_Tip.set("More info when going over a tip icon...")
    if tip_num==1:
        vLbl_Merge_Tip.set("You can merge 2 to 4 wordlists in one to run extensive dictionary attacks.")
    if tip_num==2:
        vLbl_Merge_Tip.set("Removing duplicates will optimize your wordlist.")
    if tip_num==3:
        vLbl_Merge_Tip.set("Reversing the order may be useful if the correct passwords are in the end of the alphabet.")

def Tips_Tools_Len(tip_num):
    if tip_num==0:
        vLbl_Tools_Len_Tip.set("More info when going over a tip icon...")
    if tip_num==1:
        vLbl_Tools_Len_Tip.set("Limit your dictionary attack to a given min/max lengths when knowing the policies in place.")
    
def Tips_Tools_Gate(tip_num):
    if tip_num==0:
        vLbl_Tools_Gate_Tip.set("More info when going over a tip icon...")
    if tip_num==1:
        vLbl_Tools_Gate_Tip.set("You must define which section will be extracted out of all.")
        
def Tips_Ana_Wd(tip_num):
    if tip_num==0:
        vLbl_Ana_Wd_Tip.set("More info when going over a tip icon...")
    if tip_num==1:
        vLbl_Ana_Wd_Tip.set("Excluding masks with less than 1% relevance will optimize your brute-force attack.")
            
def Tips_Attack_Dic(tip_num):
    if tip_num==0:
        vLbl_Attack_Dic_Tip.set("More info when going over a tip icon...")
    if tip_num==1:
        vLbl_Attack_Dic_Tip.set("Word mangling rules will create words alike each of the passwords of the dictionary with small variations. It is a very powerful option.")
    if tip_num==2:
        vLbl_Attack_Dic_Tip.set("The hash type is not always detected automatically due to similarities between types. You can force it to a certain type if you know this already.")
    if tip_num==3:
        vLbl_Attack_Dic_Tip.set("The POT file saves previously cracked passwords hashes, delete file to rerun the computation.")
    if tip_num==4:
        vLbl_Attack_Dic_Tip.set("This option will show previously cracked passwords for a given set of options in place of running the attack.")
        
def Tips_Attack_BF(tip_num):
    if tip_num==0:
        vLbl_Attack_BF_Tip.set("More info when going over a tip icon...")
    if tip_num==1:
        vLbl_Attack_BF_Tip.set("Cracking sessions can be named to restart them at a later stage or ask for their status.")
    if tip_num==2:
        vLbl_Attack_BF_Tip.set("Defining a maximum runtime will ensure a cracking session does not last more than the time specified.")
    if tip_num==3:
        vLbl_Attack_BF_Tip.set("The devices selected will be used by order of priority.")
    if tip_num==4:
        vLbl_Attack_BF_Tip.set("In order to avoid hardware damage of the GPU, a temperature to retain and a maximum allowed must be defined.")
    if tip_num==5:
        vLbl_Attack_BF_Tip.set("The workload profile defines the amount of resources taken by Hashcat on the machine. More resources means a faster cracking process but latency must be expected on the others processes.")
    if tip_num==6:
        vLbl_Attack_BF_Tip.set("Power tuning for AMD GPU will ensure the best performances.")
    if tip_num==7:
        vLbl_Attack_BF_Tip.set("The POT file saves previously cracked passwords hashes, delete file to rerun the computation.")
    
def init(top, gui, *args, **kwargs):
    global w, top_level, root,d
    w = gui
    top_level = top
    root = top
    
    root.protocol("WM_DELETE_WINDOW", destroy_window)
    
    #create conf file with default settings
    if not os.path.isfile('conf.ini'):
        d = shelve.open('conf.ini')
        #paths
        d['path_cewl'] = '/home/pj/Downloads/CeWL-5.2'
        d['path_crunch'] = '/usr/share/crunch'
        d['path_cupp']='~/Downloads/cupp'
        d['path_dymerge']='/home/pj/Downloads/dymerge'
        d['path_hashcat'] = '/home/pj/Downloads/hashcat-3.5.0'
        d['path_john'] = '/home/pj/Downloads/JohnTheRipper-bleeding-jumbo/run'
        d['path_len'] = '/home/pj/Downloads/hashcat-utils-1.7/bin'
        d['path_pack']='/home/pj/Downloads/PACK-0.0.4'
        d['path_passtrust']='/home/pj/Downloads/passtrust-master'
        d['path_pipal']='/home/pj/Downloads/pipal-master'
        d['path_wyd']='~/Downloads/wyd-0.2'
        d['path_abrase'] = '?'
        d['path_pwdlyser']='?'
        
        d['path_dict']='/home/pj/Documents/Dictionaries'
        
        d.sync()
        
        #settings generate wordlist from web
        d['vChk_Gen_Web_IncMeta']=0
        d['vChk_Gen_Web_Keep']=1
        d['vChk_Gen_Web_ShowCount']=0
        d['vChk_Gen_Web_Verbose']=1
        d['vChk_Gen_Web_Write']=1
        d['Sel_Gen_Web_Auth_Type']='none'
        d['Txt_Gen_Web_URL']='http://www.uclancyprus.ac.cy/en/uclan-cyprus/administrative-staff/'
        d['Txt_Gen_Web_Depth']='0'
        d['Txt_Gen_Web_OutputFN']='uclan'
        d['Txt_Gen_Web_Minlen']='4'
        d['Txt_Gen_Web_UA']='Googlebot'
        d['Txt_Gen_Web_Auth_User']=''
        d['Txt_Gen_Web_Auth_Pass']=''
        
        #settings generate wordlist from saved doc
        d['vChk_Gen_Saved_Separate']=0
        d['vChk_Gen_Saved_Removebegin']=1
        d['vChk_Gen_Saved_Removeend']=1
        d['vChk_Gen_Saved_Incnames']=1
        d['vChk_Gen_Saved_Verbose']=1
        d['Txt_Gen_Saved_Minlen']='3'
        d['Txt_Gen_Saved_Path']=''
        d['Txt_Gen_Saved_FN']='wyd.txt'
        
        #settings generate brute force wordlist
        d['Txt_Gen_Brute_FN']='test'
        d['Txt_Gen_Brute_CharsetFN']=d['path_crunch']+'/charset.lst'
        d['Txt_Gen_Brute_Charset']='lalpha-numeric'
        d['Txt_Gen_Brute_Min']='3'
        d['Txt_Gen_Brute_Max']='3'
        d['Txt_Gen_Brute_Fixed']=''
        d['Txt_Gen_Brute_Nogen']=''
        d['Txt_Gen_Brute_Start']=''
        d['vChk_Gen_Brute_Fixed']=0
        d['vChk_Gen_Brute_Invert']=0
        d['vChk_Gen_Brute_Nogen']=0
        d['vChk_Gen_Brute_Start']=0
        
        #settings merge wordlists
        d['vChk_Merge_Sort']=1
        d['vChk_Merge_Duplicates']=1
        d['vChk_Merge_Reverse']=0
        d['Txt_Merge_OutputFN']='merge.txt'
        d['Txt_Merge_Path1']=''
        d['Txt_Merge_Path2']=''
        d['Txt_Merge_Path3']=''
        d['Txt_Merge_Path4']=''
        
        #settings len        
        d['Txt_Tools_Len_Path']=''
        d['Txt_Tools_Len_OutputFN']=''
        d['Txt_Tools_Len_MinLen']=''
        d['Txt_Tools_Len_MaxLen']=''
        
        #settings gate        
        d['Txt_Tools_Gate_Path']=''
        d['Txt_Tools_Gate_OutputFN']=''
        d['Txt_Tools_Gate_Sections']=''
        d['Txt_Tools_Gate_Offset']=''
        
        #settings analyze wd
        d['vChk_Ana_Wd_Masks']=0
        d['vChk_Ana_Wd_Rare']=1
        d['Txt_Ana_Wd_Path']=''
        d['Txt_Ana_Wd_Masks']=''
        
        #settings analyze wd 2
        d['vChk_Ana2_Wd_Out']=0
        d['Txt_Ana2_Wd_Out']='analyze.txt'
        
        #settings generate masks
        d['vChk_Ana_Masks_Sort']=1
        d['vChk_Ana_Masks_OutputFN']=1
        d['vChk_Ana_Masks_Target']=0
        d['vChk_Ana_Masks_Speed']=0
        d['vChk_Ana_Masks_MinLen']=0
        d['vChk_Ana_Masks_MaxLen']=0
        d['vChk_Ana_Masks_MinRun']=0
        d['vChk_Ana_Masks_MaxRun']=0
        d['vChk_Ana_Masks_MinOcc']=0
        d['vChk_Ana_Masks_MaxOcc']=0
        d['Txt_Ana_Masks_Path']=''
        d['Txt_Ana_Masks_OutputFN']=''
        d['Txt_Ana_Masks_Target']=''
        d['Txt_Ana_Masks_Speed']=''
        d['Txt_Ana_Masks_MinLen']=''
        d['Txt_Ana_Masks_MaxLen']=''
        d['Txt_Ana_Masks_MinRun']=''
        d['Txt_Ana_Masks_MaxRun']=''
        d['Txt_Ana_Masks_MinOcc']=''
        d['Txt_Ana_Masks_MaxOcc']=''
    
        #settings test masks
        d['vChk_Ana_Test_Manual']=0
        d['Txt_Ana_Test_Manual']=''
        d['Txt_Ana_Test_Path1']=''
        d['Txt_Ana_Test_Path2']=''
        
        #settings masks by policy
        d['vChk_Ana_Pol_MinSym']=0
        d['Txt_Ana_Pol_MinSym']='1'
        d['vChk_Ana_Pol_MaxSym']=0
        d['vChk_Ana_Pol_MinUp']=1
        d['Txt_Ana_Pol_MinUp']='1'
        d['vChk_Ana_Pol_MaxUp']=0
        d['vChk_Ana_Pol_MinDigit']=1
        d['Txt_Ana_Pol_MinDigit']='1'
        d['vChk_Ana_Pol_MaxDigit']=0
        d['vChk_Ana_Pol_MinLow']=1
        d['Txt_Ana_Pol_MinLow']='1'
        d['vChk_Ana_Pol_MaxLow']=0
        d['vChk_Ana_Pol_MinLen']=1
        d['Txt_Ana_Pol_MinLen']='3'
        d['vChk_Ana_Pol_MaxLen']=1
        d['vChk_Ana_Pol_Speed']=0
        d['Txt_Ana_Pol_OutputFN']=''
        d['Txt_Ana_Pol_MaxLen']='8'
        d['Txt_Ana_Pol_MaxSym']=''
        d['Txt_Ana_Pol_MaxUp']=''
        d['Txt_Ana_Pol_MaxDigit']=''
        d['Txt_Ana_Pol_MaxLow']=''
        d['Txt_Ana_Pol_Speed']=''
        
        #settings speedtest
        d['List_Speed_Default']=['MD4: 0','MD5: 0','Half,MD5: 0','SHA1: 0','SHA256: 0','SHA384: 0','SHA512: 0','SHA-3(Keccak): 0','SipHash: 0','Skip32: 0','RipeMD160: 0','Whirlpool: 0','GOST,R,34.11-94: 0','GOST,R,34.11-2012,(Streebog),256-bit: 0','GOST,R,34.11-2012,(Streebog),512-bit: 0','DES,(PT,=,$salt,,key,=,$pass): 0','3DES,(PT,=,$salt,,key,=,$pass): 0','phpass,,MD5(Wordpress),,MD5(phpBB3),,MD5(Joomla): 0','scrypt: 0','PBKDF2-HMAC-MD5: 0','PBKDF2-HMAC-SHA1: 0','PBKDF2-HMAC-SHA256: 0','PBKDF2-HMAC-SHA512: 0','Skype: 0','WPA/WPA2: 0','IKE-PSK,MD5: 0','IKE-PSK,SHA1: 0','NetNTLMv1-VANILLA,/,NetNTLMv1+ESS: 0','NetNTLMv2: 0','IPMI2,RAKP,HMAC-SHA1: 0','Kerberos,5,AS-REQ,Pre-Auth,etype,23: 0','Kerberos,5,TGS-REP,etype,23: 0','DNSSEC,(NSEC3): 0','PostgreSQL,Challenge-Response,Authentication,(MD5): 0','MySQL,Challenge-Response,Authentication,(SHA1): 0','SIP,digest,authentication,(MD5): 0','SMF,>,v1.1: 0','vBulletin,<,v3.8.5: 0','vBulletin,>,v3.8.5: 0','IPB2+,,MyBB1.2+: 0','WBB3,,Woltlab,Burning,Board,3: 0','OpenCart: 0','Joomla,<,2.5.18: 0','PHPS: 0','Drupal7: 0','osCommerce,,xt:Commerce: 0','PrestaShop: 0','Django,(SHA-1): 0','Django,(PBKDF2-SHA256): 0','Mediawiki,B,type: 0','Redmine,Project,Management,Web,App: 0','PunBB: 0','PostgreSQL: 0','MSSQL(2000): 0','MSSQL(2005): 0','MSSQL(2012): 0','MySQL323: 0','MySQL4.1/MySQL5: 0','Oracle,H:,Type,(Oracle,7+): 0','Oracle,S:,Type,(Oracle,11+): 0','Oracle,T:,Type,(Oracle,12+): 0','Sybase,ASE: 0','EPiServer,6.x,<,v4: 0','EPiServer,6.x,>,v4: 0','md5apr1,,MD5(APR),,Apache,MD5: 0','ColdFusion,10+: 0','hMailServer: 0','SHA-1(Base64),,nsldap,,Netscape,LDAP,SHA: 0','SSHA-1(Base64),,nsldaps,,Netscape,LDAP,SSHA: 0','SSHA-256(Base64),,LDAP,(SSHA256): 0','SSHA-512(Base64),,LDAP,(SSHA512): 0','LM: 0','NTLM: 0','Domain,Cached,Credentials,(DCC),,MS,Cache: 0','Domain,Cached,Credentials,2,(DCC2),,MS,Cache,2: 0','MS-AzureSync,PBKDF2-HMAC-SHA256: 0','descrypt,,DES(Unix),,Traditional,DES: 0','BSDiCrypt,,Extended,DES: 0','md5crypt,,MD5(Unix),,FreeBSD,MD5,,Cisco-IOS,MD5: 0','bcrypt,,Blowfish(OpenBSD): 0','sha256crypt,,SHA256(Unix): 0','sha512crypt,,SHA512(Unix): 0','OSX,v10.4,,v10.5,,v10.6: 0','OSX,v10.7: 0','OSX,v10.8+: 0','AIX,(smd5): 0','AIX,(ssha1): 0','AIX,(ssha256): 0','AIX,(ssha512): 0','Cisco-PIX,MD5: 0','Cisco-ASA,MD5: 0','Cisco-IOS,SHA256: 0','Cisco,$8$: 0','Cisco,$9$: 0','Juniper,Netscreen/SSG,(ScreenOS): 0','Juniper,IVE: 0','Android,PIN: 0','Citrix,NetScaler: 0','RACF: 0',]
        d['Sel_Speed_Default']='MD5: 0'
        d['List_Speed_Devices']=['Run speedtest to detect devices']
        d['List_Speed_PPS']=['Run speedtest once']
    
        st = datetime.datetime.fromtimestamp(time.time()).strftime('%Y_%m_%d_%H_%M_%S')
        
        #settings attack Dic
        d['Txt_Attack_Dic_Wd_Path']=''
        d['Txt_Attack_Dic_Pwd_Path']=''
        d['vChk_Attack_Dic_Mangling']=1
        d['vChk_Attack_Dic_Restore']=0
        d['Txt_Attack_Dic_Restore']=''
        d['vChk_Attack_Dic_Name']=1
        d['Txt_Attack_Dic_Name']=st
        d['vChk_Attack_Dic_Status']=0
        d['Txt_Attack_Dic_Status']=''
        d['vChk_Attack_Dic_Show']=0
        d['vChk_Attack_Dic_Force']=1
        d['Sel_Attack_Dic_Force']='Raw-MD5'
        d['List_Attack_Dic_Force']=['descrypt', 'bsdicrypt', 'md5crypt', 'bcrypt', 'scrypt', 'LM', 'AFS', 'tripcode', 'dynamic_n', 'agilekeychain', 'aix-ssha1', 'aix-ssha256', 'aix-ssha512', 'argon2', 'as400-des', 'as400-ssha1', 'asa-md5', 'axcrypt', 'AzureAD', 'BestCrypt', 'bfegg', 'Bitcoin', 'BitLocker', 'BKS', 'Blackberry-ES10', 'WoWSRP', 'Blockchain', 'chap', 'Clipperz', 'cloudkeychain', 'cq', 'CRC32', 'sha1crypt', 'sha256crypt', 'sha512crypt', 'Citrix_NS10', 'dahua', 'Django', 'django-scrypt', 'dmd5', 'dmg', 'dominosec', 'dominosec8', 'DPAPImk', 'dragonfly3-32', 'dragonfly3-64', 'dragonfly4-32', 'dragonfly4-64', 'Drupal7', 'eCryptfs', 'eigrp', 'electrum', 'EncFS', 'enpass', 'EPI', 'EPiServer', 'ethereum', 'fde', 'Fortigate', 'FormSpring', 'FVDE', 'geli', 'gost', 'gpg', 'HAVAL-128-4', 'HAVAL-256-3', 'hdaa', 'HMAC-MD5', 'HMAC-SHA1', 'HMAC-SHA224', 'HMAC-SHA256', 'HMAC-SHA384', 'HMAC-SHA512', 'hMailServer', 'hsrp', 'IKE', 'ipb2', 'itunes-backup', 'iwork', 'KeePass', 'keychain', 'keyring', 'keystore', 'known_hosts', 'krb4', 'krb5', 'krb5pa-sha1', 'krb5tgs', 'krb5-18', 'kwallet', 'lp', 'leet', 'lotus5', 'lotus85', 'LUKS', 'MD2', 'mdc2', 'MediaWiki', 'MongoDB', 'scram', 'Mozilla', 'mscash', 'mscash2', 'MSCHAPv2', 'mschapv2-naive', 'krb5pa-md5', 'mssql', 'mssql05', 'mssql12', 'multibit', 'mysqlna', 'mysql-sha1', 'mysql', 'net-ah', 'nethalflm', 'netlm', 'netlmv2', 'net-md5', 'netntlmv2', 'netntlm', 'netntlm-naive', 'net-sha1', 'nk', 'md5ns', 'nsec3', 'NT', 'o10glogon', 'o3logon', 'o5logon', 'ODF', 'Office', 'oldoffice', 'OpenBSD-SoftRAID', 'openssl-enc', 'oracle', 'oracle11', 'Oracle12C', 'osc', 'ospf', 'Padlock', 'Palshop', 'Panama', 'PBKDF2-HMAC-MD4', 'PBKDF2-HMAC-MD5', 'PBKDF2-HMAC-SHA1', 'PBKDF2-HMAC-SHA256', 'PBKDF2-HMAC-SHA512', 'PDF', 'PEM', 'pfx', 'phpass', 'PHPS', 'PHPS2', 'pix-md5', 'PKZIP', 'po', 'pomelo', 'postgres', 'PST', 'PuTTY', 'pwsafe', 'qnx', 'RACF', 'RAdmin', 'RAKP', 'rar', 'RAR5', 'Raw-SHA512', 'Raw-Blake2', 'Raw-Keccak', 'Raw-Keccak-256', 'Raw-MD4', 'Raw-MD5', 'Raw-MD5u', 'Raw-SHA1', 'Raw-SHA1-AxCrypt', 'Raw-SHA1-Linkedin', 'Raw-SHA224', 'Raw-SHA256', 'Raw-SHA256-ng', 'Raw-SHA3', 'Raw-SHA384', 'Raw-SHA512-ng', 'ripemd-128', 'ripemd-160', 'rsvp', 'Siemens-S7', 'Salted-SHA1', 'SSHA512', 'sapb', 'sapg', 'saph', '7z', 'Raw-SHA1-ng', 'SIP', 'skein-256', 'skein-512', 'skey', 'aix-smd5', 'Snefru-128', 'Snefru-256', 'LastPass', 'SNMP', 'SSH-ng', 'Stribog-256', 'Stribog-512', 'STRIP', 'SunMD5', 'sxc', 'SybaseASE', 'Sybase-PROP', 'tcp-md5', 'Tiger', 'tc_aes_xts', 'tc_ripemd160', 'tc_sha512', 'tc_whirlpool', 'vdi', 'OpenVMS', 'VNC', 'vtp', 'wbb3', 'whirlpool', 'whirlpool0', 'whirlpool1', 'wpapsk', 'xmpp-scram', 'xsha', 'xsha512', 'ZIP', 'ZipMonster', 'plaintext', 'has-160', 'NT-old', 'dummy', 'crypt']
        
        
   
        #settings attack BF
        d['Txt_Attack_BF_Pwd_Path']=''
        d['Sel_Attack_BF_Hash']='      0 | MD5                                              | Raw Hash'
        d['Txt_Attack_BF_Masks_Path']=''
        d['vChk_Attack_BF_Masks']=0
        d['vChk_Attack_BF_Out']=1
        d['Txt_Attack_BF_Out_Path']=d['path_hashcat']+'/hashcat_out.txt'
        d['vChk_Attack_BF_Name']=1
        d['Txt_Attack_BF_Name']=st
        d['vChk_Attack_BF_Restore']=0
        d['Txt_Attack_BF_Restore']=''
        d['vChk_Attack_BF_Status_Timer']=1
        d['Txt_Attack_BF_Status_Timer']='30'
        d['vChk_Attack_BF_Runtime']=1
        d['Txt_Attack_BF_Runtime']='86400'
        d['vChk_Attack_BF_Speed']=0
        d['Sel_Attack_BF_Device']='GPU, CPU'
        d['Txt_Attack_BF_Temp']=80
        d['Txt_Attack_BF_TempRetain']=60
        d['Sel_Attack_BF_Workload']='Default'
        d['vChk_Attack_BF_PowerTuning']=1
        
        d['List_Attack_BF_Hash']=['    900 | MD4                                              | Raw Hash','      0 | MD5                                              | Raw Hash','   5100 | Half MD5                                         | Raw Hash','    100 | SHA1                                             | Raw Hash','   1300 | SHA-224                                          | Raw Hash','   1400 | SHA-256                                          | Raw Hash','  10800 | SHA-384                                          | Raw Hash','   1700 | SHA-512                                          | Raw Hash','   5000 | SHA-3 (Keccak)                                   | Raw Hash','  10100 | SipHash                                          | Raw Hash','   6000 | RIPEMD-160                                       | Raw Hash','   6100 | Whirlpool                                        | Raw Hash','   6900 | GOST R 34.11-94                                  | Raw Hash','  11700 | GOST R 34.11-2012 (Streebog) 256-bit             | Raw Hash','  11800 | GOST R 34.11-2012 (Streebog) 512-bit             | Raw Hash','     10 | md5($pass.$salt)                                 | Raw Hash, Salted and/or Iterated','     20 | md5($salt.$pass)                                 | Raw Hash, Salted and/or Iterated','     30 | md5(unicode($pass).$salt)                        | Raw Hash, Salted and/or Iterated','     40 | md5($salt.unicode($pass))                        | Raw Hash, Salted and/or Iterated','   3800 | md5($salt.$pass.$salt)                           | Raw Hash, Salted and/or Iterated','   3710 | md5($salt.md5($pass))                            | Raw Hash, Salted and/or Iterated','   4010 | md5($salt.md5($salt.$pass))                      | Raw Hash, Salted and/or Iterated','   4110 | md5($salt.md5($pass.$salt))                      | Raw Hash, Salted and/or Iterated','   2600 | md5(md5($pass))                                  | Raw Hash, Salted and/or Iterated','   3910 | md5(md5($pass).md5($salt))                       | Raw Hash, Salted and/or Iterated','   4300 | md5(strtoupper(md5($pass)))                      | Raw Hash, Salted and/or Iterated','   4400 | md5(sha1($pass))                                 | Raw Hash, Salted and/or Iterated','    110 | sha1($pass.$salt)                                | Raw Hash, Salted and/or Iterated','    120 | sha1($salt.$pass)                                | Raw Hash, Salted and/or Iterated','    130 | sha1(unicode($pass).$salt)                       | Raw Hash, Salted and/or Iterated','    140 | sha1($salt.unicode($pass))                       | Raw Hash, Salted and/or Iterated','   4500 | sha1(sha1($pass))                                | Raw Hash, Salted and/or Iterated','   4520 | sha1($salt.sha1($pass))                          | Raw Hash, Salted and/or Iterated','   4700 | sha1(md5($pass))                                 | Raw Hash, Salted and/or Iterated','   4900 | sha1($salt.$pass.$salt)                          | Raw Hash, Salted and/or Iterated','  14400 | sha1(CX)                                         | Raw Hash, Salted and/or Iterated','   1410 | sha256($pass.$salt)                              | Raw Hash, Salted and/or Iterated','   1420 | sha256($salt.$pass)                              | Raw Hash, Salted and/or Iterated','   1430 | sha256(unicode($pass).$salt)                     | Raw Hash, Salted and/or Iterated','   1440 | sha256($salt.unicode($pass))                     | Raw Hash, Salted and/or Iterated','   1710 | sha512($pass.$salt)                              | Raw Hash, Salted and/or Iterated','   1720 | sha512($salt.$pass)                              | Raw Hash, Salted and/or Iterated','   1730 | sha512(unicode($pass).$salt)                     | Raw Hash, Salted and/or Iterated','   1740 | sha512($salt.unicode($pass))                     | Raw Hash, Salted and/or Iterated','     50 | HMAC-MD5 (key = $pass)                           | Raw Hash, Authenticated','     60 | HMAC-MD5 (key = $salt)                           | Raw Hash, Authenticated','    150 | HMAC-SHA1 (key = $pass)                          | Raw Hash, Authenticated','    160 | HMAC-SHA1 (key = $salt)                          | Raw Hash, Authenticated','   1450 | HMAC-SHA256 (key = $pass)                        | Raw Hash, Authenticated','   1460 | HMAC-SHA256 (key = $salt)                        | Raw Hash, Authenticated','   1750 | HMAC-SHA512 (key = $pass)                        | Raw Hash, Authenticated','   1760 | HMAC-SHA512 (key = $salt)                        | Raw Hash, Authenticated','  14000 | DES (PT = $salt, key = $pass)                    | Raw Cipher, Known-Plaintext attack','  14100 | 3DES (PT = $salt, key = $pass)                   | Raw Cipher, Known-Plaintext attack','  14900 | Skip32 (PT = $salt, key = $pass)                 | Raw Cipher, Known-Plaintext attack','    400 | phpass                                           | Generic KDF','   8900 | scrypt                                           | Generic KDF','  11900 | PBKDF2-HMAC-MD5                                  | Generic KDF','  12000 | PBKDF2-HMAC-SHA1                                 | Generic KDF','  10900 | PBKDF2-HMAC-SHA256                               | Generic KDF','  12100 | PBKDF2-HMAC-SHA512                               | Generic KDF','     23 | Skype                                            | Network Protocols','   2500 | WPA/WPA2                                         | Network Protocols','   4800 | iSCSI CHAP authentication, MD5(CHAP)             | Network Protocols','   5300 | IKE-PSK MD5                                      | Network Protocols','   5400 | IKE-PSK SHA1                                     | Network Protocols','   5500 | NetNTLMv1                                        | Network Protocols','   5500 | NetNTLMv1+ESS                                    | Network Protocols','   5600 | NetNTLMv2                                        | Network Protocols','   7300 | IPMI2 RAKP HMAC-SHA1                             | Network Protocols','   7500 | Kerberos 5 AS-REQ Pre-Auth etype 23              | Network Protocols','   8300 | DNSSEC (NSEC3)                                   | Network Protocols','  10200 | CRAM-MD5                                         | Network Protocols','  11100 | PostgreSQL CRAM (MD5)                            | Network Protocols','  11200 | MySQL CRAM (SHA1)                                | Network Protocols','  11400 | SIP digest authentication (MD5)                  | Network Protocols','  13100 | Kerberos 5 TGS-REP etype 23                      | Network Protocols','    121 | SMF (Simple Machines Forum) > v1.1               | Forums, CMS, E-Commerce, Frameworks','    400 | phpBB3 (MD5)                                     | Forums, CMS, E-Commerce, Frameworks','   2611 | vBulletin < v3.8.5                               | Forums, CMS, E-Commerce, Frameworks','   2711 | vBulletin >= v3.8.5                              | Forums, CMS, E-Commerce, Frameworks','   2811 | MyBB 1.2+                                        | Forums, CMS, E-Commerce, Frameworks','   2811 | IPB2+ (Invision Power Board)                     | Forums, CMS, E-Commerce, Frameworks','   8400 | WBB3 (Woltlab Burning Board)                     | Forums, CMS, E-Commerce, Frameworks','     11 | Joomla < 2.5.18                                  | Forums, CMS, E-Commerce, Frameworks','    400 | Joomla >= 2.5.18 (MD5)                           | Forums, CMS, E-Commerce, Frameworks','    400 | WordPress (MD5)                                  | Forums, CMS, E-Commerce, Frameworks','   2612 | PHPS                                             | Forums, CMS, E-Commerce, Frameworks','   7900 | Drupal7                                          | Forums, CMS, E-Commerce, Frameworks','     21 | osCommerce                                       | Forums, CMS, E-Commerce, Frameworks','     21 | xt:Commerce                                      | Forums, CMS, E-Commerce, Frameworks','  11000 | PrestaShop                                       | Forums, CMS, E-Commerce, Frameworks','    124 | Django (SHA-1)                                   | Forums, CMS, E-Commerce, Frameworks','  10000 | Django (PBKDF2-SHA256)                           | Forums, CMS, E-Commerce, Frameworks','   3711 | MediaWiki B type                                 | Forums, CMS, E-Commerce, Frameworks','  13900 | OpenCart                                         | Forums, CMS, E-Commerce, Frameworks','   4521 | Redmine                                          | Forums, CMS, E-Commerce, Frameworks','   4522 | PunBB                                            | Forums, CMS, E-Commerce, Frameworks','  12001 | Atlassian (PBKDF2-HMAC-SHA1)                     | Forums, CMS, E-Commerce, Frameworks','     12 | PostgreSQL                                       | Database Server','    131 | MSSQL (2000)                                     | Database Server','    132 | MSSQL (2005)                                     | Database Server','   1731 | MSSQL (2012, 2014)                               | Database Server','    200 | MySQL323                                         | Database Server','    300 | MySQL4.1/MySQL5                                  | Database Server','   3100 | Oracle H: Type (Oracle 7+)                       | Database Server','    112 | Oracle S: Type (Oracle 11+)                      | Database Server','  12300 | Oracle T: Type (Oracle 12+)                      | Database Server','   8000 | Sybase ASE                                       | Database Server','    141 | Episerver 6.x < .NET 4                           | HTTP, SMTP, LDAP Server','   1441 | Episerver 6.x >= .NET 4                          | HTTP, SMTP, LDAP Server','   1600 | Apache $apr1$ MD5, md5apr1, MD5 (APR)            | HTTP, SMTP, LDAP Server','  12600 | ColdFusion 10+                                   | HTTP, SMTP, LDAP Server','   1421 | hMailServer                                      | HTTP, SMTP, LDAP Server','    101 | nsldap, SHA-1(Base64), Netscape LDAP SHA         | HTTP, SMTP, LDAP Server','    111 | nsldaps, SSHA-1(Base64), Netscape LDAP SSHA      | HTTP, SMTP, LDAP Server','   1411 | SSHA-256(Base64), LDAP {SSHA256}                 | HTTP, SMTP, LDAP Server','   1711 | SSHA-512(Base64), LDAP {SSHA512}                 | HTTP, SMTP, LDAP Server','  15000 | FileZilla Server >= 0.9.55                       | FTP Server','  11500 | CRC32                                            | Checksums','   3000 | LM                                               | Operating Systems','   1000 | NTLM                                             | Operating Systems','   1100 | Domain Cached Credentials (DCC), MS Cache        | Operating Systems','   2100 | Domain Cached Credentials 2 (DCC2), MS Cache 2   | Operating Systems','  12800 | MS-AzureSync  PBKDF2-HMAC-SHA256                 | Operating Systems','   1500 | descrypt, DES (Unix), Traditional DES            | Operating Systems','  12400 | BSDiCrypt, Extended DES                          | Operating Systems','    500 | md5crypt, MD5 (Unix), Cisco-IOS $1$ (MD5)        | Operating Systems','   3200 | bcrypt $2*$, Blowfish (Unix)                     | Operating Systems','   7400 | sha256crypt $5$, SHA256 (Unix)                   | Operating Systems','   1800 | sha512crypt $6$, SHA512 (Unix)                   | Operating Systems','    122 | OSX v10.4, OSX v10.5, OSX v10.6                  | Operating Systems','   1722 | OSX v10.7                                        | Operating Systems','   7100 | OSX v10.8+ (PBKDF2-SHA512)                       | Operating Systems','   6300 | AIX {smd5}                                       | Operating Systems','   6700 | AIX {ssha1}                                      | Operating Systems','   6400 | AIX {ssha256}                                    | Operating Systems','   6500 | AIX {ssha512}                                    | Operating Systems','   2400 | Cisco-PIX MD5                                    | Operating Systems','   2410 | Cisco-ASA MD5                                    | Operating Systems','    500 | Cisco-IOS $1$ (MD5)                              | Operating Systems','   5700 | Cisco-IOS type 4 (SHA256)                        | Operating Systems','   9200 | Cisco-IOS $8$ (PBKDF2-SHA256)                    | Operating Systems','   9300 | Cisco-IOS $9$ (scrypt)                           | Operating Systems','     22 | Juniper NetScreen/SSG (ScreenOS)                 | Operating Systems','    501 | Juniper IVE                                      | Operating Systems','  15100 | Juniper/NetBSD sha1crypt                         | Operating Systems','   7000 | FortiGate (FortiOS)                              | Operating Systems','   5800 | Samsung Android Password/PIN                     | Operating Systems','  13800 | Windows Phone 8+ PIN/password                    | Operating Systems','   8100 | Citrix NetScaler                                 | Operating Systems','   8500 | RACF                                             | Operating Systems','   7200 | GRUB 2                                           | Operating Systems','   9900 | Radmin2                                          | Operating Systems','    125 | ArubaOS                                          | Operating Systems','   7700 | SAP CODVN B (BCODE)                              | Enterprise Application Software (EAS)','   7800 | SAP CODVN F/G (PASSCODE)                         | Enterprise Application Software (EAS)','  10300 | SAP CODVN H (PWDSALTEDHASH) iSSHA-1              | Enterprise Application Software (EAS)','   8600 | Lotus Notes/Domino 5                             | Enterprise Application Software (EAS)','   8700 | Lotus Notes/Domino 6                             | Enterprise Application Software (EAS)','   9100 | Lotus Notes/Domino 8                             | Enterprise Application Software (EAS)','    133 | PeopleSoft                                       | Enterprise Application Software (EAS)','  13500 | PeopleSoft PS_TOKEN                              | Enterprise Application Software (EAS)','  11600 | 7-Zip                                            | Archives','  12500 | RAR3-hp                                          | Archives','  13000 | RAR5                                             | Archives','  13200 | AxCrypt                                          | Archives','  13300 | AxCrypt in-memory SHA1                           | Archives','  13600 | WinZip                                           | Archives','  14700 | iTunes backup < 10.0                             | Backup','  14800 | iTunes backup >= 10.0                            | Backup','   62XY | TrueCrypt                                        | Full-Disk Encryption (FDE)','     X  | 1 = PBKDF2-HMAC-RIPEMD160                        | Full-Disk Encryption (FDE)','     X  | 2 = PBKDF2-HMAC-SHA512                           | Full-Disk Encryption (FDE)','     X  | 3 = PBKDF2-HMAC-Whirlpool                        | Full-Disk Encryption (FDE)','     X  | 4 = PBKDF2-HMAC-RIPEMD160 + boot-mode            | Full-Disk Encryption (FDE)','      Y | 1 = XTS  512 bit pure AES                        | Full-Disk Encryption (FDE)','      Y | 1 = XTS  512 bit pure Serpent                    | Full-Disk Encryption (FDE)','      Y | 1 = XTS  512 bit pure Twofish                    | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit pure AES                        | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit pure Serpent                    | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit pure Twofish                    | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit cascaded AES-Twofish            | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit cascaded Serpent-AES            | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit cascaded Twofish-Serpent        | Full-Disk Encryption (FDE)','      Y | 3 = XTS 1536 bit all                             | Full-Disk Encryption (FDE)','   8800 | Android FDE <= 4.3                               | Full-Disk Encryption (FDE)','  12900 | Android FDE (Samsung DEK)                        | Full-Disk Encryption (FDE)','  12200 | eCryptfs                                         | Full-Disk Encryption (FDE)','  137XY | VeraCrypt                                        | Full-Disk Encryption (FDE)','     X  | 1 = PBKDF2-HMAC-RIPEMD160                        | Full-Disk Encryption (FDE)','     X  | 2 = PBKDF2-HMAC-SHA512                           | Full-Disk Encryption (FDE)','     X  | 3 = PBKDF2-HMAC-Whirlpool                        | Full-Disk Encryption (FDE)','     X  | 4 = PBKDF2-HMAC-RIPEMD160 + boot-mode            | Full-Disk Encryption (FDE)','     X  | 5 = PBKDF2-HMAC-SHA256                           | Full-Disk Encryption (FDE)','     X  | 6 = PBKDF2-HMAC-SHA256 + boot-mode               | Full-Disk Encryption (FDE)','      Y | 1 = XTS  512 bit pure AES                        | Full-Disk Encryption (FDE)','      Y | 1 = XTS  512 bit pure Serpent                    | Full-Disk Encryption (FDE)','      Y | 1 = XTS  512 bit pure Twofish                    | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit pure AES                        | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit pure Serpent                    | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit pure Twofish                    | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit cascaded AES-Twofish            | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit cascaded Serpent-AES            | Full-Disk Encryption (FDE)','      Y | 2 = XTS 1024 bit cascaded Twofish-Serpent        | Full-Disk Encryption (FDE)','      Y | 3 = XTS 1536 bit all                             | Full-Disk Encryption (FDE)','  14600 | LUKS                                             | Full-Disk Encryption (FDE)','   9700 | MS Office <= 2003 $0/$1, MD5 + RC4               | Documents','   9710 | MS Office <= 2003 $0/$1, MD5 + RC4, collider #1  | Documents','   9720 | MS Office <= 2003 $0/$1, MD5 + RC4, collider #2  | Documents','   9800 | MS Office <= 2003 $3/$4, SHA1 + RC4              | Documents','   9810 | MS Office <= 2003 $3/$4, SHA1 + RC4, collider #1 | Documents','   9820 | MS Office <= 2003 $3/$4, SHA1 + RC4, collider #2 | Documents','   9400 | MS Office 2007                                   | Documents','   9500 | MS Office 2010                                   | Documents','   9600 | MS Office 2013                                   | Documents','  10400 | PDF 1.1 - 1.3 (Acrobat 2 - 4)                    | Documents','  10410 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #1       | Documents','  10420 | PDF 1.1 - 1.3 (Acrobat 2 - 4), collider #2       | Documents','  10500 | PDF 1.4 - 1.6 (Acrobat 5 - 8)                    | Documents','  10600 | PDF 1.7 Level 3 (Acrobat 9)                      | Documents','  10700 | PDF 1.7 Level 8 (Acrobat 10 - 11)                | Documents','   9000 | Password Safe v2                                 | Password Managers','   5200 | Password Safe v3                                 | Password Managers','   6800 | LastPass + LastPass sniffed                      | Password Managers','   6600 | 1Password, agilekeychain                         | Password Managers','   8200 | 1Password, cloudkeychain                         | Password Managers','  11300 | Bitcoin/Litecoin wallet.dat                      | Password Managers','  12700 | Blockchain, My Wallet                            | Password Managers','  13400 | KeePass 1 (AES/Twofish) and KeePass 2 (AES)      | Password Managers','  99999 | Plaintext                                        | Plaintext']
        d['List_Attack_BF_Device']=['CPU only','GPU only','FPGA only','GPU, CPU','GPU, FPGA, CPU']
        d['List_Attack_BF_Workload']=['Low','Default','High','Nightmare']
        
        
        #settings new pass
        d['Txt_NewPass_Len']=16
        d['vChk_NewPass_Specials']=1
    
        d.close()
    
    #load conf file
    d = shelve.open('conf.ini')
    d.sync()
    
    #load values
    #configure paths
    w.Txt_Cfg_Abrase.insert(0,d['path_abrase'])
    w.Txt_Cfg_Cewl.insert(0,d['path_cewl'])
    w.Txt_Cfg_Crunch.insert(0,d['path_crunch'])
    w.Txt_Cfg_Cupp.insert(0,d['path_cupp'])
    w.Txt_Cfg_Dymerge.insert(0,d['path_dymerge'])
    w.Txt_Cfg_Hashcat.insert(0,d['path_hashcat'])
    w.Txt_Cfg_John.insert(0,d['path_john'])
    w.Txt_Cfg_Len.insert(0,d['path_len'])
    w.Txt_Cfg_Pack.insert(0,d['path_pack'])
    w.Txt_Cfg_Passtrust.insert(0,d['path_passtrust'])
    w.Txt_Cfg_Pwdlyser.insert(0,d['path_pwdlyser'])
    w.Txt_Cfg_Pipal.insert(0,d['path_pipal'])
    w.Txt_Cfg_Wyd.insert(0,d['path_wyd'])
    
    
    #import wordlist
    file1=d['path_dict']
    w.Txt_Import_Path.insert(0,file1)
    for root, dirs, files in os.walk(file1, topdown=False):
        for name in files:
            path=os.path.join(root, name)
            w.List_Import_Repos.insert(0, path[len(file1):])
    
    #generate wordlist from web
    vChk_Gen_Web_IncMeta.set(d['vChk_Gen_Web_IncMeta'])
    vChk_Gen_Web_Keep.set(d['vChk_Gen_Web_Keep'])
    vChk_Gen_Web_ShowCount.set(d['vChk_Gen_Web_ShowCount'])
    vChk_Gen_Web_Verbose.set(d['vChk_Gen_Web_Verbose'])
    vChk_Gen_Web_Write.set(d['vChk_Gen_Web_Write'])
    w.Sel_Gen_Web_Auth_Type.set(d['Sel_Gen_Web_Auth_Type'])
    w.Txt_Gen_Web_URL.insert(0,d['Txt_Gen_Web_URL'])
    w.Txt_Gen_Web_Depth.insert(0,d['Txt_Gen_Web_Depth'])
    w.Txt_Gen_Web_OutputFN.insert(0,d['Txt_Gen_Web_OutputFN'])
    w.Txt_Gen_Web_Minlen.insert(0,d['Txt_Gen_Web_Minlen'])
    w.Txt_Gen_Web_UA.insert(0,d['Txt_Gen_Web_UA'])
    w.Txt_Gen_Web_Auth_User.insert(0,d['Txt_Gen_Web_Auth_User'])
    w.Txt_Gen_Web_Auth_Pass.insert(0,d['Txt_Gen_Web_Auth_Pass'])
    
    #generate wordlist from saved doc
    vChk_Gen_Saved_Separate.set(d['vChk_Gen_Saved_Separate'])
    vChk_Gen_Saved_Removebegin.set(d['vChk_Gen_Saved_Removebegin'])
    vChk_Gen_Saved_Removeend.set(d['vChk_Gen_Saved_Removeend'])
    vChk_Gen_Saved_Incnames.set(d['vChk_Gen_Saved_Incnames'])
    vChk_Gen_Saved_Verbose.set(d['vChk_Gen_Saved_Verbose'])
    w.Txt_Gen_Saved_Minlen.insert(0,d['Txt_Gen_Saved_Minlen'])
    w.Txt_Gen_Saved_Path.insert(0,d['Txt_Gen_Saved_Path'])
    w.Txt_Gen_Saved_FN.insert(0,d['Txt_Gen_Saved_FN'])
    
    #generate brute force wordlist
    w.Txt_Gen_Brute_FN.insert(0,d['Txt_Gen_Brute_FN'])
    w.Txt_Gen_Brute_CharsetFN.insert(0,d['Txt_Gen_Brute_CharsetFN'])
    w.Txt_Gen_Brute_Charset.insert(0,d['Txt_Gen_Brute_Charset'])
    w.Txt_Gen_Brute_Min.insert(0,d['Txt_Gen_Brute_Min'])
    w.Txt_Gen_Brute_Max.insert(0,d['Txt_Gen_Brute_Max'])
    w.Txt_Gen_Brute_Fixed.insert(0,d['Txt_Gen_Brute_Fixed'])
    w.Txt_Gen_Brute_Nogen.insert(0,d['Txt_Gen_Brute_Nogen'])
    w.Txt_Gen_Brute_Start.insert(0,d['Txt_Gen_Brute_Start'])
    vChk_Gen_Brute_Fixed.set(d['vChk_Gen_Brute_Fixed'])
    vChk_Gen_Brute_Invert.set(d['vChk_Gen_Brute_Invert'])
    vChk_Gen_Brute_Nogen.set(d['vChk_Gen_Brute_Nogen'])
    vChk_Gen_Brute_Start.set(d['vChk_Gen_Brute_Start'])
    
    #merge wordlists
    vChk_Merge_Sort.set(d['vChk_Merge_Sort'])
    vChk_Merge_Duplicates.set(d['vChk_Merge_Duplicates'])
    vChk_Merge_Reverse.set(d['vChk_Merge_Reverse'])
    w.Txt_Merge_OutputFN.insert(0,d['Txt_Merge_OutputFN'])
    w.Txt_Merge_Path1.insert(0,d['Txt_Merge_Path1'])
    w.Txt_Merge_Path2.insert(0,d['Txt_Merge_Path2'])
    w.Txt_Merge_Path3.insert(0,d['Txt_Merge_Path3'])
    w.Txt_Merge_Path4.insert(0,d['Txt_Merge_Path4'])
    
    #settings len        
    w.Txt_Tools_Len_Path.insert(0,d['Txt_Tools_Len_Path'])
    w.Txt_Tools_Len_OutputFN.insert(0,d['Txt_Tools_Len_OutputFN'])
    w.Txt_Tools_Len_MinLen.insert(0,d['Txt_Tools_Len_MinLen'])
    w.Txt_Tools_Len_MaxLen.insert(0,d['Txt_Tools_Len_MaxLen'])
    
    #settings gate        
    w.Txt_Tools_Gate_Path.insert(0,d['Txt_Tools_Gate_Path'])
    w.Txt_Tools_Gate_OutputFN.insert(0,d['Txt_Tools_Gate_OutputFN'])
    w.Txt_Tools_Gate_Sections.insert(0,d['Txt_Tools_Gate_Sections'])
    w.Txt_Tools_Gate_Offset.insert(0,d['Txt_Tools_Gate_Offset'])
    
    #analyze wd
    vChk_Ana_Wd_Masks.set(d['vChk_Ana_Wd_Masks'])
    vChk_Ana_Wd_Rare.set(d['vChk_Ana_Wd_Rare'])
    w.Txt_Ana_Wd_Path.insert(0,d['Txt_Ana_Wd_Path'])
    w.Txt_Ana_Wd_Masks.insert(0,d['Txt_Ana_Wd_Masks'])
    
    #settings analyze wd 2
    vChk_Ana2_Wd_Out.set(d['vChk_Ana2_Wd_Out'])
    w.Txt_Ana2_Wd_Out.insert(0,d['Txt_Ana2_Wd_Out'])

    #generate masks
    vChk_Ana_Masks_Sort.set(d['vChk_Ana_Masks_Sort'])
    vChk_Ana_Masks_OutputFN.set(d['vChk_Ana_Masks_OutputFN'])
    vChk_Ana_Masks_Target.set(d['vChk_Ana_Masks_Target'])
    vChk_Ana_Masks_Speed.set(d['vChk_Ana_Masks_Speed'])
    vChk_Ana_Masks_MinLen.set(d['vChk_Ana_Masks_MinLen'])
    vChk_Ana_Masks_MaxLen.set(d['vChk_Ana_Masks_MaxLen'])
    vChk_Ana_Masks_MinRun.set(d['vChk_Ana_Masks_MinRun'])
    vChk_Ana_Masks_MaxRun.set(d['vChk_Ana_Masks_MaxRun'])
    vChk_Ana_Masks_MinOcc.set(d['vChk_Ana_Masks_MinOcc'])
    vChk_Ana_Masks_MaxOcc.set(d['vChk_Ana_Masks_MaxOcc'])
    w.Txt_Ana_Masks_Path.insert(0,d['Txt_Ana_Masks_Path'])
    w.Txt_Ana_Masks_OutputFN.insert(0,d['Txt_Ana_Masks_OutputFN'])
    w.Txt_Ana_Masks_Target.insert(0,d['Txt_Ana_Masks_Target'])
    w.Txt_Ana_Masks_Speed.insert(0,d['Txt_Ana_Masks_Speed'])
    w.Txt_Ana_Masks_MinLen.insert(0,d['Txt_Ana_Masks_MinLen'])
    w.Txt_Ana_Masks_MaxLen.insert(0,d['Txt_Ana_Masks_MaxLen'])
    w.Txt_Ana_Masks_MinRun.insert(0,d['Txt_Ana_Masks_MinRun'])
    w.Txt_Ana_Masks_MaxRun.insert(0,d['Txt_Ana_Masks_MaxRun'])
    w.Txt_Ana_Masks_MinOcc.insert(0,d['Txt_Ana_Masks_MinOcc'])
    w.Txt_Ana_Masks_MaxOcc.insert(0,d['Txt_Ana_Masks_MaxOcc'])
    
    #test masks
    vChk_Ana_Test_Manual.set(d['vChk_Ana_Test_Manual'])
    w.Txt_Ana_Test_Manual.insert(0,d['Txt_Ana_Test_Manual'])
    w.Txt_Ana_Test_Path1.insert(0,d['Txt_Ana_Test_Path1'])
    w.Txt_Ana_Test_Path2.insert(0,d['Txt_Ana_Test_Path2'])
    
    #masks by policy
    vChk_Ana_Pol_MinSym.set(d['vChk_Ana_Pol_MinSym'])
    w.Txt_Ana_Pol_MinSym.insert(0,d['Txt_Ana_Pol_MinSym'])
    vChk_Ana_Pol_MaxSym.set(d['vChk_Ana_Pol_MaxSym'])
    vChk_Ana_Pol_MinUp.set(d['vChk_Ana_Pol_MinUp'])
    w.Txt_Ana_Pol_MinUp.insert(0,d['Txt_Ana_Pol_MinUp'])
    vChk_Ana_Pol_MaxUp.set(d['vChk_Ana_Pol_MaxUp'])
    vChk_Ana_Pol_MinDigit.set(d['vChk_Ana_Pol_MinDigit'])
    w.Txt_Ana_Pol_MinDigit.insert(0,d['Txt_Ana_Pol_MinDigit'])
    vChk_Ana_Pol_MaxDigit.set(d['vChk_Ana_Pol_MaxDigit'])
    vChk_Ana_Pol_MinLow.set(d['vChk_Ana_Pol_MinLow'])
    w.Txt_Ana_Pol_MinLow.insert(0,d['Txt_Ana_Pol_MinLow'])
    vChk_Ana_Pol_MaxLow.set(d['vChk_Ana_Pol_MaxLow'])
    vChk_Ana_Pol_MinLen.set(d['vChk_Ana_Pol_MinLen'])
    w.Txt_Ana_Pol_MinLen.insert(0,d['Txt_Ana_Pol_MinLen'])
    vChk_Ana_Pol_MaxLen.set(d['vChk_Ana_Pol_MaxLen'])
    vChk_Ana_Pol_Speed.set(d['vChk_Ana_Pol_Speed'])
    w.Txt_Ana_Pol_OutputFN.insert(0,d['Txt_Ana_Pol_OutputFN'])
    w.Txt_Ana_Pol_MaxLen.insert(0,d['Txt_Ana_Pol_MaxLen'])
    w.Txt_Ana_Pol_MaxSym.insert(0,d['Txt_Ana_Pol_MaxSym'])
    w.Txt_Ana_Pol_MaxUp.insert(0,d['Txt_Ana_Pol_MaxUp'])
    w.Txt_Ana_Pol_MaxDigit.insert(0,d['Txt_Ana_Pol_MaxDigit'])
    w.Txt_Ana_Pol_MaxLow.insert(0,d['Txt_Ana_Pol_MaxLow'])
    w.Txt_Ana_Pol_Speed.insert(0,d['Txt_Ana_Pol_Speed'])
    
    #settings speedtest
    w.Sel_Speed_Default.configure(values=d['List_Speed_Default'])
    w.Sel_Speed_Default.set(d['Sel_Speed_Default'])
    for item in d['List_Speed_Devices']:
        w.List_Speed_Devices.insert(END,item)
    
    for item in d['List_Speed_PPS']:
        w.List_Speed_PPS.insert(END,item)
    
    #settings attack Dic
    w.Txt_Attack_Dic_Pwd_Path.insert(0,d['Txt_Attack_Dic_Pwd_Path'])
    vChk_Attack_Dic_Mangling.set(d['vChk_Attack_Dic_Mangling'])
    vChk_Attack_Dic_Restore.set(d['vChk_Attack_Dic_Restore'])
    w.Txt_Attack_Dic_Restore.insert(0,d['Txt_Attack_Dic_Restore'])
    vChk_Attack_Dic_Name.set(d['vChk_Attack_Dic_Name'])
    w.Txt_Attack_Dic_Name.insert(0,d['Txt_Attack_Dic_Name'])
    vChk_Attack_Dic_Status.set(d['vChk_Attack_Dic_Status'])
    w.Txt_Attack_Dic_Status.insert(0,d['Txt_Attack_Dic_Status'])
    vChk_Attack_Dic_Show.set(d['vChk_Attack_Dic_Show'])
    vChk_Attack_Dic_Force.set(d['vChk_Attack_Dic_Force'])
    w.Sel_Attack_Dic_Force.configure(values=d['List_Attack_Dic_Force'])
    vSel_Attack_Dic_Force.set(d['Sel_Attack_Dic_Force'])
        
    #settings attack BF    
    w.Txt_Attack_BF_Pwd_Path.insert(0,d['Txt_Attack_BF_Pwd_Path'])
    vSel_Attack_BF_Hash.set(d['Sel_Attack_BF_Hash'])
    w.Txt_Attack_BF_Masks_Path.insert(0,d['Txt_Attack_BF_Masks_Path'])
    vChk_Attack_BF_Masks.set(d['vChk_Attack_BF_Masks'])
    vChk_Attack_BF_Out.set(d['vChk_Attack_BF_Out'])
    w.Txt_Attack_BF_Out_Path.insert(0,d['Txt_Attack_BF_Out_Path'])
    vChk_Attack_BF_Name.set(d['vChk_Attack_BF_Name'])
    w.Txt_Attack_BF_Name.insert(0,d['Txt_Attack_BF_Name'])
    vChk_Attack_BF_Restore.set(d['vChk_Attack_BF_Restore'])
    w.Txt_Attack_BF_Restore.insert(0,d['Txt_Attack_BF_Restore'])
    vChk_Attack_BF_Status_Timer.set(d['vChk_Attack_BF_Status_Timer'])
    w.Txt_Attack_BF_Status_Timer.insert(0,d['Txt_Attack_BF_Status_Timer'])
    vChk_Attack_BF_Runtime.set(d['vChk_Attack_BF_Runtime'])
    w.Txt_Attack_BF_Runtime.insert(0,d['Txt_Attack_BF_Runtime'])
    vChk_Attack_BF_Speed.set(d['vChk_Attack_BF_Speed'])
    vSel_Attack_BF_Device.set(d['Sel_Attack_BF_Device'])
    w.Txt_Attack_BF_Temp.insert(0,d['Txt_Attack_BF_Temp'])
    w.Txt_Attack_BF_TempRetain.insert(0,d['Txt_Attack_BF_TempRetain'])
    vSel_Attack_BF_Workload.set(d['Sel_Attack_BF_Workload'])
    vChk_Attack_BF_PowerTuning.set(d['vChk_Attack_BF_PowerTuning'])
    w.Sel_Attack_BF_Hash.configure(values=d['List_Attack_BF_Hash'])
    w.Sel_Attack_BF_Device.configure(values=d['List_Attack_BF_Device'])
    w.Sel_Attack_BF_Workload.configure(values=d['List_Attack_BF_Workload'])
    
    vLbl_Home_Msg.set("More info when going over a tip icon...\n\nDISCLAIMER: UPAT is for educational purposes only. We don't promote malicious and unethical practices.\n\nAny actions and or activities related to the material contained within this application is solely your responsibility. The misuse of the tools launched from this application can result in criminal charges brought against the persons in question. The author of UPAT will not be held responsible in the event any criminal charges be brought against any individuals misusing the tools to break the law.")
    vLbl_Gen_Web_Tip.set("More info when going over a tip icon...")
    vLbl_Merge_Tip.set("More info when going over a tip icon...")
    vLbl_Tools_Len_Tip.set("More info when going over a tip icon...")
    vLbl_Tools_Gate_Tip.set("More info when going over a tip icon...")
    vLbl_Ana_Wd_Tip.set("More info when going over a tip icon...")
    vLbl_Attack_Dic_Tip.set("More info when going over a tip icon...")
    vLbl_Attack_BF_Tip.set("More info when going over a tip icon...")
        
    #settings new pass
    w.Txt_NewPass_Len.insert(0,d['Txt_NewPass_Len'])
    vChk_NewPass_Specials.set(d['vChk_NewPass_Specials'])
        
        
def destroy_window():
    print "destroy"
    global d
    
    #save settings
    
    #settings cfg
    d['path_abrase']=w.Txt_Cfg_Abrase.get()
    d['path_cewl']=w.Txt_Cfg_Cewl.get()
    d['path_crunch']=w.Txt_Cfg_Crunch.get()
    d['path_cupp']=w.Txt_Cfg_Cupp.get()
    d['path_dymerge']=w.Txt_Cfg_Dymerge.get()
    d['path_hashcat']=w.Txt_Cfg_Hashcat.get()
    d['path_john']=w.Txt_Cfg_John.get()
    d['path_len']=w.Txt_Cfg_Len.get()
    d['path_pack']=w.Txt_Cfg_Pack.get()
    d['path_passtrust']=w.Txt_Cfg_Passtrust.get()
    d['path_pwdlyser']=w.Txt_Cfg_Pwdlyser.get()
    d['path_pipal']=w.Txt_Cfg_Pipal.get()
    d['path_wyd']=w.Txt_Cfg_Wyd.get()
    
    #settings generate wordlist from web
    d['vChk_Gen_Web_IncMeta']=vChk_Gen_Web_IncMeta.get()
    d['vChk_Gen_Web_Keep']=vChk_Gen_Web_Keep.get()
    d['vChk_Gen_Web_ShowCount']=vChk_Gen_Web_ShowCount.get()
    d['vChk_Gen_Web_Verbose']=vChk_Gen_Web_Verbose.get()
    d['vChk_Gen_Web_Write']=vChk_Gen_Web_Write.get()
    d['Sel_Gen_Web_Auth_Type']=w.Sel_Gen_Web_Auth_Type.get()
    d['Txt_Gen_Web_URL']=w.Txt_Gen_Web_URL.get()
    d['Txt_Gen_Web_Depth']=w.Txt_Gen_Web_Depth.get()
    d['Txt_Gen_Web_OutputFN']=w.Txt_Gen_Web_OutputFN.get()
    d['Txt_Gen_Web_Minlen']=w.Txt_Gen_Web_Minlen.get()
    d['Txt_Gen_Web_UA']=w.Txt_Gen_Web_UA.get()
    d['Txt_Gen_Web_Auth_User']=w.Txt_Gen_Web_Auth_User.get()
    d['Txt_Gen_Web_Auth_Pass']=w.Txt_Gen_Web_Auth_Pass.get()
    
    #settings generate wordlist from saved doc
    d['vChk_Gen_Saved_Separate']=vChk_Gen_Saved_Separate.get()
    d['vChk_Gen_Saved_Removebegin']=vChk_Gen_Saved_Removebegin.get()
    d['vChk_Gen_Saved_Removeend']=vChk_Gen_Saved_Removeend.get()
    d['vChk_Gen_Saved_Incnames']=vChk_Gen_Saved_Incnames.get()
    d['vChk_Gen_Saved_Verbose']=vChk_Gen_Saved_Verbose.get()
    d['Txt_Gen_Saved_Minlen']=w.Txt_Gen_Saved_Minlen.get()
    d['Txt_Gen_Saved_Path']=w.Txt_Gen_Saved_Path.get()
    d['Txt_Gen_Saved_FN']=w.Txt_Gen_Saved_FN.get()
    
    #settings generate brute force wordlist
    d['Txt_Gen_Brute_FN']=w.Txt_Gen_Brute_FN.get()
    d['Txt_Gen_Brute_CharsetFN']=w.Txt_Gen_Brute_CharsetFN.get()
    d['Txt_Gen_Brute_Charset']=w.Txt_Gen_Brute_Charset.get()
    d['Txt_Gen_Brute_Min']=w.Txt_Gen_Brute_Min.get()
    d['Txt_Gen_Brute_Max']=w.Txt_Gen_Brute_Max.get()
    d['Txt_Gen_Brute_Fixed']=w.Txt_Gen_Brute_Fixed.get()
    d['Txt_Gen_Brute_Nogen']=w.Txt_Gen_Brute_Nogen.get()
    d['Txt_Gen_Brute_Start']=w.Txt_Gen_Brute_Start.get()
    d['vChk_Gen_Brute_Fixed']=vChk_Gen_Brute_Fixed.get()
    d['vChk_Gen_Brute_Invert']=vChk_Gen_Brute_Invert.get()
    d['vChk_Gen_Brute_Nogen']=vChk_Gen_Brute_Nogen.get()
    d['vChk_Gen_Brute_Start']=vChk_Gen_Brute_Start.get()
    
    #settings merge wordlists
    d['vChk_Merge_Sort']=vChk_Merge_Sort.get()
    d['vChk_Merge_Duplicates']=vChk_Merge_Duplicates.get()
    d['vChk_Merge_Reverse']=vChk_Merge_Reverse.get()
    d['Txt_Merge_OutputFN']=w.Txt_Merge_OutputFN.get()
    d['Txt_Merge_Path1']=w.Txt_Merge_Path1.get()
    d['Txt_Merge_Path2']=w.Txt_Merge_Path2.get()
    d['Txt_Merge_Path3']=w.Txt_Merge_Path3.get()
    d['Txt_Merge_Path4']=w.Txt_Merge_Path4.get()
    
    #settings len        
    d['Txt_Tools_Len_Path']=w.Txt_Tools_Len_Path.get()
    d['Txt_Tools_Len_OutputFN']=w.Txt_Tools_Len_OutputFN.get()
    d['Txt_Tools_Len_MinLen']=w.Txt_Tools_Len_MinLen.get()
    d['Txt_Tools_Len_MaxLen']=w.Txt_Tools_Len_MaxLen.get()
    
    #settings gate        
    d['Txt_Tools_Gate_Path']=w.Txt_Tools_Gate_Path.get()
    d['Txt_Tools_Gate_OutputFN']=w.Txt_Tools_Gate_OutputFN.get()
    d['Txt_Tools_Gate_Sections']=w.Txt_Tools_Gate_Sections.get()
    d['Txt_Tools_Gate_Offset']=w.Txt_Tools_Gate_Offset.get()
    
    
    #settings analyze wd
    d['vChk_Ana_Wd_Masks']=vChk_Ana_Wd_Masks.get()
    d['vChk_Ana_Wd_Rare']=vChk_Ana_Wd_Rare.get()
    d['Txt_Ana_Wd_Path']=w.Txt_Ana_Wd_Path.get()
    d['Txt_Ana_Wd_Masks']=w.Txt_Ana_Wd_Masks.get()
    
    #settings analyze wd 2
    d['vChk_Ana2_Wd_Out']=vChk_Ana2_Wd_Out.get()
    d['Txt_Ana2_Wd_Out']=w.Txt_Ana2_Wd_Out.get()
    
    #settings generate masks
    d['vChk_Ana_Masks_Sort']=vChk_Ana_Masks_Sort.get()
    d['vChk_Ana_Masks_OutputFN']=vChk_Ana_Masks_OutputFN.get()
    d['vChk_Ana_Masks_Target']=vChk_Ana_Masks_Target.get()
    d['vChk_Ana_Masks_Speed']=vChk_Ana_Masks_Speed.get()
    d['vChk_Ana_Masks_MinLen']=vChk_Ana_Masks_MinLen.get()
    d['vChk_Ana_Masks_MaxLen']=vChk_Ana_Masks_MaxLen.get()
    d['vChk_Ana_Masks_MinRun']=vChk_Ana_Masks_MinRun.get()
    d['vChk_Ana_Masks_MaxRun']=vChk_Ana_Masks_MaxRun.get()
    d['vChk_Ana_Masks_MinOcc']=vChk_Ana_Masks_MinOcc.get()
    d['vChk_Ana_Masks_MaxOcc']=vChk_Ana_Masks_MaxOcc.get()
    d['Txt_Ana_Masks_Path']=w.Txt_Ana_Masks_Path.get()
    d['Txt_Ana_Masks_OutputFN']=w.Txt_Ana_Masks_OutputFN.get()
    d['Txt_Ana_Masks_Target']=w.Txt_Ana_Masks_Target.get()
    d['Txt_Ana_Masks_Speed']=w.Txt_Ana_Masks_Speed.get()
    d['Txt_Ana_Masks_MinLen']=w.Txt_Ana_Masks_MinLen.get()
    d['Txt_Ana_Masks_MaxLen']=w.Txt_Ana_Masks_MaxLen.get()
    d['Txt_Ana_Masks_MinRun']=w.Txt_Ana_Masks_MinRun.get()
    d['Txt_Ana_Masks_MaxRun']=w.Txt_Ana_Masks_MaxRun.get()
    d['Txt_Ana_Masks_MinOcc']=w.Txt_Ana_Masks_MinOcc.get()
    d['Txt_Ana_Masks_MaxOcc']=w.Txt_Ana_Masks_MaxOcc.get()

    #settings test masks
    d['vChk_Ana_Test_Manual']=vChk_Ana_Test_Manual.get()
    d['Txt_Ana_Test_Manual']=w.Txt_Ana_Test_Manual.get()
    d['Txt_Ana_Test_Path1']=w.Txt_Ana_Test_Path1.get()
    d['Txt_Ana_Test_Path2']=w.Txt_Ana_Test_Path2.get()

    #settings masks by policy
    d['vChk_Ana_Pol_MinSym']=vChk_Ana_Pol_MinSym.get()
    d['Txt_Ana_Pol_MinSym']=w.Txt_Ana_Pol_MinSym.get()
    d['vChk_Ana_Pol_MaxSym']=vChk_Ana_Pol_MaxSym.get()
    d['vChk_Ana_Pol_MinUp']=vChk_Ana_Pol_MinUp.get()
    d['Txt_Ana_Pol_MinUp']=w.Txt_Ana_Pol_MinUp.get()
    d['vChk_Ana_Pol_MaxUp']=vChk_Ana_Pol_MaxUp.get()
    d['vChk_Ana_Pol_MinDigit']=vChk_Ana_Pol_MinDigit.get()
    d['Txt_Ana_Pol_MinDigit']=w.Txt_Ana_Pol_MinDigit.get()
    d['vChk_Ana_Pol_MaxDigit']=vChk_Ana_Pol_MaxDigit.get()
    d['vChk_Ana_Pol_MinLow']=vChk_Ana_Pol_MinLow.get()
    d['Txt_Ana_Pol_MinLow']=w.Txt_Ana_Pol_MinLow.get()
    d['vChk_Ana_Pol_MaxLow']=vChk_Ana_Pol_MaxLow.get()
    d['vChk_Ana_Pol_MinLen']=vChk_Ana_Pol_MinLen.get()
    d['Txt_Ana_Pol_MinLen']=w.Txt_Ana_Pol_MinLen.get()
    d['vChk_Ana_Pol_MaxLen']=vChk_Ana_Pol_MaxLen.get()
    d['vChk_Ana_Pol_Speed']=vChk_Ana_Pol_Speed.get()
    d['Txt_Ana_Pol_OutputFN']=w.Txt_Ana_Pol_OutputFN.get()
    d['Txt_Ana_Pol_MaxLen']=w.Txt_Ana_Pol_MaxLen.get()
    d['Txt_Ana_Pol_MaxSym']=w.Txt_Ana_Pol_MaxSym.get()
    d['Txt_Ana_Pol_MaxUp']=w.Txt_Ana_Pol_MaxUp.get()
    d['Txt_Ana_Pol_MaxDigit']=w.Txt_Ana_Pol_MaxDigit.get()
    d['Txt_Ana_Pol_MaxLow']=w.Txt_Ana_Pol_MaxLow.get()
    d['Txt_Ana_Pol_Speed']=w.Txt_Ana_Pol_Speed.get()
    
    #settings speedtest
    d['Sel_Speed_Default']=w.Sel_Speed_Default.get()
    
    #settings attack
    d['Txt_Attack_Dic_Wd_Path']=vChk_Ana_Test_Manual.get()
    d['Txt_Attack_Dic_Pwd_Path']=w.Txt_Attack_Dic_Pwd_Path.get()
    d['vChk_Attack_Dic_Mangling']=vChk_Attack_Dic_Mangling.get()
    d['vChk_Attack_Dic_Restore']=vChk_Attack_Dic_Restore.get()
    d['Txt_Attack_Dic_Restore']=w.Txt_Attack_Dic_Restore.get()
    d['vChk_Attack_Dic_Name']=vChk_Attack_Dic_Name.get()
    d['Txt_Attack_Dic_Name']=w.Txt_Attack_Dic_Name.get()
    d['vChk_Attack_Dic_Status']=vChk_Attack_Dic_Status.get()
    d['Txt_Attack_Dic_Status']=w.Txt_Attack_Dic_Status.get()
    d['vChk_Attack_Dic_Show']=vChk_Attack_Dic_Show.get()
    d['vChk_Attack_Dic_Force']=vChk_Attack_Dic_Force.get()
    d['Sel_Attack_Dic_Force']=w.Sel_Attack_Dic_Force.get()
    
    
    #settings attack BF    
    d['Txt_Attack_BF_Pwd_Path']=w.Txt_Attack_BF_Pwd_Path.get()
    d['Sel_Attack_BF_Hash']=vSel_Attack_BF_Hash.get()
    d['Txt_Attack_BF_Masks_Path']=w.Txt_Attack_BF_Masks_Path.get()
    d['vChk_Attack_BF_Masks']=vChk_Attack_BF_Masks.get()
    d['vChk_Attack_BF_Out']=vChk_Attack_BF_Out.get()
    d['Txt_Attack_BF_Out_Path']=w.Txt_Attack_BF_Out_Path.get()
    d['vChk_Attack_BF_Name']=vChk_Attack_BF_Name.get()
    d['Txt_Attack_BF_Name']=w.Txt_Attack_BF_Name.get()
    d['vChk_Attack_BF_Restore']=vChk_Attack_BF_Restore.get()
    d['Txt_Attack_BF_Restore']=w.Txt_Attack_BF_Restore.get()
    d['vChk_Attack_BF_Status_Timer']=vChk_Attack_BF_Status_Timer.get()
    d['Txt_Attack_BF_Status_Timer']=w.Txt_Attack_BF_Status_Timer.get()
    d['vChk_Attack_BF_Runtime']=vChk_Attack_BF_Runtime.get()
    d['Txt_Attack_BF_Runtime']=w.Txt_Attack_BF_Runtime.get()
    d['vChk_Attack_BF_Speed']=vChk_Attack_BF_Speed.get()
    d['Sel_Attack_BF_Device']=vSel_Attack_BF_Device.get()
    d['Txt_Attack_BF_Temp']=w.Txt_Attack_BF_Temp.get()
    d['Txt_Attack_BF_TempRetain']=w.Txt_Attack_BF_TempRetain.get()
    d['Sel_Attack_BF_Workload']=vSel_Attack_BF_Workload.get()
    d['vChk_Attack_BF_PowerTuning']=vChk_Attack_BF_PowerTuning.get()
    
    #settings new pass
    d['Txt_NewPass_Len']=w.Txt_NewPass_Len.get()
    d['vChk_NewPass_Specials']=vChk_NewPass_Specials.get()
    
    d.sync()
    d.close()
    
    
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import home
    home.vp_start_gui()
    


