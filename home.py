#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.8.6
# In conjunction with Tcl version 8.6
#    Oct 01, 2017 09:10:42 AM
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import home_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    home_support.set_Tk_var()
    top = UPAT_The_Ultimate_Password_Awareness_Toolkit (root)
    home_support.init(root, top)
    root.mainloop()

w = None
def create_UPAT_The_Ultimate_Password_Awareness_Toolkit(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    home_support.set_Tk_var()
    top = UPAT_The_Ultimate_Password_Awareness_Toolkit (w)
    home_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_UPAT_The_Ultimate_Password_Awareness_Toolkit():
    global w
    w.destroy()
    w = None


class UPAT_The_Ultimate_Password_Awareness_Toolkit:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        self._bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        self._fgcolor = '#000000'  # X11 color: 'black'
        self._compcolor = '#d9d9d9' # X11 color: 'gray85'
        self._ana1color = '#d9d9d9' # X11 color: 'gray85' 
        self._ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.font5 = "-family {DejaVu Sans Mono} -size 10 -weight "  \
            "normal -slant roman -underline 0 -overstrike 0"
        self.font6 = "-family {DejaVu Sans} -size 8 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        self.font7 = "-family {DejaVu Sans} -size 10 -weight normal "  \
            "-slant roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=self._bgcolor)
        self.style.configure('.',foreground=self._fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', self._compcolor), ('active',self._ana2color)])

        top.geometry("964x739")
        top.title("UPAT The Ultimate Password Awareness Toolkit")
        top.configure(highlightcolor="black")



        self.style.configure('TNotebook.Tab', background=self._bgcolor)
        self.style.configure('TNotebook.Tab', foreground=self._fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', self._compcolor), ('active',self._ana2color)])
        self.TNotebook2 = ttk.Notebook(top)
        self.TNotebook2.place(x=15, y=10, height=713, width=942)
        self.TNotebook2.configure(width=942)
        self.TNotebook2.configure(takefocus="")
        self.TNotebook2_pg0 = ttk.Frame(self.TNotebook2)
        self.TNotebook2.add(self.TNotebook2_pg0, padding=3)
        self.TNotebook2.tab(0, text="Home",underline="-1",)
        self.TNotebook2_pg1 = ttk.Frame(self.TNotebook2)
        self.TNotebook2.add(self.TNotebook2_pg1, padding=3)
        self.TNotebook2.tab(1, text="Configure",underline="-1",)
        self.TNotebook2_pg2 = ttk.Frame(self.TNotebook2)
        self.TNotebook2.add(self.TNotebook2_pg2, padding=3)
        self.TNotebook2.tab(2, text="Import Wordlist",underline="-1",)
        self.TNotebook2_pg3 = ttk.Frame(self.TNotebook2)
        self.TNotebook2.add(self.TNotebook2_pg3, padding=3)
        self.TNotebook2.tab(3, text="Generate Wordlist",underline="-1",)
        self.TNotebook2_pg4 = ttk.Frame(self.TNotebook2)
        self.TNotebook2.add(self.TNotebook2_pg4, padding=3)
        self.TNotebook2.tab(4, text="Wordlists Toolkit",underline="-1",)
        self.TNotebook2_pg5 = ttk.Frame(self.TNotebook2)
        self.TNotebook2.add(self.TNotebook2_pg5, padding=3)
        self.TNotebook2.tab(5, text="Analyze Wordlist",underline="-1",)
        self.TNotebook2_pg6 = ttk.Frame(self.TNotebook2)
        self.TNotebook2.add(self.TNotebook2_pg6, padding=3)
        self.TNotebook2.tab(6, text="Speed Test",underline="-1",)
        self.TNotebook2_pg7 = ttk.Frame(self.TNotebook2)
        self.TNotebook2.add(self.TNotebook2_pg7, padding=3)
        self.TNotebook2.tab(7, text="Attack",underline="-1",)
        self.TNotebook2_pg8 = ttk.Frame(self.TNotebook2)
        self.TNotebook2.add(self.TNotebook2_pg8, padding=3)
        self.TNotebook2.tab(8, text="New Password",underline="-1",)

        self.TLabelframe1 = ttk.Labelframe(self.TNotebook2_pg0)
        self.TLabelframe1.place(x=10, y=10, height=480, width=920)
        self.TLabelframe1.configure(text='''Which action do you want to perform?''')
        self.TLabelframe1.configure(width=920)

        self.Btn_Home_Import = ttk.Button(self.TLabelframe1)
        self.Btn_Home_Import.place(relx=0.38, rely=0.03, height=45, width=202)
        self.Btn_Home_Import.configure(takefocus="")
        self.Btn_Home_Import.configure(text='''Import Wordlist''')
        self.Btn_Home_Import.bind('<Button-1>',lambda event:home_support.Btn_Home_Import_Click())
        self.Btn_Home_Import.bind('<Enter>',lambda e: home_support.Tips_Home(1))
        self.Btn_Home_Import.bind('<Leave>',lambda e: home_support.Tips_Home(0))

        self.Btn_Home_GenerateWordlist = ttk.Button(self.TLabelframe1)
        self.Btn_Home_GenerateWordlist.place(relx=0.38, rely=0.15, height=45
                , width=203)
        self.Btn_Home_GenerateWordlist.configure(takefocus="")
        self.Btn_Home_GenerateWordlist.configure(text='''Generate Wordlist''')
        self.Btn_Home_GenerateWordlist.bind('<Button-1>',lambda event:home_support.Btn_Home_GenerateWordlist_Click())
        self.Btn_Home_GenerateWordlist.bind('<Enter>',lambda e: home_support.Tips_Home(2))
        self.Btn_Home_GenerateWordlist.bind('<Leave>',lambda e: home_support.Tips_Home(0))

        self.Btn_Home_Merge = ttk.Button(self.TLabelframe1)
        self.Btn_Home_Merge.place(relx=0.38, rely=0.27, height=45, width=203)
        self.Btn_Home_Merge.configure(takefocus="")
        self.Btn_Home_Merge.configure(text='''Wordlists Toolkit''')
        self.Btn_Home_Merge.bind('<Button-1>',lambda event:home_support.Btn_Home_Merge_Click())
        self.Btn_Home_Merge.bind('<Enter>',lambda e: home_support.Tips_Home(3))
        self.Btn_Home_Merge.bind('<Leave>',lambda e: home_support.Tips_Home(0))

        self.Btn_Home_RunSpeedTest = ttk.Button(self.TLabelframe1)
        self.Btn_Home_RunSpeedTest.place(relx=0.38, rely=0.51, height=45
                , width=203)
        self.Btn_Home_RunSpeedTest.configure(takefocus="")
        self.Btn_Home_RunSpeedTest.configure(text='''Run the Speed Test''')
        self.Btn_Home_RunSpeedTest.bind('<Button-1>',lambda event:home_support.Btn_Home_RunSpeedTest_Click())
        self.Btn_Home_RunSpeedTest.bind('<Enter>',lambda e: home_support.Tips_Home(5))
        self.Btn_Home_RunSpeedTest.bind('<Leave>',lambda e: home_support.Tips_Home(0))

        self.Btn_Home_Analyze = ttk.Button(self.TLabelframe1)
        self.Btn_Home_Analyze.place(relx=0.38, rely=0.39, height=45, width=203)
        self.Btn_Home_Analyze.configure(takefocus="")
        self.Btn_Home_Analyze.configure(text='''Analyze Wordlist''')
        self.Btn_Home_Analyze.bind('<Button-1>',lambda event:home_support.Btn_Home_Analyze_Click())
        self.Btn_Home_Analyze.bind('<Enter>',lambda e: home_support.Tips_Home(4))
        self.Btn_Home_Analyze.bind('<Leave>',lambda e: home_support.Tips_Home(0))

        self.Btn_Home_Attack = ttk.Button(self.TLabelframe1)
        self.Btn_Home_Attack.place(relx=0.38, rely=0.63, height=45, width=203)
        self.Btn_Home_Attack.configure(takefocus="")
        self.Btn_Home_Attack.configure(text='''Attack''')
        self.Btn_Home_Attack.bind('<Button-1>',lambda event:home_support.Btn_Home_Attack_Click())
        self.Btn_Home_Attack.bind('<Enter>',lambda e: home_support.Tips_Home(6))
        self.Btn_Home_Attack.bind('<Leave>',lambda e: home_support.Tips_Home(0))

        self.Label5 = Label(self.TLabelframe1)
        self.Label5.place(relx=0.61, rely=0.16, height=34, width=34)
        self.Label5.configure(activebackground="#f9f9f9")
        self._img1 = PhotoImage(file="info_small.png")
        self.Label5.configure(image=self._img1)
        self.Label5.configure(text='''Label''')

        self.Label6 = Label(self.TLabelframe1)
        self.Label6.place(relx=0.61, rely=0.29, height=34, width=34)
        self.Label6.configure(activebackground="#f9f9f9")
        self._img2 = PhotoImage(file="info_small.png")
        self.Label6.configure(image=self._img2)
        self.Label6.configure(text='''Label''')

        self.Label7 = Label(self.TLabelframe1)
        self.Label7.place(relx=0.61, rely=0.41, height=34, width=34)
        self.Label7.configure(activebackground="#f9f9f9")
        self._img3 = PhotoImage(file="info_small.png")
        self.Label7.configure(image=self._img3)
        self.Label7.configure(text='''Label''')

        self.Label8 = Label(self.TLabelframe1)
        self.Label8.place(relx=0.61, rely=0.65, height=34, width=34)
        self.Label8.configure(activebackground="#f9f9f9")
        self._img4 = PhotoImage(file="info_small.png")
        self.Label8.configure(image=self._img4)
        self.Label8.configure(text='''Label''')

        self.Label9 = Label(self.TLabelframe1)
        self.Label9.place(relx=0.61, rely=0.53, height=34, width=34)
        self.Label9.configure(activebackground="#f9f9f9")
        self._img5 = PhotoImage(file="info_small.png")
        self.Label9.configure(image=self._img5)
        self.Label9.configure(text='''Label''')

        self.Btn_Home_Config = ttk.Button(self.TLabelframe1)
        self.Btn_Home_Config.place(relx=0.38, rely=0.87, height=45, width=203)
        self.Btn_Home_Config.configure(takefocus="")
        self.Btn_Home_Config.configure(text='''Configure''')
        self.Btn_Home_Config.bind('<Button-1>',lambda event:home_support.Btn_Home_Config_Click())
        self.Btn_Home_Config.bind('<Enter>',lambda e: home_support.Tips_Home(7))
        self.Btn_Home_Config.bind('<Leave>',lambda e: home_support.Tips_Home(0))

        self.Label20 = Label(self.TLabelframe1)
        self.Label20.place(relx=0.61, rely=0.88, height=34, width=34)
        self.Label20.configure(activebackground="#f9f9f9")
        self._img6 = PhotoImage(file="info_small.png")
        self.Label20.configure(image=self._img6)
        self.Label20.configure(text='''Label''')

        self.Label24 = Label(self.TLabelframe1)
        self.Label24.place(relx=0.61, rely=0.04, height=34, width=34)
        self.Label24.configure(activebackground="#f9f9f9")
        self._img7 = PhotoImage(file="info_small.png")
        self.Label24.configure(image=self._img7)
        self.Label24.configure(text='''Label''')

        self.Btn_Home_NewPass = ttk.Button(self.TLabelframe1)
        self.Btn_Home_NewPass.place(relx=0.38, rely=0.75, height=45, width=203)
        self.Btn_Home_NewPass.configure(takefocus="")
        self.Btn_Home_NewPass.configure(text='''New Password''')
        self.Btn_Home_NewPass.bind('<Button-1>',lambda event:home_support.Btn_Home_NewPass_Click())
        self.Btn_Home_NewPass.bind('<Enter>',lambda e: home_support.Tips_Home(8))
        self.Btn_Home_NewPass.bind('<Leave>',lambda e: home_support.Tips_Home(0))

        self.Label64 = Label(self.TLabelframe1)
        self.Label64.place(relx=0.61, rely=0.76, height=34, width=34)
        self.Label64.configure(activebackground="#f9f9f9")
        self._img8 = PhotoImage(file="info_small.png")
        self.Label64.configure(image=self._img8)
        self.Label64.configure(text='''Label''')

        self.Labelframe1 = LabelFrame(self.TNotebook2_pg0)
        self.Labelframe1.place(x=10, y=496, height=180, width=920)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(text='''Information''')
        self.Labelframe1.configure(width=920)

        self.Lbl_Home_Msg = Message(self.Labelframe1)
        self.Lbl_Home_Msg.place(x=55, y=29, height=110, width=813)
        self.Lbl_Home_Msg.configure(justify=CENTER)
        self.Lbl_Home_Msg.configure(text='''More info when going over a button...''')
        self.Lbl_Home_Msg.configure(textvariable=home_support.vLbl_Home_Msg)
        self.Lbl_Home_Msg.configure(width=813)

        self.Label4 = Label(self.Labelframe1)
        self.Label4.place(relx=0.02, rely=0.13, height=34, width=34)
        self.Label4.configure(activebackground="#f9f9f9")
        self._img9 = PhotoImage(file="info_small.png")
        self.Label4.configure(image=self._img9)
        self.Label4.configure(text='''Label''')

        self.TLabelframe7 = ttk.Labelframe(self.TNotebook2_pg1)
        self.TLabelframe7.place(x=10, y=10, height=500, width=920)
        self.TLabelframe7.configure(text='''Applications Paths''')
        self.TLabelframe7.configure(width=920)

        self.TLabel12 = ttk.Label(self.TLabelframe7)
        self.TLabel12.place(relx=0.02, rely=0.31, height=16, width=55)
        self.TLabel12.configure(background="#d9d9d9")
        self.TLabel12.configure(foreground="#000000")
        self.TLabel12.configure(relief=FLAT)
        self.TLabel12.configure(text='''Hashcat:''')

        self.TLabel27 = ttk.Label(self.TLabelframe7)
        self.TLabel27.place(relx=0.02, rely=0.12, height=16, width=55)
        self.TLabel27.configure(background="#d9d9d9")
        self.TLabel27.configure(foreground="#000000")
        self.TLabel27.configure(relief=FLAT)
        self.TLabel27.configure(text='''Crunch:''')

        self.TLabel28 = ttk.Label(self.TLabelframe7)
        self.TLabel28.place(relx=0.02, rely=0.68, height=16, width=55)
        self.TLabel28.configure(background="#d9d9d9")
        self.TLabel28.configure(foreground="#000000")
        self.TLabel28.configure(relief=FLAT)
        self.TLabel28.configure(text='''Wyd:''')

        self.TLabel29 = ttk.Label(self.TLabelframe7)
        self.TLabel29.place(relx=0.02, rely=0.25, height=16, width=60)
        self.TLabel29.configure(background="#d9d9d9")
        self.TLabel29.configure(foreground="#000000")
        self.TLabel29.configure(relief=FLAT)
        self.TLabel29.configure(text='''DyMerge:''')

        self.TLabel30 = ttk.Label(self.TLabelframe7)
        self.TLabel30.place(relx=0.02, rely=0.06, height=16, width=55)
        self.TLabel30.configure(background="#d9d9d9")
        self.TLabel30.configure(foreground="#000000")
        self.TLabel30.configure(relief=FLAT)
        self.TLabel30.configure(text='''CeWL:''')

        self.TLabel31 = ttk.Label(self.TLabelframe7)
        self.TLabel31.place(relx=0.02, rely=0.5, height=16, width=55)
        self.TLabel31.configure(background="#d9d9d9")
        self.TLabel31.configure(foreground="#000000")
        self.TLabel31.configure(relief=FLAT)
        self.TLabel31.configure(text='''PACK:''')

        self.cpd61_pg6_tLa38_cpd46 = ttk.Label(self.TLabelframe7)
        self.cpd61_pg6_tLa38_cpd46.place(relx=0.02, rely=0.19, height=16
                , width=55)
        self.cpd61_pg6_tLa38_cpd46.configure(background="#d9d9d9")
        self.cpd61_pg6_tLa38_cpd46.configure(foreground="#000000")
        self.cpd61_pg6_tLa38_cpd46.configure(relief=FLAT)
        self.cpd61_pg6_tLa38_cpd46.configure(text='''CUPP:''')

        self.TLabel32 = ttk.Label(self.TLabelframe7)
        self.TLabel32.place(relx=0.02, rely=0.74, height=16, width=79)
        self.TLabel32.configure(background="#d9d9d9")
        self.TLabel32.configure(foreground="#000000")
        self.TLabel32.configure(relief=FLAT)
        self.TLabel32.configure(text='''Hash Buster:''')

        self.TLabel33 = ttk.Label(self.TLabelframe7)
        self.TLabel33.place(relx=0.02, rely=0.62, height=16, width=38)
        self.TLabel33.configure(background="#d9d9d9")
        self.TLabel33.configure(foreground="#000000")
        self.TLabel33.configure(relief=FLAT)
        self.TLabel33.configure(text='''Pipal:''')

        self.TLabel34 = ttk.Label(self.TLabelframe7)
        self.TLabel34.place(relx=0.02, rely=0.56, height=16, width=63)
        self.TLabel34.configure(background="#d9d9d9")
        self.TLabel34.configure(foreground="#000000")
        self.TLabel34.configure(relief=FLAT)
        self.TLabel34.configure(text='''PassTrust:''')

        self.TLabel35 = ttk.Label(self.TLabelframe7)
        self.TLabel35.place(relx=0.02, rely=0.8, height=16, width=63)
        self.TLabel35.configure(background="#d9d9d9")
        self.TLabel35.configure(foreground="#000000")
        self.TLabel35.configure(relief=FLAT)
        self.TLabel35.configure(text='''Spare 2:''')

        self.TLabel36 = ttk.Label(self.TLabelframe7)
        self.TLabel36.place(relx=0.02, rely=0.37, height=16, width=93)
        self.TLabel36.configure(background="#d9d9d9")
        self.TLabel36.configure(foreground="#000000")
        self.TLabel36.configure(relief=FLAT)
        self.TLabel36.configure(text='''Hashcat-utils:''')

        self.Txt_Cfg_Cewl = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Cewl.place(x=105, y=30, height=18, width=709)
        self.Txt_Cfg_Cewl.configure(takefocus="")
        self.Txt_Cfg_Cewl.configure(cursor="xterm")

        self.Txt_Cfg_Crunch = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Crunch.place(x=105, y=58, height=18, width=709)
        self.Txt_Cfg_Crunch.configure(takefocus="")
        self.Txt_Cfg_Crunch.configure(cursor="xterm")

        self.Txt_Cfg_HashBuster = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_HashBuster.place(x=105, y=359, height=18, width=709)
        self.Txt_Cfg_HashBuster.configure(takefocus="")
        self.Txt_Cfg_HashBuster.configure(cursor="xterm")

        self.Txt_Cfg_Cupp = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Cupp.place(x=105, y=88, height=18, width=709)
        self.Txt_Cfg_Cupp.configure(takefocus="")
        self.Txt_Cfg_Cupp.configure(cursor="xterm")

        self.Txt_Cfg_Dymerge = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Dymerge.place(x=105, y=118, height=18, width=709)
        self.Txt_Cfg_Dymerge.configure(takefocus="")
        self.Txt_Cfg_Dymerge.configure(cursor="xterm")

        self.Txt_Cfg_Hashcat = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Hashcat.place(x=105, y=148, height=18, width=709)
        self.Txt_Cfg_Hashcat.configure(takefocus="")
        self.Txt_Cfg_Hashcat.configure(cursor="xterm")

        self.Txt_Cfg_John = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_John.place(x=105, y=208, height=18, width=709)
        self.Txt_Cfg_John.configure(takefocus="")
        self.Txt_Cfg_John.configure(cursor="xterm")

        self.Txt_Cfg_Len = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Len.place(x=105, y=178, height=18, width=709)
        self.Txt_Cfg_Len.configure(takefocus="")
        self.Txt_Cfg_Len.configure(cursor="xterm")

        self.Txt_Cfg_Pack = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Pack.place(x=105, y=238, height=18, width=709)
        self.Txt_Cfg_Pack.configure(takefocus="")
        self.Txt_Cfg_Pack.configure(cursor="fleur")

        self.Txt_Cfg_Passtrust = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Passtrust.place(x=105, y=269, height=18, width=709)
        self.Txt_Cfg_Passtrust.configure(takefocus="")
        self.Txt_Cfg_Passtrust.configure(cursor="xterm")

        self.Txt_Cfg_Pipal = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Pipal.place(x=105, y=298, height=18, width=709)
        self.Txt_Cfg_Pipal.configure(takefocus="")
        self.Txt_Cfg_Pipal.configure(cursor="xterm")

        self.Txt_Cfg_Wyd = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Wyd.place(x=105, y=328, height=18, width=709)
        self.Txt_Cfg_Wyd.configure(takefocus="")
        self.Txt_Cfg_Wyd.configure(cursor="xterm")

        self.Btn_Cfg_HashBuster = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_HashBuster.place(relx=0.9, rely=0.74, height=25, width=83)
        self.Btn_Cfg_HashBuster.configure(takefocus="")
        self.Btn_Cfg_HashBuster.configure(text='''Browse...''')
        self.Btn_Cfg_HashBuster.bind('<Button-1>',lambda event:home_support.Btn_Cfg_HashBuster_Click())

        self.Btn_Cfg_Cewl = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Cewl.place(relx=0.9, rely=0.05, height=25, width=83)
        self.Btn_Cfg_Cewl.configure(takefocus="")
        self.Btn_Cfg_Cewl.configure(text='''Browse...''')
        self.Btn_Cfg_Cewl.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Cewl_Click())

        self.TLabel37 = ttk.Label(self.TLabelframe7)
        self.TLabel37.place(relx=0.02, rely=0.43, height=16, width=55)
        self.TLabel37.configure(background="#d9d9d9")
        self.TLabel37.configure(foreground="#000000")
        self.TLabel37.configure(relief=FLAT)
        self.TLabel37.configure(text='''John:''')

        self.Txt_Cfg_Pwdlyser = ttk.Entry(self.TLabelframe7)
        self.Txt_Cfg_Pwdlyser.place(x=105, y=389, height=18, width=709)
        self.Txt_Cfg_Pwdlyser.configure(takefocus="")
        self.Txt_Cfg_Pwdlyser.configure(cursor="xterm")

        self.Btn_Cfg_Crunch = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Crunch.place(relx=0.9, rely=0.11, height=25, width=83)
        self.Btn_Cfg_Crunch.configure(takefocus="")
        self.Btn_Cfg_Crunch.configure(text='''Browse...''')
        self.Btn_Cfg_Crunch.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Crunch_Click())

        self.Btn_Cfg_Cupp = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Cupp.place(relx=0.9, rely=0.18, height=25, width=83)
        self.Btn_Cfg_Cupp.configure(takefocus="")
        self.Btn_Cfg_Cupp.configure(text='''Browse...''')
        self.Btn_Cfg_Cupp.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Cupp_Click())

        self.Btn_Cfg_Dymerge = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Dymerge.place(relx=0.9, rely=0.24, height=25, width=83)
        self.Btn_Cfg_Dymerge.configure(takefocus="")
        self.Btn_Cfg_Dymerge.configure(text='''Browse...''')
        self.Btn_Cfg_Dymerge.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Dymerge_Click())

        self.Btn_Cfg_Hashcat = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Hashcat.place(relx=0.9, rely=0.3, height=25, width=83)
        self.Btn_Cfg_Hashcat.configure(takefocus="")
        self.Btn_Cfg_Hashcat.configure(text='''Browse...''')
        self.Btn_Cfg_Hashcat.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Hashcat_Click())

        self.Btn_Cfg_John = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_John.place(relx=0.9, rely=0.43, height=25, width=83)
        self.Btn_Cfg_John.configure(takefocus="")
        self.Btn_Cfg_John.configure(text='''Browse...''')
        self.Btn_Cfg_John.bind('<Button-1>',lambda event:home_support.Btn_Cfg_John_Click())

        self.Btn_Cfg_Len = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Len.place(relx=0.9, rely=0.37, height=25, width=83)
        self.Btn_Cfg_Len.configure(takefocus="")
        self.Btn_Cfg_Len.configure(text='''Browse...''')
        self.Btn_Cfg_Len.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Len_Click())

        self.Btn_Cfg_Pack = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Pack.place(relx=0.9, rely=0.49, height=25, width=83)
        self.Btn_Cfg_Pack.configure(takefocus="")
        self.Btn_Cfg_Pack.configure(text='''Browse...''')
        self.Btn_Cfg_Pack.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Pack_Click())

        self.Btn_Cfg_Passtrust = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Passtrust.place(relx=0.9, rely=0.56, height=25, width=83)
        self.Btn_Cfg_Passtrust.configure(takefocus="")
        self.Btn_Cfg_Passtrust.configure(text='''Browse...''')
        self.Btn_Cfg_Passtrust.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Passtrust_Click())

        self.Btn_Cfg_Pwdlyser = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Pwdlyser.place(relx=0.9, rely=0.8, height=25, width=83)
        self.Btn_Cfg_Pwdlyser.configure(takefocus="")
        self.Btn_Cfg_Pwdlyser.configure(text='''Browse...''')
        self.Btn_Cfg_Pwdlyser.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Pwdlyser_Click())

        self.Btn_Cfg_Pipal = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Pipal.place(relx=0.9, rely=0.62, height=25, width=83)
        self.Btn_Cfg_Pipal.configure(takefocus="")
        self.Btn_Cfg_Pipal.configure(text='''Browse...''')
        self.Btn_Cfg_Pipal.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Pipal_Click())

        self.Btn_Cfg_Wyd = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Wyd.place(relx=0.9, rely=0.68, height=25, width=83)
        self.Btn_Cfg_Wyd.configure(takefocus="")
        self.Btn_Cfg_Wyd.configure(text='''Browse...''')
        self.Btn_Cfg_Wyd.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Wyd_Click())

        self.Btn_Cfg_Update = ttk.Button(self.TLabelframe7)
        self.Btn_Cfg_Update.place(relx=0.9, rely=0.9, height=35, width=83)
        self.Btn_Cfg_Update.configure(takefocus="")
        self.Btn_Cfg_Update.configure(text='''Update''')
        self.Btn_Cfg_Update.bind('<Button-1>',lambda event:home_support.Btn_Cfg_Update_Click(self.Txt_Cfg_HashBuster.get(),self.Txt_Cfg_Cewl.get(),self.Txt_Cfg_Crunch.get(),self.Txt_Cfg_Cupp.get(),self.Txt_Cfg_Dymerge.get(),self.Txt_Cfg_Hashcat.get(),self.Txt_Cfg_John.get(),self.Txt_Cfg_Len.get(),self.Txt_Cfg_Pack.get(),self.Txt_Cfg_Passtrust.get(),self.Txt_Cfg_Pwdlyser.get(),self.Txt_Cfg_Pipal.get(),self.Txt_Cfg_Wyd.get()))

        self.Labelframe3 = LabelFrame(self.TNotebook2_pg1)
        self.Labelframe3.place(x=5, y=515, height=160, width=920)
        self.Labelframe3.configure(relief=GROOVE)
        self.Labelframe3.configure(text='''Information''')
        self.Labelframe3.configure(width=920)

        self.Lbl_Home_Msg1 = Message(self.Labelframe3)
        self.Lbl_Home_Msg1.place(x=55, y=15, height=110, width=813)
        self.Lbl_Home_Msg1.configure(justify=CENTER)
        self.Lbl_Home_Msg1.configure(text='''Ensure all the tools listed above are present in your environment and provide their paths so that UPAT can run them accordingly.''')
        self.Lbl_Home_Msg1.configure(width=813)

        self.Label10 = Label(self.Labelframe3)
        self.Label10.place(relx=0.01, rely=0.12, height=34, width=34)
        self.Label10.configure(activebackground="#f9f9f9")
        self._img10 = PhotoImage(file="info_small.png")
        self.Label10.configure(image=self._img10)
        self.Label10.configure(text='''Label''')

        self.TLabelframe2 = ttk.Labelframe(self.TNotebook2_pg2)
        self.TLabelframe2.place(x=10, y=10, height=450, width=915)
        self.TLabelframe2.configure(text='''Pick a wordlist''')
        self.TLabelframe2.configure(width=915)

        self.Label1 = Label(self.TLabelframe2)
        self.Label1.place(relx=0.02, rely=0.06, height=18, width=131)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Wordlists repository:''')

        self.Btn_Import_Browse = ttk.Button(self.TLabelframe2)
        self.Btn_Import_Browse.place(relx=0.87, rely=0.04, height=25, width=88)
        self.Btn_Import_Browse.configure(takefocus="")
        self.Btn_Import_Browse.configure(text='''Browse...''')
        self.Btn_Import_Browse.bind('<Button-1>',lambda event:home_support.Btn_Import_Browse_Click())

        self.Txt_Import_Path = ttk.Entry(self.TLabelframe2)
        self.Txt_Import_Path.place(x=160, y=24, height=18, width=624)
        self.Txt_Import_Path.configure(takefocus="")
        self.Txt_Import_Path.configure(cursor="xterm")

        self.Btn_Import_Select = ttk.Button(self.TLabelframe2)
        self.Btn_Import_Select.place(relx=0.87, rely=0.92, height=25, width=88)
        self.Btn_Import_Select.configure(takefocus="")
        self.Btn_Import_Select.configure(text='''Select''')
        self.Btn_Import_Select.bind('<Button-1>',lambda event:home_support.Btn_Import_Select_Click())

        self.List_Import_Repos = ScrolledListBox(self.TLabelframe2)
        self.List_Import_Repos.place(x=160, y=50, height=374, width=626)
        self.List_Import_Repos.configure(background="white")
        self.List_Import_Repos.configure(font=self.font5)
        self.List_Import_Repos.configure(highlightcolor="#d9d9d9")
        self.List_Import_Repos.configure(selectbackground="#c4c4c4")
        self.List_Import_Repos.configure(width=10)

        self.Btn_Import_Refresh = ttk.Button(self.TLabelframe2)
        self.Btn_Import_Refresh.place(relx=0.87, rely=0.12, height=25, width=88)
        self.Btn_Import_Refresh.configure(takefocus="")
        self.Btn_Import_Refresh.configure(text='''Refresh''')
        self.Btn_Import_Refresh.bind('<Button-1>',lambda event:home_support.Btn_Import_Refresh_Click())

        self.Btn_Import_Uncompress = ttk.Button(self.TLabelframe2)
        self.Btn_Import_Uncompress.place(relx=0.87, rely=0.84, height=25
                , width=88)
        self.Btn_Import_Uncompress.configure(takefocus="")
        self.Btn_Import_Uncompress.configure(text='''Uncompress''')
        self.Btn_Import_Uncompress.bind('<Button-1>',lambda event:home_support.Btn_Import_Uncompress_Click())

        self.Labelframe2 = LabelFrame(self.TNotebook2_pg2)
        self.Labelframe2.place(x=10, y=465, height=205, width=915)
        self.Labelframe2.configure(relief=GROOVE)
        self.Labelframe2.configure(text='''Information''')
        self.Labelframe2.configure(width=915)

        self.Message2 = Message(self.Labelframe2)
        self.Message2.place(x=40, y=35, height=50, width=813)
        self.Message2.configure(justify=CENTER)
        self.Message2.configure(text='''Browse to a wordlist repository, then select the wordlist of your choice. It must be a text file uncompressed, with one password per line, file extension does not matter.''')
        self.Message2.configure(width=813)

        self.Message3 = Message(self.Labelframe2)
        self.Message3.place(x=20, y=90, height=50, width=873)
        self.Message3.configure(text='''What's next?''')
        self.Message3.configure(width=873)

        self.Message4 = Message(self.Labelframe2)
        self.Message4.place(x=20, y=130, height=50, width=873)
        self.Message4.configure(text='''A wordlist can then be analyzed or manipulated, and used in a dictionary attack in the next tabs.''')
        self.Message4.configure(width=873)

        self.Label12 = Label(self.Labelframe2)
        self.Label12.place(relx=0.01, rely=0.06, height=34, width=34)
        self.Label12.configure(activebackground="#f9f9f9")
        self._img11 = PhotoImage(file="info_small.png")
        self.Label12.configure(image=self._img11)
        self.Label12.configure(text='''Label''')

        self.TNotebook1 = ttk.Notebook(self.TNotebook2_pg3)
        self.TNotebook1.place(x=5, y=10, height=323, width=921)
        self.TNotebook1.configure(width=921)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_pg0 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg0, padding=3)
        self.TNotebook1.tab(0, text="Web Based (CeWL)",underline="-1",)
        self.TNotebook1_pg1 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg1, padding=3)
        self.TNotebook1.tab(1, text="Based on Saved Document (Wyd)",underline="-1",)
        self.TNotebook1_pg2 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg2, padding=3)
        self.TNotebook1.tab(2, text="Based on User Profiling (CUPP)",underline="-1",)
        self.TNotebook1_pg3 = ttk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_pg3, padding=3)
        self.TNotebook1.tab(3, text="Brute-force List based on Charset (Crunch)",underline="-1",)

        self.TLabelframe3 = ttk.Labelframe(self.TNotebook1_pg0)
        self.TLabelframe3.place(x=10, y=10, height=275, width=900)
        self.TLabelframe3.configure(text='''Settings''')
        self.TLabelframe3.configure(width=900)

        self.Txt_Gen_Web_URL = ttk.Entry(self.TLabelframe3)
        self.Txt_Gen_Web_URL.place(x=75, y=20, height=18, width=804)
        self.Txt_Gen_Web_URL.configure(takefocus="")
        self.Txt_Gen_Web_URL.configure(cursor="xterm")

        self.TLabel1 = ttk.Label(self.TLabelframe3)
        self.TLabel1.place(relx=0.02, rely=0.08, height=16, width=30)
        self.TLabel1.configure(background="#d9d9d9")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(relief=FLAT)
        self.TLabel1.configure(text='''URL:''')

        self.TLabel2 = ttk.Label(self.TLabelframe3)
        self.TLabel2.place(relx=0.29, rely=0.33, height=16, width=100)
        self.TLabel2.configure(background="#d9d9d9")
        self.TLabel2.configure(foreground="#000000")
        self.TLabel2.configure(relief=FLAT)
        self.TLabel2.configure(text='''Spider depth:''')

        self.Txt_Gen_Web_Minlen = ttk.Entry(self.TLabelframe3)
        self.Txt_Gen_Web_Minlen.place(x=155, y=82, height=18, width=34)
        self.Txt_Gen_Web_Minlen.configure(takefocus="")
        self.Txt_Gen_Web_Minlen.configure(cursor="xterm")

        self.TLabel3 = ttk.Label(self.TLabelframe3)
        self.TLabel3.place(relx=0.02, rely=0.33, height=16, width=110)
        self.TLabel3.configure(background="#d9d9d9")
        self.TLabel3.configure(foreground="#000000")
        self.TLabel3.configure(relief=FLAT)
        self.TLabel3.configure(text='''Min. world length:''')

        self.Txt_Gen_Web_Depth = ttk.Entry(self.TLabelframe3)
        self.Txt_Gen_Web_Depth.place(x=375, y=82, height=18, width=39)
        self.Txt_Gen_Web_Depth.configure(takefocus="")
        self.Txt_Gen_Web_Depth.configure(cursor="xterm")

        self.TLabel4 = ttk.Label(self.TLabelframe3)
        self.TLabel4.place(relx=0.02, rely=0.2, height=16, width=120)
        self.TLabel4.configure(background="#d9d9d9")
        self.TLabel4.configure(foreground="#000000")
        self.TLabel4.configure(relief=FLAT)
        self.TLabel4.configure(text='''User agent to send:''')

        self.Txt_Gen_Web_UA = ttk.Entry(self.TLabelframe3)
        self.Txt_Gen_Web_UA.place(x=155, y=52, height=18, width=689)
        self.Txt_Gen_Web_UA.configure(takefocus="")
        self.Txt_Gen_Web_UA.configure(cursor="xterm")

        self.TLabelframe4 = ttk.Labelframe(self.TLabelframe3)
        self.TLabelframe4.place(x=20, y=120, height=120, width=260)
        self.TLabelframe4.configure(text='''HTTP Authentication''')
        self.TLabelframe4.configure(width=260)

        self.Sel_Gen_Web_Auth_Type = ttk.Combobox(self.TLabelframe4)
        self.Sel_Gen_Web_Auth_Type.place(x=135, y=14, height=18, width=87)
        self.value_list = ['none','digest','basic',]
        self.Sel_Gen_Web_Auth_Type.configure(values=self.value_list)
        self.Sel_Gen_Web_Auth_Type.configure(textvariable=home_support.vSel_Gen_Web_Auth_Type)
        self.Sel_Gen_Web_Auth_Type.configure(takefocus="")

        self.TLabel5 = ttk.Label(self.TLabelframe4)
        self.TLabel5.place(relx=0.1, rely=0.13, height=16, width=66)
        self.TLabel5.configure(background="#d9d9d9")
        self.TLabel5.configure(foreground="#000000")
        self.TLabel5.configure(relief=FLAT)
        self.TLabel5.configure(text='''Auth type:''')

        self.TLabel6 = ttk.Label(self.TLabelframe4)
        self.TLabel6.place(relx=0.1, rely=0.43, height=16, width=65)
        self.TLabel6.configure(background="#d9d9d9")
        self.TLabel6.configure(foreground="#000000")
        self.TLabel6.configure(relief=FLAT)
        self.TLabel6.configure(text='''User:''')

        self.Txt_Gen_Web_Auth_User = ttk.Entry(self.TLabelframe4)
        self.Txt_Gen_Web_Auth_User.place(x=135, y=43, height=18, width=104)
        self.Txt_Gen_Web_Auth_User.configure(takefocus="")
        self.Txt_Gen_Web_Auth_User.configure(cursor="xterm")

        self.TLabel7 = ttk.Label(self.TLabelframe4)
        self.TLabel7.place(relx=0.1, rely=0.68, height=16, width=115)
        self.TLabel7.configure(background="#d9d9d9")
        self.TLabel7.configure(foreground="#000000")
        self.TLabel7.configure(relief=FLAT)
        self.TLabel7.configure(text='''Password:''')

        self.Txt_Gen_Web_Auth_Pass = ttk.Entry(self.TLabelframe4)
        self.Txt_Gen_Web_Auth_Pass.place(x=135, y=70, height=18, width=104)
        self.Txt_Gen_Web_Auth_Pass.configure(takefocus="")
        self.Txt_Gen_Web_Auth_Pass.configure(cursor="xterm")

        self.Btn_Gen_Web_Run = ttk.Button(self.TLabelframe3)
        self.Btn_Gen_Web_Run.place(relx=0.88, rely=0.85, height=25, width=83)
        self.Btn_Gen_Web_Run.configure(takefocus="")
        self.Btn_Gen_Web_Run.configure(text='''Run CeWL''')
        self.Btn_Gen_Web_Run.bind('<Button-1>',lambda event:home_support.Btn_Gen_Web_Run_Click(self.Txt_Gen_Web_URL.get(),self.Txt_Gen_Web_UA.get(),self.Txt_Gen_Web_Minlen.get(),self.Txt_Gen_Web_Depth.get(),home_support.vChk_Gen_Web_IncMeta.get(),self.Sel_Gen_Web_Auth_Type.get(),self.Txt_Gen_Web_Auth_User.get(),self.Txt_Gen_Web_Auth_Pass.get(),home_support.vChk_Gen_Web_Keep.get(),home_support.vChk_Gen_Web_Write.get(),self.Txt_Gen_Web_OutputFN.get(),home_support.vChk_Gen_Web_ShowCount.get(),home_support.vChk_Gen_Web_Verbose.get()))

        self.Txt_Gen_Web_OutputFN = ttk.Entry(self.TLabelframe3)
        self.Txt_Gen_Web_OutputFN.place(x=490, y=160, height=18, width=164)
        self.Txt_Gen_Web_OutputFN.configure(takefocus="")
        self.Txt_Gen_Web_OutputFN.configure(cursor="xterm")

        self.Chk_Gen_Web_IncMeta = Checkbutton(self.TLabelframe3)
        self.Chk_Gen_Web_IncMeta.place(x=485, y=81, height=20, width=160)
        self.Chk_Gen_Web_IncMeta.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Web_IncMeta.configure(justify=LEFT)
        self.Chk_Gen_Web_IncMeta.configure(text='''Include the meta data''')
        self.Chk_Gen_Web_IncMeta.configure(variable=home_support.vChk_Gen_Web_IncMeta)

        self.Chk_Gen_Web_Keep = Checkbutton(self.TLabelframe3)
        self.Chk_Gen_Web_Keep.place(x=295, y=130, height=20, width=177)
        self.Chk_Gen_Web_Keep.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Web_Keep.configure(justify=LEFT)
        self.Chk_Gen_Web_Keep.configure(text='''Keep the downloaded file''')
        self.Chk_Gen_Web_Keep.configure(variable=home_support.vChk_Gen_Web_Keep)

        self.Chk_Gen_Web_Write = Checkbutton(self.TLabelframe3)
        self.Chk_Gen_Web_Write.place(x=295, y=159, height=20, width=167)
        self.Chk_Gen_Web_Write.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Web_Write.configure(justify=LEFT)
        self.Chk_Gen_Web_Write.configure(text='''Write the output to file:''')
        self.Chk_Gen_Web_Write.configure(variable=home_support.vChk_Gen_Web_Write)

        self.Chk_Gen_Web_ShowCount = Checkbutton(self.TLabelframe3)
        self.Chk_Gen_Web_ShowCount.place(x=295, y=185, height=20, width=247)
        self.Chk_Gen_Web_ShowCount.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Web_ShowCount.configure(justify=LEFT)
        self.Chk_Gen_Web_ShowCount.configure(text='''Show the count for each word found''')
        self.Chk_Gen_Web_ShowCount.configure(variable=home_support.vChk_Gen_Web_ShowCount)

        self.Chk_Gen_Web_Verbose = Checkbutton(self.TLabelframe3)
        self.Chk_Gen_Web_Verbose.place(x=295, y=210, height=20, width=73)
        self.Chk_Gen_Web_Verbose.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Web_Verbose.configure(justify=LEFT)
        self.Chk_Gen_Web_Verbose.configure(text='''Verbose''')
        self.Chk_Gen_Web_Verbose.configure(variable=home_support.vChk_Gen_Web_Verbose)

        self.Label11 = Label(self.TLabelframe3)
        self.Label11.place(relx=0.95, rely=0.2, height=34, width=34)
        self.Label11.configure(activebackground="#f9f9f9")
        self._img12 = PhotoImage(file="info_small.png")
        self.Label11.configure(image=self._img12)
        self.Label11.configure(text='''Label''')
        self.Label11.bind('<Enter>',lambda e: home_support.Tips_Gen_Web(4))
        self.Label11.bind('<Leave>',lambda e: home_support.Tips_Gen_Web(0))

        self.Label15 = Label(self.TLabelframe3)
        self.Label15.place(relx=0.72, rely=0.28, height=34, width=34)
        self.Label15.configure(activebackground="#f9f9f9")
        self._img13 = PhotoImage(file="info_small.png")
        self.Label15.configure(image=self._img13)
        self.Label15.configure(text='''Label''')
        self.Label15.bind('<Enter>',lambda e: home_support.Tips_Gen_Web(3))
        self.Label15.bind('<Leave>',lambda e: home_support.Tips_Gen_Web(0))

        self.Label16 = Label(self.TLabelframe3)
        self.Label16.place(relx=0.61, rely=0.69, height=34, width=34)
        self.Label16.configure(activebackground="#f9f9f9")
        self._img14 = PhotoImage(file="info_small.png")
        self.Label16.configure(image=self._img14)
        self.Label16.configure(text='''Label''')
        self.Label16.bind('<Enter>',lambda e: home_support.Tips_Gen_Web(5))
        self.Label16.bind('<Leave>',lambda e: home_support.Tips_Gen_Web(0))

        self.Label17 = Label(self.TLabelframe3)
        self.Label17.place(relx=0.13, rely=0.52, height=34, width=34)
        self.Label17.configure(activebackground="#f9f9f9")
        self._img15 = PhotoImage(file="info_small.png")
        self.Label17.configure(image=self._img15)
        self.Label17.configure(text='''Label''')
        self.Label17.bind('<Enter>',lambda e: home_support.Tips_Gen_Web(1))
        self.Label17.bind('<Leave>',lambda e: home_support.Tips_Gen_Web(0))

        self.Label18 = Label(self.TLabelframe3)
        self.Label18.place(relx=0.47, rely=0.28, height=34, width=34)
        self.Label18.configure(activebackground="#f9f9f9")
        self._img16 = PhotoImage(file="info_small.png")
        self.Label18.configure(image=self._img16)
        self.Label18.configure(text='''Label''')
        self.Label18.bind('<Enter>',lambda e: home_support.Tips_Gen_Web(2))
        self.Label18.bind('<Leave>',lambda e: home_support.Tips_Gen_Web(0))

        self.TLabelframe6 = ttk.Labelframe(self.TNotebook1_pg1)
        self.TLabelframe6.place(x=10, y=10, height=255, width=900)
        self.TLabelframe6.configure(text='''Settings''')
        self.TLabelframe6.configure(width=900)

        self.Txt_Gen_Saved_Path = ttk.Entry(self.TLabelframe6)
        self.Txt_Gen_Saved_Path.place(x=260, y=18, height=18, width=519)
        self.Txt_Gen_Saved_Path.configure(takefocus="")
        self.Txt_Gen_Saved_Path.configure(cursor="xterm")

        self.TLabel8 = ttk.Label(self.TLabelframe6)
        self.TLabel8.place(relx=0.02, rely=0.09, height=16, width=240)
        self.TLabel8.configure(background="#d9d9d9")
        self.TLabel8.configure(foreground="#000000")
        self.TLabel8.configure(relief=FLAT)
        self.TLabel8.configure(text='''Path (plain, html, doc, ppt, mp3, pdf):''')

        self.Btn_Gen_Saved_Run = ttk.Button(self.TLabelframe6)
        self.Btn_Gen_Saved_Run.place(relx=0.88, rely=0.79, height=25, width=83)
        self.Btn_Gen_Saved_Run.configure(takefocus="")
        self.Btn_Gen_Saved_Run.configure(text='''Run Wyd''')
        self.Btn_Gen_Saved_Run.bind('<Button-1>',lambda event:home_support.Btn_Gen_Saved_Run_Click(self.Txt_Gen_Saved_Path.get(),self.Txt_Gen_Saved_FN.get(),self.Txt_Gen_Saved_Minlen.get(),home_support.vChk_Gen_Saved_Removebegin.get(),home_support.vChk_Gen_Saved_Removeend.get(),home_support.vChk_Gen_Saved_Incnames.get(),home_support.vChk_Gen_Saved_Verbose.get()))

        self.Btn_Gen_Saved_Browse = ttk.Button(self.TLabelframe6)
        self.Btn_Gen_Saved_Browse.place(relx=0.88, rely=0.06, height=25
                , width=83)
        self.Btn_Gen_Saved_Browse.configure(takefocus="")
        self.Btn_Gen_Saved_Browse.configure(text='''Browse''')
        self.Btn_Gen_Saved_Browse.bind('<Button-1>',lambda event:home_support.Btn_Gen_Saved_Browse_Click())

        self.TLabel9 = ttk.Label(self.TLabelframe6)
        self.TLabel9.place(relx=0.02, rely=0.21, height=16, width=120)
        self.TLabel9.configure(background="#d9d9d9")
        self.TLabel9.configure(foreground="#000000")
        self.TLabel9.configure(relief=FLAT)
        self.TLabel9.configure(text='''Wordlist filename:''')

        self.Txt_Gen_Saved_FN = ttk.Entry(self.TLabelframe6)
        self.Txt_Gen_Saved_FN.place(x=140, y=47, height=18, width=154)
        self.Txt_Gen_Saved_FN.configure(takefocus="")
        self.Txt_Gen_Saved_FN.configure(cursor="xterm")

        self.TLabel10 = ttk.Label(self.TLabelframe6)
        self.TLabel10.place(relx=0.02, rely=0.33, height=16, width=120)
        self.TLabel10.configure(background="#d9d9d9")
        self.TLabel10.configure(foreground="#000000")
        self.TLabel10.configure(relief=FLAT)
        self.TLabel10.configure(text='''Minimum length:''')

        self.Txt_Gen_Saved_Minlen = ttk.Entry(self.TLabelframe6)
        self.Txt_Gen_Saved_Minlen.place(x=140, y=76, height=18, width=44)
        self.Txt_Gen_Saved_Minlen.configure(takefocus="")
        self.Txt_Gen_Saved_Minlen.configure(cursor="xterm")

        self.Chk_Gen_Saved_Removebegin = Checkbutton(self.TLabelframe6)
        self.Chk_Gen_Saved_Removebegin.place(x=15, y=108, height=20, width=322)
        self.Chk_Gen_Saved_Removebegin.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Saved_Removebegin.configure(justify=LEFT)
        self.Chk_Gen_Saved_Removebegin.configure(text='''Removal of non-alpha char at beginning of words''')
        self.Chk_Gen_Saved_Removebegin.configure(variable=home_support.vChk_Gen_Saved_Removebegin)

        self.Chk_Gen_Saved_Removeend = Checkbutton(self.TLabelframe6)
        self.Chk_Gen_Saved_Removeend.place(x=15, y=138, height=20, width=308)
        self.Chk_Gen_Saved_Removeend.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Saved_Removeend.configure(justify=LEFT)
        self.Chk_Gen_Saved_Removeend.configure(text='''Removal of non-alpha char at the end of words''')
        self.Chk_Gen_Saved_Removeend.configure(variable=home_support.vChk_Gen_Saved_Removeend)

        self.Chk_Gen_Saved_Incnames = Checkbutton(self.TLabelframe6)
        self.Chk_Gen_Saved_Incnames.place(x=15, y=170, height=20, width=201)
        self.Chk_Gen_Saved_Incnames.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Saved_Incnames.configure(justify=LEFT)
        self.Chk_Gen_Saved_Incnames.configure(text='''Include file names in wordlist''')
        self.Chk_Gen_Saved_Incnames.configure(variable=home_support.vChk_Gen_Saved_Incnames)

        self.Chk_Gen_Saved_Verbose = Checkbutton(self.TLabelframe6)
        self.Chk_Gen_Saved_Verbose.place(x=15, y=203, height=20, width=73)
        self.Chk_Gen_Saved_Verbose.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Saved_Verbose.configure(justify=LEFT)
        self.Chk_Gen_Saved_Verbose.configure(text='''Verbose''')
        self.Chk_Gen_Saved_Verbose.configure(variable=home_support.vChk_Gen_Saved_Verbose)

        self.Label21 = Label(self.TLabelframe6)
        self.Label21.place(relx=0.22, rely=0.27, height=34, width=34)
        self.Label21.configure(activebackground="#f9f9f9")
        self._img17 = PhotoImage(file="info_small.png")
        self.Label21.configure(image=self._img17)
        self.Label21.configure(text='''Label''')
        self.Label21.bind('<Enter>',lambda e: home_support.Tips_Gen_Saved(1))
        self.Label21.bind('<Leave>',lambda e: home_support.Tips_Gen_Saved(0))

        self.Label22 = Label(self.TLabelframe6)
        self.Label22.place(relx=0.38, rely=0.49, height=34, width=34)
        self.Label22.configure(activebackground="#f9f9f9")
        self._img18 = PhotoImage(file="info_small.png")
        self.Label22.configure(image=self._img18)
        self.Label22.configure(text='''Label''')
        self.Label22.bind('<Enter>',lambda e: home_support.Tips_Gen_Saved(2))
        self.Label22.bind('<Leave>',lambda e: home_support.Tips_Gen_Saved(0))

        self.Label23 = Label(self.TLabelframe6)
        self.Label23.place(relx=0.25, rely=0.67, height=34, width=34)
        self.Label23.configure(activebackground="#f9f9f9")
        self._img19 = PhotoImage(file="info_small.png")
        self.Label23.configure(image=self._img19)
        self.Label23.configure(text='''Label''')
        self.Label23.bind('<Enter>',lambda e: home_support.Tips_Gen_Saved(3))
        self.Label23.bind('<Leave>',lambda e: home_support.Tips_Gen_Saved(0))

        self.Btn_Gen_User_Run = ttk.Button(self.TNotebook1_pg2)
        self.Btn_Gen_User_Run.place(relx=0.18, rely=0.15, height=60, width=570)
        self.Btn_Gen_User_Run.configure(takefocus="")
        self.Btn_Gen_User_Run.configure(text='''Run Interactive Profiler from CUPP''')
        self.Btn_Gen_User_Run.bind('<Button-1>',home_support.Btn_Gen_User_Run_Click)

        self.Label25 = Label(self.TNotebook1_pg2)
        self.Label25.place(relx=0.03, rely=0.5, height=34, width=34)
        self.Label25.configure(activebackground="#f9f9f9")
        self._img20 = PhotoImage(file="info_small.png")
        self.Label25.configure(image=self._img20)
        self.Label25.configure(text='''Label''')

        self.Message5 = Message(self.TNotebook1_pg2)
        self.Message5.place(x=75, y=134, height=55, width=798)
        self.Message5.configure(justify=CENTER)
        self.Message5.configure(text='''The Interactive Profiler will present you various questions to answer on your target, ranging from his names and of his family members, dates of birth, pets names, etc. in an effort to create a wordlist specific to this person.''')
        self.Message5.configure(width=798)

        self.Message6 = Message(self.TNotebook1_pg2)
        self.Message6.place(x=75, y=183, height=55, width=798)
        self.Message6.configure(justify=CENTER)
        self.Message6.configure(text='''It will then mangle through the data provided to generate a powerful wordlist. The file generated is added automatically to your wordlists repository.''')
        self.Message6.configure(width=798)

        self.TLabelframe8 = ttk.Labelframe(self.TNotebook1_pg3)
        self.TLabelframe8.place(x=10, y=10, height=280, width=900)
        self.TLabelframe8.configure(text='''Settings''')
        self.TLabelframe8.configure(width=900)

        self.Btn_Gen_Brute_Run = ttk.Button(self.TLabelframe8)
        self.Btn_Gen_Brute_Run.place(relx=0.86, rely=0.79, height=45, width=113)
        self.Btn_Gen_Brute_Run.configure(takefocus="")
        self.Btn_Gen_Brute_Run.configure(text='''Run Crunch''')
        self.Btn_Gen_Brute_Run.bind('<Button-1>',lambda event:home_support.Btn_Gen_Brute_Run_Click(self.Txt_Gen_Brute_Min.get(),self.Txt_Gen_Brute_Max.get(),self.Txt_Gen_Brute_FN.get(),self.Txt_Gen_Brute_CharsetFN.get(),self.Txt_Gen_Brute_Charset.get(),home_support.vChk_Gen_Brute_Nogen.get(),self.Txt_Gen_Brute_Nogen.get(),home_support.vChk_Gen_Brute_Invert.get(),home_support.vChk_Gen_Brute_Fixed.get(),self.Txt_Gen_Brute_Fixed.get(),home_support.vChk_Gen_Brute_Start.get(),self.Txt_Gen_Brute_Start.get()))

        self.TLabel13 = ttk.Label(self.TLabelframe8)
        self.TLabel13.place(relx=0.02, rely=0.07, height=16, width=120)
        self.TLabel13.configure(background="#d9d9d9")
        self.TLabel13.configure(foreground="#000000")
        self.TLabel13.configure(relief=FLAT)
        self.TLabel13.configure(text='''Wordlist filename:''')

        self.Txt_Gen_Brute_FN = ttk.Entry(self.TLabelframe8)
        self.Txt_Gen_Brute_FN.place(x=140, y=20, height=18, width=154)
        self.Txt_Gen_Brute_FN.configure(takefocus="")
        self.Txt_Gen_Brute_FN.configure(cursor="xterm")

        self.TLabel14 = ttk.Label(self.TLabelframe8)
        self.TLabel14.place(relx=0.02, rely=0.19, height=16, width=120)
        self.TLabel14.configure(background="#d9d9d9")
        self.TLabel14.configure(foreground="#000000")
        self.TLabel14.configure(relief=FLAT)
        self.TLabel14.configure(text='''Charset filename:''')

        self.Txt_Gen_Brute_CharsetFN = ttk.Entry(self.TLabelframe8)
        self.Txt_Gen_Brute_CharsetFN.place(x=140, y=50, height=18, width=194)
        self.Txt_Gen_Brute_CharsetFN.configure(takefocus="")
        self.Txt_Gen_Brute_CharsetFN.configure(cursor="fleur")

        self.Txt_Gen_Brute_Start = ttk.Entry(self.TLabelframe8)
        self.Txt_Gen_Brute_Start.place(x=205, y=212, height=18, width=104)
        self.Txt_Gen_Brute_Start.configure(takefocus="")
        self.Txt_Gen_Brute_Start.configure(cursor="fleur")

        self.Txt_Gen_Brute_Fixed = ttk.Entry(self.TLabelframe8)
        self.Txt_Gen_Brute_Fixed.place(x=730, y=112, height=18, width=104)
        self.Txt_Gen_Brute_Fixed.configure(takefocus="")
        self.Txt_Gen_Brute_Fixed.configure(cursor="fleur")

        self.Btn_Gen_Brute_Browse = ttk.Button(self.TLabelframe8)
        self.Btn_Gen_Brute_Browse.place(relx=0.38, rely=0.19, height=20
                , width=83)
        self.Btn_Gen_Brute_Browse.configure(takefocus="")
        self.Btn_Gen_Brute_Browse.configure(text='''Browse''')
        self.Btn_Gen_Brute_Browse.bind('<Button-1>',lambda event:home_support.Btn_Gen_Brute_Browse_Click())

        self.TLabel24 = ttk.Label(self.TLabelframe8)
        self.TLabel24.place(relx=0.02, rely=0.31, height=16, width=120)
        self.TLabel24.configure(background="#d9d9d9")
        self.TLabel24.configure(foreground="#000000")
        self.TLabel24.configure(relief=FLAT)
        self.TLabel24.configure(text='''Minimum Length:''')

        self.Txt_Gen_Brute_Min = ttk.Entry(self.TLabelframe8)
        self.Txt_Gen_Brute_Min.place(x=140, y=78, height=18, width=34)
        self.Txt_Gen_Brute_Min.configure(takefocus="")
        self.Txt_Gen_Brute_Min.configure(cursor="xterm")

        self.TLabel25 = ttk.Label(self.TLabelframe8)
        self.TLabel25.place(relx=0.23, rely=0.31, height=16, width=120)
        self.TLabel25.configure(background="#d9d9d9")
        self.TLabel25.configure(foreground="#000000")
        self.TLabel25.configure(relief=FLAT)
        self.TLabel25.configure(text='''Maximum Length:''')

        self.Txt_Gen_Brute_Max = ttk.Entry(self.TLabelframe8)
        self.Txt_Gen_Brute_Max.place(x=330, y=78, height=18, width=34)
        self.Txt_Gen_Brute_Max.configure(takefocus="")
        self.Txt_Gen_Brute_Max.configure(cursor="xterm")

        self.Txt_Gen_Brute_Charset = ttk.Entry(self.TLabelframe8)
        self.Txt_Gen_Brute_Charset.place(x=535, y=52, height=18, width=154)
        self.Txt_Gen_Brute_Charset.configure(takefocus="")
        self.Txt_Gen_Brute_Charset.configure(cursor="fleur")

        self.TLabel26 = ttk.Label(self.TLabelframe8)
        self.TLabel26.place(relx=0.48, rely=0.2, height=16, width=90)
        self.TLabel26.configure(background="#d9d9d9")
        self.TLabel26.configure(foreground="#000000")
        self.TLabel26.configure(relief=FLAT)
        self.TLabel26.configure(text='''Charset name:''')

        self.Chk_Gen_Brute_Fixed = Checkbutton(self.TLabelframe8)
        self.Chk_Gen_Brute_Fixed.place(x=10, y=112, height=20, width=705)
        self.Chk_Gen_Brute_Fixed.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Brute_Fixed.configure(justify=LEFT)
        self.Chk_Gen_Brute_Fixed.configure(text='''Specify a pattern (fixed string, @ for lowercase letters, "," for uppercase letters, % for numbers, ^ for symbols) :''')
        self.Chk_Gen_Brute_Fixed.configure(variable=home_support.vChk_Gen_Brute_Fixed)

        self.Chk_Gen_Brute_Nogen = Checkbutton(self.TLabelframe8)
        self.Chk_Gen_Brute_Nogen.place(x=10, y=147, height=20, width=422)
        self.Chk_Gen_Brute_Nogen.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Brute_Nogen.configure(justify=LEFT)
        self.Chk_Gen_Brute_Nogen.configure(text='''Do not generate more than XXXX adjacents duplicates characters''')
        self.Chk_Gen_Brute_Nogen.configure(variable=home_support.vChk_Gen_Brute_Nogen)

        self.Txt_Gen_Brute_Nogen = ttk.Entry(self.TLabelframe8)
        self.Txt_Gen_Brute_Nogen.place(x=200, y=146, height=18, width=34)
        self.Txt_Gen_Brute_Nogen.configure(takefocus="")
        self.Txt_Gen_Brute_Nogen.configure(cursor="fleur")

        self.Chk_Gen_Brute_Invert = Checkbutton(self.TLabelframe8)
        self.Chk_Gen_Brute_Invert.place(x=10, y=178, height=20, width=397)
        self.Chk_Gen_Brute_Invert.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Brute_Invert.configure(justify=LEFT)
        self.Chk_Gen_Brute_Invert.configure(text='''Invert the output so the first character will change very often''')
        self.Chk_Gen_Brute_Invert.configure(variable=home_support.vChk_Gen_Brute_Invert)

        self.Chk_Gen_Brute_Start = Checkbutton(self.TLabelframe8)
        self.Chk_Gen_Brute_Start.place(x=10, y=211, height=20, width=187)
        self.Chk_Gen_Brute_Start.configure(activebackground="#d9d9d9")
        self.Chk_Gen_Brute_Start.configure(justify=LEFT)
        self.Chk_Gen_Brute_Start.configure(text='''Specify the starting string:''')
        self.Chk_Gen_Brute_Start.configure(variable=home_support.vChk_Gen_Brute_Start)

        self.Label26 = Label(self.TLabelframe8)
        self.Label26.place(relx=0.77, rely=0.15, height=34, width=34)
        self.Label26.configure(activebackground="#f9f9f9")
        self._img21 = PhotoImage(file="info_small.png")
        self.Label26.configure(image=self._img21)
        self.Label26.configure(text='''Label''')
        self.Label26.bind('<Enter>',lambda e: home_support.Tips_Gen_Brute(1))
        self.Label26.bind('<Leave>',lambda e: home_support.Tips_Gen_Brute(0))

        self.Label27 = Label(self.TLabelframe8)
        self.Label27.place(relx=0.48, rely=0.52, height=34, width=34)
        self.Label27.configure(activebackground="#f9f9f9")
        self._img22 = PhotoImage(file="info_small.png")
        self.Label27.configure(image=self._img22)
        self.Label27.configure(text='''Label''')
        self.Label27.bind('<Enter>',lambda e: home_support.Tips_Gen_Brute(2))
        self.Label27.bind('<Leave>',lambda e: home_support.Tips_Gen_Brute(0))

        self.Label28 = Label(self.TLabelframe8)
        self.Label28.place(relx=0.34, rely=0.77, height=34, width=34)
        self.Label28.configure(activebackground="#f9f9f9")
        self._img23 = PhotoImage(file="info_small.png")
        self.Label28.configure(image=self._img23)
        self.Label28.configure(text='''Label''')
        self.Label28.bind('<Enter>',lambda e: home_support.Tips_Gen_Brute(3))
        self.Label28.bind('<Leave>',lambda e: home_support.Tips_Gen_Brute(0))

        self.TLabelframe5 = ttk.Labelframe(self.TNotebook2_pg3)
        self.TLabelframe5.place(x=5, y=335, height=285, width=922)
        self.TLabelframe5.configure(text='''Output''')
        self.TLabelframe5.configure(width=922)

        self.Txt_Gen_Output = ScrolledText(self.TLabelframe5)
        self.Txt_Gen_Output.place(x=10, y=1, height=262, width=881)
        self.Txt_Gen_Output.configure(background="black")
        self.Txt_Gen_Output.configure(font="TkTextFont")
        self.Txt_Gen_Output.configure(foreground="white")
        self.Txt_Gen_Output.configure(insertborderwidth="3")
        self.Txt_Gen_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Gen_Output.configure(width=10)
        self.Txt_Gen_Output.configure(wrap=NONE)

        self.Label13 = Label(self.TLabelframe5)
        self.Label13.place(relx=0.97, rely=0.02, height=18, width=18)
        self.Label13.configure(activebackground="#f9f9f9")
        self._img24 = PhotoImage(file="delete.png")
        self.Label13.configure(image=self._img24)
        self.Label13.configure(text='''Label''')
        self.Label13.bind('<Button-1>',lambda e: home_support.Btn_Gen_Output_Delete())

        self.Label14 = Label(self.TLabelframe5)
        self.Label14.place(relx=0.97, rely=0.11, height=18, width=18)
        self.Label14.configure(activebackground="#f9f9f9")
        self._img25 = PhotoImage(file="clipboard.png")
        self.Label14.configure(image=self._img25)
        self.Label14.configure(text='''Label''')
        self.Label14.bind('<Button-1>',lambda e: home_support.Btn_Gen_Output_Copy())

        self.TLabelframe38 = ttk.Labelframe(self.TNotebook2_pg3)
        self.TLabelframe38.place(x=5, y=623, height=55, width=922)
        self.TLabelframe38.configure(text='''Information''')
        self.TLabelframe38.configure(width=920)

        self.Lbl_Gen_Web_Tip = Message(self.TLabelframe38)
        self.Lbl_Gen_Web_Tip.place(x=55, y=7, height=20, width=808)
        self.Lbl_Gen_Web_Tip.configure(text='''Message''')
        self.Lbl_Gen_Web_Tip.configure(textvariable=home_support.vLbl_Gen_Web_Tip)
        self.Lbl_Gen_Web_Tip.configure(width=808)

        self.Label19 = Label(self.TLabelframe38)
        self.Label19.place(relx=0.01, rely=0.02, height=34, width=34)
        self.Label19.configure(activebackground="#f9f9f9")
        self._img26 = PhotoImage(file="info_small.png")
        self.Label19.configure(image=self._img26)
        self.Label19.configure(text='''Label''')

        self.TLabelframe10 = ttk.Labelframe(self.TNotebook2_pg4)
        self.TLabelframe10.place(x=0, y=0, height=1, width=1)
        self.TLabelframe10.configure(text='''Output''')
        self.TLabelframe10.configure(width=920)

        self.cpd61_pg2_cpd53_tex64 = Text(self.TLabelframe10)
        self.cpd61_pg2_cpd53_tex64.place(x=0, y=0, height=1, width=1)
        self.cpd61_pg2_cpd53_tex64.configure(background="white")
        self.cpd61_pg2_cpd53_tex64.configure(font="TkTextFont")
        self.cpd61_pg2_cpd53_tex64.configure(selectbackground="#c4c4c4")
        self.cpd61_pg2_cpd53_tex64.configure(width=896)
        self.cpd61_pg2_cpd53_tex64.configure(wrap=WORD)

        self.TNotebook5 = ttk.Notebook(self.TNotebook2_pg4)
        self.TNotebook5.place(x=15, y=13, height=668, width=907)
        self.TNotebook5.configure(width=907)
        self.TNotebook5.configure(takefocus="")
        self.TNotebook5_pg0 = ttk.Frame(self.TNotebook5)
        self.TNotebook5.add(self.TNotebook5_pg0, padding=3)
        self.TNotebook5.tab(0, text="Merge wordlists (DyMerge)",underline="-1",)
        self.TNotebook5_pg1 = ttk.Frame(self.TNotebook5)
        self.TNotebook5.add(self.TNotebook5_pg1, padding=3)
        self.TNotebook5.tab(1, text="Extract wordlist of given length (Len)",underline="-1",)
        self.TNotebook5_pg2 = ttk.Frame(self.TNotebook5)
        self.TNotebook5.add(self.TNotebook5_pg2, padding=3)
        self.TNotebook5.tab(2, text="Split in equal sections (Gate)",underline="-1",)

        self.TLabelframe9 = ttk.Labelframe(self.TNotebook5_pg0)
        self.TLabelframe9.place(x=10, y=3, height=260, width=880)
        self.TLabelframe9.configure(text='''Settings''')
        self.TLabelframe9.configure(width=880)

        self.Btn_Merge_Run = ttk.Button(self.TLabelframe9)
        self.Btn_Merge_Run.place(relx=0.85, rely=0.73, height=45, width=113)
        self.Btn_Merge_Run.configure(takefocus="")
        self.Btn_Merge_Run.configure(text='''Run DyMerge''')
        self.Btn_Merge_Run.bind('<Button-1>',lambda event:home_support.Btn_Merge_Run_Click(self.Txt_Merge_Path1.get(),self.Txt_Merge_Path2.get(),self.Txt_Merge_Path3.get(),self.Txt_Merge_Path4.get(),self.Txt_Merge_OutputFN.get(),home_support.vChk_Merge_Sort.get(),home_support.vChk_Merge_Duplicates.get(),home_support.vChk_Merge_Reverse.get()))

        self.TLabel15 = ttk.Label(self.TLabelframe9)
        self.TLabel15.place(relx=0.02, rely=0.05, height=16, width=120)
        self.TLabel15.configure(background="#d9d9d9")
        self.TLabel15.configure(foreground="#000000")
        self.TLabel15.configure(relief=FLAT)
        self.TLabel15.configure(text='''Wordlist 1 path:''')

        self.Txt_Merge_Path1 = ttk.Entry(self.TLabelframe9)
        self.Txt_Merge_Path1.place(x=140, y=11, height=18, width=634)
        self.Txt_Merge_Path1.configure(takefocus="")
        self.Txt_Merge_Path1.configure(cursor="xterm")

        self.TLabel16 = ttk.Label(self.TLabelframe9)
        self.TLabel16.place(relx=0.02, rely=0.17, height=16, width=120)
        self.TLabel16.configure(background="#d9d9d9")
        self.TLabel16.configure(foreground="#000000")
        self.TLabel16.configure(relief=FLAT)
        self.TLabel16.configure(text='''Wordlist 2 path:''')

        self.Txt_Merge_Path2 = ttk.Entry(self.TLabelframe9)
        self.Txt_Merge_Path2.place(x=140, y=40, height=18, width=634)
        self.Txt_Merge_Path2.configure(takefocus="")
        self.Txt_Merge_Path2.configure(cursor="xterm")

        self.TLabel17 = ttk.Label(self.TLabelframe9)
        self.TLabel17.place(relx=0.02, rely=0.53, height=16, width=120)
        self.TLabel17.configure(background="#d9d9d9")
        self.TLabel17.configure(foreground="#000000")
        self.TLabel17.configure(relief=FLAT)
        self.TLabel17.configure(text='''Output filename:''')

        self.Btn_Merge_Browse1 = ttk.Button(self.TLabelframe9)
        self.Btn_Merge_Browse1.place(relx=0.89, rely=0.04, height=25, width=83)
        self.Btn_Merge_Browse1.configure(takefocus="")
        self.Btn_Merge_Browse1.configure(text='''Browse''')
        self.Btn_Merge_Browse1.bind('<Button-1>',lambda event:home_support.Btn_Merge_Browse1_Click())

        self.Btn_Merge_Browse2 = ttk.Button(self.TLabelframe9)
        self.Btn_Merge_Browse2.place(relx=0.89, rely=0.16, height=25, width=83)
        self.Btn_Merge_Browse2.configure(takefocus="")
        self.Btn_Merge_Browse2.configure(text='''Browse''')
        self.Btn_Merge_Browse2.bind('<Button-1>',lambda event:home_support.Btn_Merge_Browse2_Click())

        self.Txt_Merge_OutputFN = ttk.Entry(self.TLabelframe9)
        self.Txt_Merge_OutputFN.place(x=140, y=125, height=18, width=134)
        self.Txt_Merge_OutputFN.configure(takefocus="")
        self.Txt_Merge_OutputFN.configure(cursor="xterm")

        self.TLabel18 = ttk.Label(self.TLabelframe9)
        self.TLabel18.place(relx=0.02, rely=0.28, height=16, width=120)
        self.TLabel18.configure(background="#d9d9d9")
        self.TLabel18.configure(foreground="#000000")
        self.TLabel18.configure(relief=FLAT)
        self.TLabel18.configure(text='''Wordlist 3 path:''')

        self.Txt_Merge_Path3 = ttk.Entry(self.TLabelframe9)
        self.Txt_Merge_Path3.place(x=140, y=70, height=18, width=634)
        self.Txt_Merge_Path3.configure(takefocus="")
        self.Txt_Merge_Path3.configure(cursor="xterm")

        self.Btn_Merge_Browse3 = ttk.Button(self.TLabelframe9)
        self.Btn_Merge_Browse3.place(relx=0.89, rely=0.27, height=25, width=83)
        self.Btn_Merge_Browse3.configure(takefocus="")
        self.Btn_Merge_Browse3.configure(text='''Browse''')
        self.Btn_Merge_Browse3.bind('<Button-1>',lambda event:home_support.Btn_Merge_Browse3_Click())

        self.TLabel19 = ttk.Label(self.TLabelframe9)
        self.TLabel19.place(relx=0.02, rely=0.4, height=16, width=120)
        self.TLabel19.configure(background="#d9d9d9")
        self.TLabel19.configure(foreground="#000000")
        self.TLabel19.configure(relief=FLAT)
        self.TLabel19.configure(text='''Wordlist 4 path:''')

        self.Txt_Merge_Path4 = ttk.Entry(self.TLabelframe9)
        self.Txt_Merge_Path4.place(x=140, y=97, height=18, width=634)
        self.Txt_Merge_Path4.configure(takefocus="")
        self.Txt_Merge_Path4.configure(cursor="xterm")

        self.Btn_Merge_Browse4 = ttk.Button(self.TLabelframe9)
        self.Btn_Merge_Browse4.place(relx=0.89, rely=0.38, height=25, width=83)
        self.Btn_Merge_Browse4.configure(takefocus="")
        self.Btn_Merge_Browse4.configure(text='''Browse''')
        self.Btn_Merge_Browse4.bind('<Button-1>',lambda event:home_support.Btn_Merge_Browse4_Click())

        self.Chk_Merge_Sort = Checkbutton(self.TLabelframe9)
        self.Chk_Merge_Sort.place(x=10, y=158, height=20, width=182)
        self.Chk_Merge_Sort.configure(activebackground="#d9d9d9")
        self.Chk_Merge_Sort.configure(justify=LEFT)
        self.Chk_Merge_Sort.configure(text='''Sort output alphabetically''')
        self.Chk_Merge_Sort.configure(variable=home_support.vChk_Merge_Sort)

        self.Chk_Merge_Duplicates = Checkbutton(self.TLabelframe9)
        self.Chk_Merge_Duplicates.place(x=10, y=186, height=20, width=139)
        self.Chk_Merge_Duplicates.configure(activebackground="#d9d9d9")
        self.Chk_Merge_Duplicates.configure(justify=LEFT)
        self.Chk_Merge_Duplicates.configure(text='''Remove duplicates''')
        self.Chk_Merge_Duplicates.configure(variable=home_support.vChk_Merge_Duplicates)

        self.Chk_Merge_Reverse = Checkbutton(self.TLabelframe9)
        self.Chk_Merge_Reverse.place(x=10, y=214, height=20, width=108)
        self.Chk_Merge_Reverse.configure(activebackground="#d9d9d9")
        self.Chk_Merge_Reverse.configure(justify=LEFT)
        self.Chk_Merge_Reverse.configure(text='''Reverse order''')
        self.Chk_Merge_Reverse.configure(variable=home_support.vChk_Merge_Reverse)

        self.Label32 = Label(self.TLabelframe9)
        self.Label32.place(relx=0.18, rely=0.75, height=34, width=34)
        self.Label32.configure(activebackground="#f9f9f9")
        self._img27 = PhotoImage(file="info_small.png")
        self.Label32.configure(image=self._img27)
        self.Label32.configure(text='''Label''')
        self.Label32.bind('<Enter>',lambda e: home_support.Tips_Merge(2))
        self.Label32.bind('<Leave>',lambda e: home_support.Tips_Merge(0))

        self.Label33 = Label(self.TLabelframe9)
        self.Label33.place(relx=0.14, rely=0.86, height=34, width=34)
        self.Label33.configure(activebackground="#f9f9f9")
        self._img28 = PhotoImage(file="info_small.png")
        self.Label33.configure(image=self._img28)
        self.Label33.configure(text='''Label''')
        self.Label33.bind('<Enter>',lambda e: home_support.Tips_Merge(3))
        self.Label33.bind('<Leave>',lambda e: home_support.Tips_Merge(0))

        self.Label34 = Label(self.TLabelframe9)
        self.Label34.place(relx=0.85, rely=0.49, height=34, width=34)
        self.Label34.configure(activebackground="#f9f9f9")
        self._img29 = PhotoImage(file="info_small.png")
        self.Label34.configure(image=self._img29)
        self.Label34.configure(text='''Label''')
        self.Label34.bind('<Enter>',lambda e: home_support.Tips_Merge(1))
        self.Label34.bind('<Leave>',lambda e: home_support.Tips_Merge(0))

        self.TLabelframe11 = ttk.Labelframe(self.TNotebook5_pg0)
        self.TLabelframe11.place(x=10, y=265, height=315, width=880)
        self.TLabelframe11.configure(text='''Output''')
        self.TLabelframe11.configure(width=880)

        self.Txt_Merge_Output = ScrolledText(self.TLabelframe11)
        self.Txt_Merge_Output.place(x=5, y=0, height=287, width=841)
        self.Txt_Merge_Output.configure(background="black")
        self.Txt_Merge_Output.configure(font="TkTextFont")
        self.Txt_Merge_Output.configure(foreground="white")
        self.Txt_Merge_Output.configure(insertborderwidth="3")
        self.Txt_Merge_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Merge_Output.configure(width=10)
        self.Txt_Merge_Output.configure(wrap=NONE)

        self.Label30 = Label(self.TLabelframe11)
        self.Label30.place(relx=0.97, rely=0.02, height=18, width=18)
        self.Label30.configure(activebackground="#f9f9f9")
        self._img30 = PhotoImage(file="delete.png")
        self.Label30.configure(image=self._img30)
        self.Label30.configure(text='''Label''')
        self.Label30.bind('<Button-1>',lambda e: home_support.Btn_Merge_Output_Delete())

        self.Label41 = Label(self.TLabelframe11)
        self.Label41.place(relx=0.97, rely=0.1, height=18, width=18)
        self.Label41.configure(activebackground="#f9f9f9")
        self._img31 = PhotoImage(file="clipboard.png")
        self.Label41.configure(image=self._img31)
        self.Label41.configure(text='''Label''')
        self.Label41.bind('<Button-1>',lambda e: home_support.Btn_Merge_Output_Copy())

        self.TLabelframe39 = ttk.Labelframe(self.TNotebook5_pg0)
        self.TLabelframe39.place(x=10, y=581, height=55, width=880)
        self.TLabelframe39.configure(text='''Information''')
        self.TLabelframe39.configure(width=877)

        self.Lbl_Merge_Tip = Message(self.TLabelframe39)
        self.Lbl_Merge_Tip.place(x=55, y=7, height=20, width=808)
        self.Lbl_Merge_Tip.configure(text='''Message''')
        self.Lbl_Merge_Tip.configure(textvariable=home_support.vLbl_Merge_Tip)
        self.Lbl_Merge_Tip.configure(width=808)

        self.Label29 = Label(self.TLabelframe39)
        self.Label29.place(relx=0.01, rely=0.02, height=34, width=34)
        self.Label29.configure(activebackground="#f9f9f9")
        self._img32 = PhotoImage(file="info_small.png")
        self.Label29.configure(image=self._img32)
        self.Label29.configure(text='''Label''')

        self.TLabelframe34 = ttk.Labelframe(self.TNotebook5_pg1)
        self.TLabelframe34.place(x=10, y=7, height=150, width=880)
        self.TLabelframe34.configure(text='''Settings''')
        self.TLabelframe34.configure(width=880)

        self.Btn_Tools_Len_Run = ttk.Button(self.TLabelframe34)
        self.Btn_Tools_Len_Run.place(relx=0.86, rely=0.57, height=45, width=113)
        self.Btn_Tools_Len_Run.configure(takefocus="")
        self.Btn_Tools_Len_Run.configure(text='''Run Len''')
        self.Btn_Tools_Len_Run.bind('<Button-1>',lambda event:home_support.Btn_Tools_Len_Run_Click(self.Txt_Tools_Len_Path.get(),self.Txt_Tools_Len_OutputFN.get(),self.Txt_Tools_Len_MinLen.get(),self.Txt_Tools_Len_MaxLen.get()))

        self.TLabel41 = ttk.Label(self.TLabelframe34)
        self.TLabel41.place(relx=0.02, rely=0.13, height=16, width=120)
        self.TLabel41.configure(background="#d9d9d9")
        self.TLabel41.configure(foreground="#000000")
        self.TLabel41.configure(relief=FLAT)
        self.TLabel41.configure(text='''Wordlist path:''')

        self.Txt_Tools_Len_Path = ttk.Entry(self.TLabelframe34)
        self.Txt_Tools_Len_Path.place(x=140, y=16, height=18, width=634)
        self.Txt_Tools_Len_Path.configure(takefocus="")
        self.Txt_Tools_Len_Path.configure(cursor="xterm")

        self.TLabel42 = ttk.Label(self.TLabelframe34)
        self.TLabel42.place(relx=0.02, rely=0.32, height=16, width=120)
        self.TLabel42.configure(background="#d9d9d9")
        self.TLabel42.configure(foreground="#000000")
        self.TLabel42.configure(relief=FLAT)
        self.TLabel42.configure(text='''Output file name:''')

        self.Txt_Tools_Len_OutputFN = ttk.Entry(self.TLabelframe34)
        self.Txt_Tools_Len_OutputFN.place(x=140, y=41, height=18, width=134)
        self.Txt_Tools_Len_OutputFN.configure(takefocus="")
        self.Txt_Tools_Len_OutputFN.configure(cursor="xterm")

        self.Btn_Tools_Len_Browse = ttk.Button(self.TLabelframe34)
        self.Btn_Tools_Len_Browse.place(relx=0.89, rely=0.11, height=25
                , width=83)
        self.Btn_Tools_Len_Browse.configure(takefocus="")
        self.Btn_Tools_Len_Browse.configure(text='''Browse''')
        self.Btn_Tools_Len_Browse.bind('<Button-1>',lambda event:home_support.Btn_Tools_Len_Browse_Click())

        self.TLabel50 = ttk.Label(self.TLabelframe34)
        self.TLabel50.place(relx=0.02, rely=0.53, height=16, width=120)
        self.TLabel50.configure(background="#d9d9d9")
        self.TLabel50.configure(foreground="#000000")
        self.TLabel50.configure(relief=FLAT)
        self.TLabel50.configure(text='''Minimum length:''')

        self.Txt_Tools_Len_MinLen = ttk.Entry(self.TLabelframe34)
        self.Txt_Tools_Len_MinLen.place(x=140, y=68, height=18, width=30)
        self.Txt_Tools_Len_MinLen.configure(takefocus="")
        self.Txt_Tools_Len_MinLen.configure(cursor="xterm")

        self.TLabel51 = ttk.Label(self.TLabelframe34)
        self.TLabel51.place(relx=0.02, rely=0.73, height=16, width=120)
        self.TLabel51.configure(background="#d9d9d9")
        self.TLabel51.configure(foreground="#000000")
        self.TLabel51.configure(relief=FLAT)
        self.TLabel51.configure(text='''Maximum Length:''')

        self.Txt_Tools_Len_MaxLen = ttk.Entry(self.TLabelframe34)
        self.Txt_Tools_Len_MaxLen.place(x=140, y=94, height=18, width=30)
        self.Txt_Tools_Len_MaxLen.configure(takefocus="")
        self.Txt_Tools_Len_MaxLen.configure(cursor="xterm")

        self.Label35 = Label(self.TLabelframe34)
        self.Label35.place(relx=0.2, rely=0.54, height=34, width=34)
        self.Label35.configure(activebackground="#f9f9f9")
        self._img33 = PhotoImage(file="info_small.png")
        self.Label35.configure(image=self._img33)
        self.Label35.configure(text='''Label''')
        self.Label35.bind('<Enter>',lambda e: home_support.Tips_Tools_Len(1))
        self.Label35.bind('<Leave>',lambda e: home_support.Tips_Tools_Len(0))

        self.TLabelframe36 = ttk.Labelframe(self.TNotebook5_pg1)
        self.TLabelframe36.place(x=10, y=160, height=415, width=880)
        self.TLabelframe36.configure(text='''Output''')
        self.TLabelframe36.configure(width=880)

        self.Txt_Tools_Len_Output = ScrolledText(self.TLabelframe36)
        self.Txt_Tools_Len_Output.place(x=5, y=2, height=387, width=841)
        self.Txt_Tools_Len_Output.configure(background="black")
        self.Txt_Tools_Len_Output.configure(font="TkTextFont")
        self.Txt_Tools_Len_Output.configure(foreground="white")
        self.Txt_Tools_Len_Output.configure(insertborderwidth="3")
        self.Txt_Tools_Len_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Tools_Len_Output.configure(width=10)
        self.Txt_Tools_Len_Output.configure(wrap=NONE)

        self.Label42 = Label(self.TLabelframe36)
        self.Label42.place(relx=0.97, rely=0.01, height=18, width=18)
        self.Label42.configure(activebackground="#f9f9f9")
        self._img34 = PhotoImage(file="delete.png")
        self.Label42.configure(image=self._img34)
        self.Label42.configure(text='''Label''')
        self.Label42.bind('<Button-1>',lambda e: home_support.Btn_Tools_Len_Output_Delete())

        self.Label43 = Label(self.TLabelframe36)
        self.Label43.place(relx=0.97, rely=0.07, height=18, width=18)
        self.Label43.configure(activebackground="#f9f9f9")
        self._img35 = PhotoImage(file="clipboard.png")
        self.Label43.configure(image=self._img35)
        self.Label43.configure(text='''Label''')
        self.Label43.bind('<Button-1>',lambda e: home_support.Btn_Tools_Len_Output_Copy())

        self.TLabelframe40 = ttk.Labelframe(self.TNotebook5_pg1)
        self.TLabelframe40.place(x=10, y=579, height=55, width=880)
        self.TLabelframe40.configure(text='''Information''')
        self.TLabelframe40.configure(width=877)

        self.Lbl_Tools_Len_Tip = Message(self.TLabelframe40)
        self.Lbl_Tools_Len_Tip.place(x=55, y=7, height=20, width=808)
        self.Lbl_Tools_Len_Tip.configure(text='''Message''')
        self.Lbl_Tools_Len_Tip.configure(textvariable=home_support.vLbl_Tools_Len_Tip)
        self.Lbl_Tools_Len_Tip.configure(width=808)

        self.Label40 = Label(self.TLabelframe40)
        self.Label40.place(relx=0.01, rely=0.02, height=34, width=34)
        self.Label40.configure(activebackground="#f9f9f9")
        self._img36 = PhotoImage(file="info_small.png")
        self.Label40.configure(image=self._img36)
        self.Label40.configure(text='''Label''')

        self.TLabelframe35 = ttk.Labelframe(self.TNotebook5_pg2)
        self.TLabelframe35.place(x=10, y=10, height=150, width=880)
        self.TLabelframe35.configure(text='''Settings''')
        self.TLabelframe35.configure(width=880)

        self.Btn_Tools_Gate_Run = ttk.Button(self.TLabelframe35)
        self.Btn_Tools_Gate_Run.place(relx=0.86, rely=0.53, height=45, width=113)

        self.Btn_Tools_Gate_Run.configure(takefocus="")
        self.Btn_Tools_Gate_Run.configure(text='''Run Gate''')
        self.Btn_Tools_Gate_Run.bind('<Button-1>',lambda event:home_support.Btn_Tools_Gate_Run_Click(self.Txt_Tools_Gate_Path.get(),self.Txt_Tools_Gate_OutputFN.get(),self.Txt_Tools_Gate_Sections.get(),self.Txt_Tools_Gate_Offset.get()))

        self.TLabel43 = ttk.Label(self.TLabelframe35)
        self.TLabel43.place(relx=0.02, rely=0.13, height=16, width=120)
        self.TLabel43.configure(background="#d9d9d9")
        self.TLabel43.configure(foreground="#000000")
        self.TLabel43.configure(relief=FLAT)
        self.TLabel43.configure(text='''Wordlist path:''')

        self.Txt_Tools_Gate_Path = ttk.Entry(self.TLabelframe35)
        self.Txt_Tools_Gate_Path.place(x=145, y=15, height=18, width=624)
        self.Txt_Tools_Gate_Path.configure(takefocus="")
        self.Txt_Tools_Gate_Path.configure(cursor="xterm")

        self.TLabel52 = ttk.Label(self.TLabelframe35)
        self.TLabel52.place(relx=0.02, rely=0.32, height=16, width=120)
        self.TLabel52.configure(background="#d9d9d9")
        self.TLabel52.configure(foreground="#000000")
        self.TLabel52.configure(relief=FLAT)
        self.TLabel52.configure(text='''Output file name:''')

        self.Txt_Tools_Gate_OutputFN = ttk.Entry(self.TLabelframe35)
        self.Txt_Tools_Gate_OutputFN.place(x=145, y=41, height=18, width=134)
        self.Txt_Tools_Gate_OutputFN.configure(takefocus="")
        self.Txt_Tools_Gate_OutputFN.configure(cursor="xterm")

        self.Btn_Tools_Gate_Browse = ttk.Button(self.TLabelframe35)
        self.Btn_Tools_Gate_Browse.place(relx=0.89, rely=0.11, height=25
                , width=83)
        self.Btn_Tools_Gate_Browse.configure(takefocus="")
        self.Btn_Tools_Gate_Browse.configure(text='''Browse''')
        self.Btn_Tools_Gate_Browse.bind('<Button-1>',lambda event:home_support.Btn_Tools_Gate_Browse_Click())

        self.TLabel53 = ttk.Label(self.TLabelframe35)
        self.TLabel53.place(relx=0.02, rely=0.53, height=16, width=125)
        self.TLabel53.configure(background="#d9d9d9")
        self.TLabel53.configure(foreground="#000000")
        self.TLabel53.configure(relief=FLAT)
        self.TLabel53.configure(text='''Number of sections:''')

        self.Txt_Tools_Gate_Sections = ttk.Entry(self.TLabelframe35)
        self.Txt_Tools_Gate_Sections.place(x=145, y=68, height=18, width=30)
        self.Txt_Tools_Gate_Sections.configure(takefocus="")
        self.Txt_Tools_Gate_Sections.configure(cursor="xterm")

        self.TLabel54 = ttk.Label(self.TLabelframe35)
        self.TLabel54.place(relx=0.02, rely=0.72, height=16, width=120)
        self.TLabel54.configure(background="#d9d9d9")
        self.TLabel54.configure(foreground="#000000")
        self.TLabel54.configure(relief=FLAT)
        self.TLabel54.configure(text='''Section offset:''')

        self.Txt_Tools_Gate_Offset = ttk.Entry(self.TLabelframe35)
        self.Txt_Tools_Gate_Offset.place(x=145, y=93, height=18, width=30)
        self.Txt_Tools_Gate_Offset.configure(takefocus="")
        self.Txt_Tools_Gate_Offset.configure(cursor="xterm")

        self.Label36 = Label(self.TLabelframe35)
        self.Label36.place(relx=0.2, rely=0.64, height=34, width=34)
        self.Label36.configure(activebackground="#f9f9f9")
        self._img37 = PhotoImage(file="info_small.png")
        self.Label36.configure(image=self._img37)
        self.Label36.configure(text='''Label''')
        self.Label36.bind('<Enter>',lambda e: home_support.Tips_Tools_Gate(1))
        self.Label36.bind('<Leave>',lambda e: home_support.Tips_Tools_Gate(0))

        self.TLabelframe37 = ttk.Labelframe(self.TNotebook5_pg2)
        self.TLabelframe37.place(x=10, y=165, height=410, width=880)
        self.TLabelframe37.configure(text='''Output''')
        self.TLabelframe37.configure(width=880)

        self.Txt_Tools_Gate_Output = ScrolledText(self.TLabelframe37)
        self.Txt_Tools_Gate_Output.place(x=5, y=0, height=382, width=841)
        self.Txt_Tools_Gate_Output.configure(background="black")
        self.Txt_Tools_Gate_Output.configure(font="TkTextFont")
        self.Txt_Tools_Gate_Output.configure(foreground="white")
        self.Txt_Tools_Gate_Output.configure(insertborderwidth="3")
        self.Txt_Tools_Gate_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Tools_Gate_Output.configure(width=10)
        self.Txt_Tools_Gate_Output.configure(wrap=NONE)

        self.Label44 = Label(self.TLabelframe37)
        self.Label44.place(relx=0.97, rely=0.01, height=18, width=18)
        self.Label44.configure(activebackground="#f9f9f9")
        self._img38 = PhotoImage(file="delete.png")
        self.Label44.configure(image=self._img38)
        self.Label44.configure(text='''Label''')
        self.Label44.bind('<Button-1>',lambda e: home_support.Btn_Tools_Gate_Output_Delete())

        self.Label45 = Label(self.TLabelframe37)
        self.Label45.place(relx=0.97, rely=0.08, height=18, width=18)
        self.Label45.configure(activebackground="#f9f9f9")
        self._img39 = PhotoImage(file="clipboard.png")
        self.Label45.configure(image=self._img39)
        self.Label45.configure(text='''Label''')
        self.Label45.bind('<Button-1>',lambda e: home_support.Btn_Tools_Gate_Output_Copy())

        self.TLabelframe41 = ttk.Labelframe(self.TNotebook5_pg2)
        self.TLabelframe41.place(x=10, y=577, height=55, width=880)
        self.TLabelframe41.configure(text='''Information''')
        self.TLabelframe41.configure(width=877)

        self.Lbl_Tools_Gate_Tip = Message(self.TLabelframe41)
        self.Lbl_Tools_Gate_Tip.place(x=55, y=7, height=20, width=808)
        self.Lbl_Tools_Gate_Tip.configure(text='''Message''')
        self.Lbl_Tools_Gate_Tip.configure(textvariable=home_support.vLbl_Tools_Gate_Tip)
        self.Lbl_Tools_Gate_Tip.configure(width=808)

        self.Label31 = Label(self.TLabelframe41)
        self.Label31.place(relx=0.01, rely=0.02, height=34, width=34)
        self.Label31.configure(activebackground="#f9f9f9")
        self._img40 = PhotoImage(file="info_small.png")
        self.Label31.configure(image=self._img40)
        self.Label31.configure(text='''Label''')

        self.TLabelframe12 = ttk.Labelframe(self.TNotebook2_pg5)
        self.TLabelframe12.place(x=0, y=0, height=1, width=1)
        self.TLabelframe12.configure(text='''Output''')
        self.TLabelframe12.configure(width=920)

        self.cpd61_pg3_cpd56_tex64 = Text(self.TLabelframe12)
        self.cpd61_pg3_cpd56_tex64.place(x=0, y=0, height=1, width=1)
        self.cpd61_pg3_cpd56_tex64.configure(background="white")
        self.cpd61_pg3_cpd56_tex64.configure(font="TkTextFont")
        self.cpd61_pg3_cpd56_tex64.configure(selectbackground="#c4c4c4")
        self.cpd61_pg3_cpd56_tex64.configure(width=896)
        self.cpd61_pg3_cpd56_tex64.configure(wrap=WORD)

        self.TNotebook3 = ttk.Notebook(self.TNotebook2_pg5)
        self.TNotebook3.place(x=10, y=10, height=668, width=916)
        self.TNotebook3.configure(width=916)
        self.TNotebook3.configure(takefocus="")
        self.TNotebook3_pg0 = ttk.Frame(self.TNotebook3)
        self.TNotebook3.add(self.TNotebook3_pg0, padding=3)
        self.TNotebook3.tab(0, text="Wordlist analysis (StatsGen)",underline="-1",)
        self.TNotebook3_pg1 = ttk.Frame(self.TNotebook3)
        self.TNotebook3.add(self.TNotebook3_pg1, padding=3)
        self.TNotebook3.tab(1, text="Wordlist analysis (Pipal)",underline="-1",)
        self.TNotebook3_pg2 = ttk.Frame(self.TNotebook3)
        self.TNotebook3.add(self.TNotebook3_pg2, padding=3)
        self.TNotebook3.tab(2, text="Generate masks (MaskGen)",underline="-1",)
        self.TNotebook3_pg3 = ttk.Frame(self.TNotebook3)
        self.TNotebook3.add(self.TNotebook3_pg3, padding=3)
        self.TNotebook3.tab(3, text="Generate policy masks (PolicyGen)",underline="-1",)
        self.TNotebook3_pg4 = ttk.Frame(self.TNotebook3)
        self.TNotebook3.add(self.TNotebook3_pg4, padding=3)
        self.TNotebook3.tab(4, text="Test masks (MaskGen)",underline="-1",)

        self.TLabelframe13 = ttk.Labelframe(self.TNotebook3_pg0)
        self.TLabelframe13.place(x=10, y=3, height=110, width=630)
        self.TLabelframe13.configure(text='''Settings''')
        self.TLabelframe13.configure(width=630)

        self.TLabel11 = ttk.Label(self.TLabelframe13)
        self.TLabel11.place(relx=0.02, rely=0.11, height=16, width=87)
        self.TLabel11.configure(background="#d9d9d9")
        self.TLabel11.configure(foreground="#000000")
        self.TLabel11.configure(relief=FLAT)
        self.TLabel11.configure(text='''Wordlist path:''')

        self.Txt_Ana_Wd_Path = ttk.Entry(self.TLabelframe13)
        self.Txt_Ana_Wd_Path.place(x=110, y=7, height=18, width=424)
        self.Txt_Ana_Wd_Path.configure(takefocus="")
        self.Txt_Ana_Wd_Path.configure(cursor="xterm")

        self.Btn_Ana_Wd_Run = ttk.Button(self.TLabelframe13)
        self.Btn_Ana_Wd_Run.place(relx=0.79, rely=0.57, height=30, width=113)
        self.Btn_Ana_Wd_Run.configure(takefocus="")
        self.Btn_Ana_Wd_Run.configure(text='''Run analysis''')
        self.Btn_Ana_Wd_Run.bind('<Button-1>',lambda event:home_support.Btn_Ana_Wd_Run_Click(self.Txt_Ana_Wd_Path.get(),self.Txt_Ana_Wd_Masks.get(),home_support.vChk_Ana_Wd_Masks.get(),home_support.vChk_Ana_Wd_Rare.get()))

        self.Txt_Ana_Wd_Masks = ttk.Entry(self.TLabelframe13)
        self.Txt_Ana_Wd_Masks.place(x=275, y=39, height=18, width=144)
        self.Txt_Ana_Wd_Masks.configure(takefocus="")
        self.Txt_Ana_Wd_Masks.configure(cursor="xterm")

        self.Btn_Ana_Wd_Browse = ttk.Button(self.TLabelframe13)
        self.Btn_Ana_Wd_Browse.place(relx=0.86, rely=0.06, height=25, width=73)
        self.Btn_Ana_Wd_Browse.configure(takefocus="")
        self.Btn_Ana_Wd_Browse.configure(text='''Browse''')
        self.Btn_Ana_Wd_Browse.bind('<Button-1>',lambda event:home_support.Btn_Ana_Wd_Browse_Click())

        self.Chk_Ana_Wd_Masks = Checkbutton(self.TLabelframe13)
        self.Chk_Ana_Wd_Masks.place(x=5, y=38, height=20, width=257)
        self.Chk_Ana_Wd_Masks.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Wd_Masks.configure(justify=LEFT)
        self.Chk_Ana_Wd_Masks.configure(text='''Save masks under filename (*.masks):''')
        self.Chk_Ana_Wd_Masks.configure(variable=home_support.vChk_Ana_Wd_Masks)

        self.Chk_Ana_Wd_Rare = Checkbutton(self.TLabelframe13)
        self.Chk_Ana_Wd_Rare.place(x=5, y=68, height=20, width=332)
        self.Chk_Ana_Wd_Rare.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Wd_Rare.configure(justify=LEFT)
        self.Chk_Ana_Wd_Rare.configure(text='''Hide statistics covering less than 1% of the sample''')
        self.Chk_Ana_Wd_Rare.configure(variable=home_support.vChk_Ana_Wd_Rare)

        self.Label37 = Label(self.TLabelframe13)
        self.Label37.place(relx=0.54, rely=0.62, height=34, width=34)
        self.Label37.configure(activebackground="#f9f9f9")
        self._img41 = PhotoImage(file="info_small.png")
        self.Label37.configure(image=self._img41)
        self.Label37.configure(text='''Label''')
        self.Label37.bind('<Enter>',lambda e: home_support.Tips_Ana_Wd(1))
        self.Label37.bind('<Leave>',lambda e: home_support.Tips_Ana_Wd(0))

        self.TLabelframe14 = ttk.Labelframe(self.TNotebook3_pg0)
        self.TLabelframe14.place(x=10, y=116, height=460, width=890)
        self.TLabelframe14.configure(text='''Output''')
        self.TLabelframe14.configure(width=890)

        self.Txt_Ana_Wd_Output = ScrolledText(self.TLabelframe14)
        self.Txt_Ana_Wd_Output.place(x=10, y=0, height=432, width=846)
        self.Txt_Ana_Wd_Output.configure(background="black")
        self.Txt_Ana_Wd_Output.configure(font="TkTextFont")
        self.Txt_Ana_Wd_Output.configure(foreground="white")
        self.Txt_Ana_Wd_Output.configure(insertborderwidth="3")
        self.Txt_Ana_Wd_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Ana_Wd_Output.configure(width=10)
        self.Txt_Ana_Wd_Output.configure(wrap=NONE)

        self.Label48 = Label(self.TLabelframe14)
        self.Label48.place(relx=0.97, rely=0.0, height=18, width=18)
        self.Label48.configure(activebackground="#f9f9f9")
        self._img42 = PhotoImage(file="delete.png")
        self.Label48.configure(image=self._img42)
        self.Label48.configure(text='''Label''')
        self.Label48.bind('<Button-1>',lambda e: home_support.Btn_Ana_Wd_Output_Delete())

        self.Label49 = Label(self.TLabelframe14)
        self.Label49.place(relx=0.97, rely=0.04, height=18, width=18)
        self.Label49.configure(activebackground="#f9f9f9")
        self._img43 = PhotoImage(file="clipboard.png")
        self.Label49.configure(image=self._img43)
        self.Label49.configure(text='''Label''')
        self.Label49.bind('<Button-1>',lambda e: home_support.Btn_Ana_Wd_Output_Copy())

        self.TLabelframe15 = ttk.Labelframe(self.TNotebook3_pg0)
        self.TLabelframe15.place(x=650, y=3, height=110, width=250)
        self.TLabelframe15.configure(text='''Legend''')
        self.TLabelframe15.configure(width=250)

        self.Label3 = Label(self.TLabelframe15)
        self.Label3.place(relx=0.08, rely=0.13, height=60, width=205)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(justify=LEFT)
        self.Label3.configure(text='''?l - a single lowercase character
?u - a single uppercase character
?d - a single digit
?s - a single special character''')

        self.TLabelframe42 = ttk.Labelframe(self.TNotebook3_pg0)
        self.TLabelframe42.place(x=10, y=579, height=55, width=890)
        self.TLabelframe42.configure(text='''Information''')
        self.TLabelframe42.configure(width=877)

        self.Lbl_Ana_Wd_Tip = Message(self.TLabelframe42)
        self.Lbl_Ana_Wd_Tip.place(x=55, y=7, height=20, width=808)
        self.Lbl_Ana_Wd_Tip.configure(text='''Message''')
        self.Lbl_Ana_Wd_Tip.configure(textvariable=home_support.vLbl_Ana_Wd_Tip)
        self.Lbl_Ana_Wd_Tip.configure(width=808)

        self.Label38 = Label(self.TLabelframe42)
        self.Label38.place(relx=0.01, rely=0.0, height=34, width=34)
        self.Label38.configure(activebackground="#f9f9f9")
        self._img44 = PhotoImage(file="info_small.png")
        self.Label38.configure(image=self._img44)
        self.Label38.configure(text='''Label''')

        self.TLabelframe31 = ttk.Labelframe(self.TNotebook3_pg1)
        self.TLabelframe31.place(x=10, y=11, height=75, width=890)
        self.TLabelframe31.configure(text='''Settings''')
        self.TLabelframe31.configure(width=890)

        self.TLabel40 = ttk.Label(self.TLabelframe31)
        self.TLabel40.place(relx=0.01, rely=0.13, height=16, width=87)
        self.TLabel40.configure(background="#d9d9d9")
        self.TLabel40.configure(foreground="#000000")
        self.TLabel40.configure(relief=FLAT)
        self.TLabel40.configure(text='''Wordlist path:''')

        self.Txt_Ana2_Wd_Path = ttk.Entry(self.TLabelframe31)
        self.Txt_Ana2_Wd_Path.place(x=110, y=3, height=18, width=569)
        self.Txt_Ana2_Wd_Path.configure(takefocus="")
        self.Txt_Ana2_Wd_Path.configure(cursor="xterm")

        self.Btn_Ana2_Wd_Run = ttk.Button(self.TLabelframe31)
        self.Btn_Ana2_Wd_Run.place(relx=0.86, rely=0.4, height=25, width=113)
        self.Btn_Ana2_Wd_Run.configure(takefocus="")
        self.Btn_Ana2_Wd_Run.configure(text='''Run analysis''')
        self.Btn_Ana2_Wd_Run.bind('<Button-1>',lambda event:home_support.Btn_Ana2_Wd_Run_Click(self.Txt_Ana2_Wd_Path.get(),self.Txt_Ana2_Wd_Out.get(),home_support.vChk_Ana2_Wd_Out.get()))

        self.Txt_Ana2_Wd_Out = ttk.Entry(self.TLabelframe31)
        self.Txt_Ana2_Wd_Out.place(x=170, y=33, height=18, width=144)
        self.Txt_Ana2_Wd_Out.configure(takefocus="")
        self.Txt_Ana2_Wd_Out.configure(cursor="xterm")

        self.Btn_Ana2_Wd_Browse = ttk.Button(self.TLabelframe31)
        self.Btn_Ana2_Wd_Browse.place(relx=0.77, rely=-0.01, height=25, width=73)

        self.Btn_Ana2_Wd_Browse.configure(takefocus="")
        self.Btn_Ana2_Wd_Browse.configure(text='''Browse''')
        self.Btn_Ana2_Wd_Browse.bind('<Button-1>',lambda event:home_support.Btn_Ana2_Wd_Browse_Click())

        self.Chk_Ana2_Wd_Out = Checkbutton(self.TLabelframe31)
        self.Chk_Ana2_Wd_Out.place(x=5, y=33, height=20, width=157)
        self.Chk_Ana2_Wd_Out.configure(activebackground="#d9d9d9")
        self.Chk_Ana2_Wd_Out.configure(justify=LEFT)
        self.Chk_Ana2_Wd_Out.configure(text='''Save output report to:''')
        self.Chk_Ana2_Wd_Out.configure(variable=home_support.vChk_Ana2_Wd_Out)

        self.TLabelframe33 = ttk.Labelframe(self.TNotebook3_pg1)
        self.TLabelframe33.place(x=10, y=95, height=540, width=890)
        self.TLabelframe33.configure(text='''Output''')
        self.TLabelframe33.configure(width=890)

        self.Txt_Ana2_Wd_Output = ScrolledText(self.TLabelframe33)
        self.Txt_Ana2_Wd_Output.place(x=10, y=0, height=517, width=846)
        self.Txt_Ana2_Wd_Output.configure(background="black")
        self.Txt_Ana2_Wd_Output.configure(font="TkTextFont")
        self.Txt_Ana2_Wd_Output.configure(foreground="white")
        self.Txt_Ana2_Wd_Output.configure(insertborderwidth="3")
        self.Txt_Ana2_Wd_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Ana2_Wd_Output.configure(width=10)
        self.Txt_Ana2_Wd_Output.configure(wrap=NONE)

        self.Label46 = Label(self.TLabelframe33)
        self.Label46.place(relx=0.97, rely=0.01, height=18, width=18)
        self.Label46.configure(activebackground="#f9f9f9")
        self._img45 = PhotoImage(file="delete.png")
        self.Label46.configure(image=self._img45)
        self.Label46.configure(text='''Label''')
        self.Label46.bind('<Button-1>',lambda e: home_support.Btn_Ana2_Wd_Output_Delete())

        self.Label47 = Label(self.TLabelframe33)
        self.Label47.place(relx=0.97, rely=0.05, height=18, width=18)
        self.Label47.configure(activebackground="#f9f9f9")
        self._img46 = PhotoImage(file="clipboard.png")
        self.Label47.configure(image=self._img46)
        self.Label47.configure(text='''Label''')
        self.Label47.bind('<Button-1>',lambda e: home_support.Btn_Ana2_Wd_Output_Copy())

        self.TLabelframe16 = ttk.Labelframe(self.TNotebook3_pg2)
        self.TLabelframe16.place(x=10, y=10, height=295, width=890)
        self.TLabelframe16.configure(text='''Settings''')
        self.TLabelframe16.configure(width=890)

        self.TLabel20 = ttk.Label(self.TLabelframe16)
        self.TLabel20.place(relx=0.01, rely=0.04, height=16, width=127)
        self.TLabel20.configure(background="#d9d9d9")
        self.TLabel20.configure(foreground="#000000")
        self.TLabel20.configure(relief=FLAT)
        self.TLabel20.configure(text='''Statsgen masks file:''')

        self.Txt_Ana_Masks_Path = ttk.Entry(self.TLabelframe16)
        self.Txt_Ana_Masks_Path.place(x=140, y=9, height=18, width=644)
        self.Txt_Ana_Masks_Path.configure(takefocus="")
        self.Txt_Ana_Masks_Path.configure(cursor="xterm")

        self.Btn_Ana_Masks_Run = ttk.Button(self.TLabelframe16)
        self.Btn_Ana_Masks_Run.place(relx=0.85, rely=0.83, height=35, width=113)
        self.Btn_Ana_Masks_Run.configure(takefocus="")
        self.Btn_Ana_Masks_Run.configure(text='''Run MaskGen''')
        self.Btn_Ana_Masks_Run.bind('<Button-1>',lambda event:home_support.Btn_Ana_Masks_Run_Click(self.Txt_Ana_Masks_Path.get(),home_support.vChk_Ana_Masks_Sort.get(),home_support.vChk_Ana_Masks_OutputFN.get(),self.Txt_Ana_Masks_OutputFN.get(),home_support.vChk_Ana_Masks_Target.get(),self.Txt_Ana_Masks_Target.get(),home_support.vChk_Ana_Masks_Speed.get(),self.Txt_Ana_Masks_Speed.get(),home_support.vChk_Ana_Masks_MinLen.get(),self.Txt_Ana_Masks_MinLen.get(),home_support.vChk_Ana_Masks_MaxLen.get(),self.Txt_Ana_Masks_MaxLen.get(),home_support.vChk_Ana_Masks_MinRun.get(),self.Txt_Ana_Masks_MinRun.get(),home_support.vChk_Ana_Masks_MaxRun.get(),self.Txt_Ana_Masks_MaxRun.get(),home_support.vChk_Ana_Masks_MinOcc.get(),self.Txt_Ana_Masks_MinOcc.get(),home_support.vChk_Ana_Masks_MaxOcc.get(),self.Txt_Ana_Masks_MaxOcc.get()))

        self.Txt_Ana_Masks_Target = ttk.Entry(self.TLabelframe16)
        self.Txt_Ana_Masks_Target.place(x=220, y=85, height=18, width=34)
        self.Txt_Ana_Masks_Target.configure(takefocus="")
        self.Txt_Ana_Masks_Target.configure(cursor="xterm")

        self.Btn_Ana_Masks_Browse = ttk.Button(self.TLabelframe16)
        self.Btn_Ana_Masks_Browse.place(relx=0.9, rely=0.02, height=25, width=73)

        self.Btn_Ana_Masks_Browse.configure(takefocus="")
        self.Btn_Ana_Masks_Browse.configure(text='''Browse''')
        self.Btn_Ana_Masks_Browse.bind('<Button-1>',lambda event:home_support.Btn_Ana_Masks_Browse_Click())

        self.Txt_Ana_Masks_Speed = ttk.Entry(self.TLabelframe16)
        self.Txt_Ana_Masks_Speed.place(x=440, y=112, height=18, width=94)
        self.Txt_Ana_Masks_Speed.configure(takefocus="")
        self.Txt_Ana_Masks_Speed.configure(cursor="xterm")

        self.Btn_Ana_Masks_Speed = ttk.Button(self.TLabelframe16)
        self.Btn_Ana_Masks_Speed.place(relx=0.62, rely=0.39, height=25
                , width=133)
        self.Btn_Ana_Masks_Speed.configure(takefocus="")
        self.Btn_Ana_Masks_Speed.configure(text='''Go to Speed Test''')
        self.Btn_Ana_Masks_Speed.bind('<Button-1>',lambda event:home_support.Btn_Ana_Masks_Speed_Click())

        self.TLabelframe17 = ttk.Labelframe(self.TLabelframe16)
        self.TLabelframe17.place(x=10, y=139, height=130, width=540)
        self.TLabelframe17.configure(text='''Filters''')
        self.TLabelframe17.configure(width=540)

        self.Txt_Ana_Masks_MinLen = ttk.Entry(self.TLabelframe17)
        self.Txt_Ana_Masks_MinLen.place(x=185, y=6, height=18, width=34)
        self.Txt_Ana_Masks_MinLen.configure(takefocus="")
        self.Txt_Ana_Masks_MinLen.configure(cursor="xterm")

        self.Txt_Ana_Masks_MaxLen = ttk.Entry(self.TLabelframe17)
        self.Txt_Ana_Masks_MaxLen.place(x=185, y=30, height=18, width=34)
        self.Txt_Ana_Masks_MaxLen.configure(takefocus="")
        self.Txt_Ana_Masks_MaxLen.configure(cursor="xterm")

        self.Txt_Ana_Masks_MaxRun = ttk.Entry(self.TLabelframe17)
        self.Txt_Ana_Masks_MaxRun.place(x=220, y=83, height=18, width=34)
        self.Txt_Ana_Masks_MaxRun.configure(takefocus="")
        self.Txt_Ana_Masks_MaxRun.configure(cursor="xterm")

        self.Txt_Ana_Masks_MinRun = ttk.Entry(self.TLabelframe17)
        self.Txt_Ana_Masks_MinRun.place(x=220, y=60, height=18, width=34)
        self.Txt_Ana_Masks_MinRun.configure(takefocus="")
        self.Txt_Ana_Masks_MinRun.configure(cursor="xterm")

        self.Txt_Ana_Masks_MinOcc = ttk.Entry(self.TLabelframe17)
        self.Txt_Ana_Masks_MinOcc.place(x=485, y=5, height=18, width=34)
        self.Txt_Ana_Masks_MinOcc.configure(takefocus="")
        self.Txt_Ana_Masks_MinOcc.configure(cursor="xterm")

        self.Txt_Ana_Masks_MaxOcc = ttk.Entry(self.TLabelframe17)
        self.Txt_Ana_Masks_MaxOcc.place(x=485, y=29, height=18, width=34)
        self.Txt_Ana_Masks_MaxOcc.configure(takefocus="")
        self.Txt_Ana_Masks_MaxOcc.configure(cursor="xterm")

        self.Chk_Ana_Masks_Sort = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_Sort.place(x=5, y=36, height=20, width=253)
        self.Chk_Ana_Masks_Sort.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_Sort.configure(justify=LEFT)
        self.Chk_Ana_Masks_Sort.configure(text='''Sort masks by relevance (cf. analysis)''')
        self.Chk_Ana_Masks_Sort.configure(variable=home_support.vChk_Ana_Masks_Sort)

        self.Chk_Ana_Masks_Target = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_Target.place(x=5, y=86, height=20, width=196)
        self.Chk_Ana_Masks_Target.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_Target.configure(justify=LEFT)
        self.Chk_Ana_Masks_Target.configure(text='''Specify a target time (secs):''')
        self.Chk_Ana_Masks_Target.configure(variable=home_support.vChk_Ana_Masks_Target)

        self.Chk_Ana_Masks_Speed = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_Speed.place(x=5, y=111, height=20, width=429)
        self.Chk_Ana_Masks_Speed.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_Speed.configure(justify=LEFT)
        self.Chk_Ana_Masks_Speed.configure(text='''Specify an average speed (password/secs) - depends of hardware :''')
        self.Chk_Ana_Masks_Speed.configure(variable=home_support.vChk_Ana_Masks_Speed)

        self.Chk_Ana_Masks_MinLen = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_MinLen.place(x=15, y=159, height=20, width=175)
        self.Chk_Ana_Masks_MinLen.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_MinLen.configure(justify=LEFT)
        self.Chk_Ana_Masks_MinLen.configure(text='''Minimum length (chars):''')
        self.Chk_Ana_Masks_MinLen.configure(variable=home_support.vChk_Ana_Masks_MinLen)

        self.Chk_Ana_Masks_MaxLen = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_MaxLen.place(x=15, y=185, height=20, width=178)
        self.Chk_Ana_Masks_MaxLen.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_MaxLen.configure(justify=LEFT)
        self.Chk_Ana_Masks_MaxLen.configure(text='''Maximum length (chars):''')
        self.Chk_Ana_Masks_MaxLen.configure(variable=home_support.vChk_Ana_Masks_MaxLen)

        self.Chk_Ana_Masks_MinRun = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_MinRun.place(x=15, y=214, height=20, width=213)
        self.Chk_Ana_Masks_MinRun.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_MinRun.configure(justify=LEFT)
        self.Chk_Ana_Masks_MinRun.configure(text='''Minimum mask runtime (secs):''')
        self.Chk_Ana_Masks_MinRun.configure(variable=home_support.vChk_Ana_Masks_MinRun)

        self.Chk_Ana_Masks_MaxRun = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_MaxRun.place(x=15, y=237, height=20, width=216)
        self.Chk_Ana_Masks_MaxRun.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_MaxRun.configure(justify=LEFT)
        self.Chk_Ana_Masks_MaxRun.configure(text='''Maximum mask runtime (secs):''')
        self.Chk_Ana_Masks_MaxRun.configure(variable=home_support.vChk_Ana_Masks_MaxRun)

        self.Chk_Ana_Masks_MinOcc = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_MinOcc.place(x=285, y=160, height=20, width=202)
        self.Chk_Ana_Masks_MinOcc.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_MinOcc.configure(justify=LEFT)
        self.Chk_Ana_Masks_MinOcc.configure(text='''Minimum occurence (0-100):''')
        self.Chk_Ana_Masks_MinOcc.configure(variable=home_support.vChk_Ana_Masks_MinOcc)

        self.Chk_Ana_Masks_MaxOcc = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_MaxOcc.place(x=285, y=184, height=20, width=205)
        self.Chk_Ana_Masks_MaxOcc.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_MaxOcc.configure(justify=LEFT)
        self.Chk_Ana_Masks_MaxOcc.configure(text='''Maximum occurence (0-100):''')
        self.Chk_Ana_Masks_MaxOcc.configure(variable=home_support.vChk_Ana_Masks_MaxOcc)

        self.Chk_Ana_Masks_OutputFN = Checkbutton(self.TLabelframe16)
        self.Chk_Ana_Masks_OutputFN.place(x=5, y=62, height=20, width=221)
        self.Chk_Ana_Masks_OutputFN.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Masks_OutputFN.configure(justify=LEFT)
        self.Chk_Ana_Masks_OutputFN.configure(text='''Save Hashcat masks (*.hcmask):''')
        self.Chk_Ana_Masks_OutputFN.configure(variable=home_support.vChk_Ana_Masks_OutputFN)

        self.Txt_Ana_Masks_OutputFN = ttk.Entry(self.TLabelframe16)
        self.Txt_Ana_Masks_OutputFN.place(x=235, y=61, height=18, width=189)
        self.Txt_Ana_Masks_OutputFN.configure(takefocus="")
        self.Txt_Ana_Masks_OutputFN.configure(cursor="xterm")

        self.TLabelframe18 = ttk.Labelframe(self.TNotebook3_pg2)
        self.TLabelframe18.place(x=10, y=310, height=315, width=890)
        self.TLabelframe18.configure(text='''Output''')
        self.TLabelframe18.configure(width=890)

        self.Txt_Ana_Masks_Output = ScrolledText(self.TLabelframe18)
        self.Txt_Ana_Masks_Output.place(x=10, y=0, height=287, width=846)
        self.Txt_Ana_Masks_Output.configure(background="black")
        self.Txt_Ana_Masks_Output.configure(font="TkTextFont")
        self.Txt_Ana_Masks_Output.configure(foreground="white")
        self.Txt_Ana_Masks_Output.configure(insertborderwidth="3")
        self.Txt_Ana_Masks_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Ana_Masks_Output.configure(width=10)
        self.Txt_Ana_Masks_Output.configure(wrap=NONE)

        self.Label50 = Label(self.TLabelframe18)
        self.Label50.place(relx=0.97, rely=0.02, height=18, width=18)
        self.Label50.configure(activebackground="#f9f9f9")
        self._img47 = PhotoImage(file="delete.png")
        self.Label50.configure(image=self._img47)
        self.Label50.configure(text='''Label''')
        self.Label50.bind('<Button-1>',lambda e: home_support.Btn_Ana_Masks_Output_Delete())

        self.Label51 = Label(self.TLabelframe18)
        self.Label51.place(relx=0.97, rely=0.09, height=18, width=18)
        self.Label51.configure(activebackground="#f9f9f9")
        self._img48 = PhotoImage(file="clipboard.png")
        self.Label51.configure(image=self._img48)
        self.Label51.configure(text='''Label''')
        self.Label51.bind('<Button-1>',lambda e: home_support.Btn_Ana_Masks_Output_Copy())

        self.TLabelframe21 = ttk.Labelframe(self.TNotebook3_pg3)
        self.TLabelframe21.place(x=10, y=10, height=210, width=890)
        self.TLabelframe21.configure(text='''Settings''')
        self.TLabelframe21.configure(width=890)

        self.Btn_Ana_Pol_Run = ttk.Button(self.TLabelframe21)
        self.Btn_Ana_Pol_Run.place(relx=0.87, rely=0.77, height=35, width=103)
        self.Btn_Ana_Pol_Run.configure(takefocus="")
        self.Btn_Ana_Pol_Run.configure(text='''Run PolicyGen''')
        self.Btn_Ana_Pol_Run.bind('<Button-1>',lambda event:home_support.Btn_Ana_Pol_Run_Click(self.Txt_Ana_Pol_OutputFN.get(),home_support.vChk_Ana_Pol_MinLen.get(),self.Txt_Ana_Pol_MinLen.get(),home_support.vChk_Ana_Pol_MaxLen.get(),self.Txt_Ana_Pol_MaxLen.get(),home_support.vChk_Ana_Pol_MinLow.get(),self.Txt_Ana_Pol_MinLow.get(),home_support.vChk_Ana_Pol_MaxLow.get(),self.Txt_Ana_Pol_MaxLow.get(),home_support.vChk_Ana_Pol_MinUp.get(),self.Txt_Ana_Pol_MinUp.get(),home_support.vChk_Ana_Pol_MaxUp.get(),self.Txt_Ana_Pol_MaxUp.get(),home_support.vChk_Ana_Pol_MinDigit.get(),self.Txt_Ana_Pol_MinDigit.get(),home_support.vChk_Ana_Pol_MaxDigit.get(),self.Txt_Ana_Pol_MaxDigit.get(),home_support.vChk_Ana_Pol_MinSym.get(),self.Txt_Ana_Pol_MinSym.get(),home_support.vChk_Ana_Pol_MaxSym.get(),self.Txt_Ana_Pol_MaxSym.get(),home_support.vChk_Ana_Pol_Speed.get(),self.Txt_Ana_Pol_Speed.get()))

        self.TLabel23 = ttk.Label(self.TLabelframe21)
        self.TLabel23.place(relx=0.02, rely=0.02, height=16, width=242)
        self.TLabel23.configure(background="#d9d9d9")
        self.TLabel23.configure(foreground="#000000")
        self.TLabel23.configure(relief=FLAT)
        self.TLabel23.configure(text='''Ouput Hashcat masks file (*.hcmasks):''')

        self.Txt_Ana_Pol_OutputFN = ttk.Entry(self.TLabelframe21)
        self.Txt_Ana_Pol_OutputFN.place(x=260, y=1, height=18, width=144)
        self.Txt_Ana_Pol_OutputFN.configure(takefocus="")
        self.Txt_Ana_Pol_OutputFN.configure(cursor="xterm")

        self.vChk_Ana_Pol_Speed = Checkbutton(self.TLabelframe21)
        self.vChk_Ana_Pol_Speed.place(x=10, y=28, height=20, width=421)
        self.vChk_Ana_Pol_Speed.configure(activebackground="#d9d9d9")
        self.vChk_Ana_Pol_Speed.configure(justify=LEFT)
        self.vChk_Ana_Pol_Speed.configure(text='''Specify an average speed (password/secs) - depends of hardware :''')
        self.vChk_Ana_Pol_Speed.configure(variable=home_support.vChk_Ana_Pol_Speed)

        self.Txt_Ana_Pol_Speed = ttk.Entry(self.TLabelframe21)
        self.Txt_Ana_Pol_Speed.place(x=440, y=28, height=18, width=94)
        self.Txt_Ana_Pol_Speed.configure(takefocus="")
        self.Txt_Ana_Pol_Speed.configure(cursor="xterm")

        self.Btn_Ana_Pol_Speed = ttk.Button(self.TLabelframe21)
        self.Btn_Ana_Pol_Speed.place(relx=0.62, rely=0.12, height=25, width=133)
        self.Btn_Ana_Pol_Speed.configure(takefocus="")
        self.Btn_Ana_Pol_Speed.configure(text='''Go to Speed Test''')
        self.Btn_Ana_Pol_Speed.bind('<Button-1>',lambda event:home_support.Btn_Ana_Masks_Speed_Click())

        self.TLabelframe43 = ttk.Labelframe(self.TLabelframe21)
        self.TLabelframe43.place(x=15, y=55, height=130, width=750)
        self.TLabelframe43.configure(text='''Filters''')
        self.TLabelframe43.configure(width=750)

        self.Chk_Ana_Pol_MinLen = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MinLen.place(x=0, y=6, height=20, width=175)
        self.Chk_Ana_Pol_MinLen.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MinLen.configure(justify=LEFT)
        self.Chk_Ana_Pol_MinLen.configure(text='''Minimum length (chars):''')
        self.Chk_Ana_Pol_MinLen.configure(variable=home_support.vChk_Ana_Pol_MinLen)

        self.Txt_Ana_Pol_MinLen = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MinLen.place(x=200, y=7, height=18, width=34)
        self.Txt_Ana_Pol_MinLen.configure(takefocus="")
        self.Txt_Ana_Pol_MinLen.configure(cursor="xterm")

        self.Chk_Ana_Pol_MaxLen = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MaxLen.place(x=0, y=29, height=20, width=178)
        self.Chk_Ana_Pol_MaxLen.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MaxLen.configure(justify=LEFT)
        self.Chk_Ana_Pol_MaxLen.configure(text='''Maximum length (chars):''')
        self.Chk_Ana_Pol_MaxLen.configure(variable=home_support.vChk_Ana_Pol_MaxLen)

        self.Txt_Ana_Pol_MaxLen = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MaxLen.place(x=200, y=30, height=18, width=34)
        self.Txt_Ana_Pol_MaxLen.configure(takefocus="")
        self.Txt_Ana_Pol_MaxLen.configure(cursor="xterm")

        self.Chk_Ana_Pol_MinLow = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MinLow.place(x=0, y=62, height=20, width=195)
        self.Chk_Ana_Pol_MinLow.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MinLow.configure(justify=LEFT)
        self.Chk_Ana_Pol_MinLow.configure(text='''Minimum lowercase (chars):''')
        self.Chk_Ana_Pol_MinLow.configure(variable=home_support.vChk_Ana_Pol_MinLow)

        self.Chk_Ana_Pol_MaxLow = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MaxLow.place(x=0, y=84, height=20, width=198)
        self.Chk_Ana_Pol_MaxLow.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MaxLow.configure(justify=LEFT)
        self.Chk_Ana_Pol_MaxLow.configure(text='''Maximum lowercase (chars):''')
        self.Chk_Ana_Pol_MaxLow.configure(variable=home_support.vChk_Ana_Pol_MaxLow)

        self.Txt_Ana_Pol_MinLow = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MinLow.place(x=200, y=63, height=18, width=34)
        self.Txt_Ana_Pol_MinLow.configure(takefocus="")
        self.Txt_Ana_Pol_MinLow.configure(cursor="xterm")

        self.Txt_Ana_Pol_MaxLow = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MaxLow.place(x=200, y=85, height=18, width=34)
        self.Txt_Ana_Pol_MaxLow.configure(takefocus="")
        self.Txt_Ana_Pol_MaxLow.configure(cursor="xterm")

        self.Chk_Ana_Pol_MinUp1 = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MinUp1.place(x=250, y=7, height=20, width=199)
        self.Chk_Ana_Pol_MinUp1.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MinUp1.configure(justify=LEFT)
        self.Chk_Ana_Pol_MinUp1.configure(text='''Minimum uppercase (chars):''')
        self.Chk_Ana_Pol_MinUp1.configure(variable=home_support.vChk_Ana_Pol_MinUp)

        self.Chk_Ana_Pol_MaxUp = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MaxUp.place(x=250, y=29, height=20, width=202)
        self.Chk_Ana_Pol_MaxUp.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MaxUp.configure(justify=LEFT)
        self.Chk_Ana_Pol_MaxUp.configure(text='''Maximum uppercase (chars):''')
        self.Chk_Ana_Pol_MaxUp.configure(variable=home_support.vChk_Ana_Pol_MaxUp)

        self.Txt_Ana_Pol_MinUp = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MinUp.place(x=455, y=8, height=18, width=34)
        self.Txt_Ana_Pol_MinUp.configure(takefocus="")
        self.Txt_Ana_Pol_MinUp.configure(cursor="xterm")

        self.Txt_Ana_Pol_MaxUp = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MaxUp.place(x=455, y=30, height=18, width=34)
        self.Txt_Ana_Pol_MaxUp.configure(takefocus="")
        self.Txt_Ana_Pol_MaxUp.configure(cursor="xterm")

        self.Chk_Ana_Pol_MinDigit = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MinDigit.place(x=250, y=62, height=20, width=169)
        self.Chk_Ana_Pol_MinDigit.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MinDigit.configure(justify=LEFT)
        self.Chk_Ana_Pol_MinDigit.configure(text='''Minimum digits (chars):''')
        self.Chk_Ana_Pol_MinDigit.configure(variable=home_support.vChk_Ana_Pol_MinDigit)

        self.Chk_Ana_Pol_MaxDigit = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MaxDigit.place(x=250, y=85, height=20, width=172)
        self.Chk_Ana_Pol_MaxDigit.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MaxDigit.configure(justify=LEFT)
        self.Chk_Ana_Pol_MaxDigit.configure(text='''Maximum digits (chars):''')
        self.Chk_Ana_Pol_MaxDigit.configure(variable=home_support.vChk_Ana_Pol_MaxDigit)

        self.Txt_Ana_Pol_MinDigit = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MinDigit.place(x=455, y=65, height=18, width=34)
        self.Txt_Ana_Pol_MinDigit.configure(takefocus="")
        self.Txt_Ana_Pol_MinDigit.configure(cursor="xterm")

        self.Txt_Ana_Pol_MaxDigit = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MaxDigit.place(x=455, y=86, height=18, width=34)
        self.Txt_Ana_Pol_MaxDigit.configure(takefocus="")
        self.Txt_Ana_Pol_MaxDigit.configure(cursor="xterm")

        self.Chk_Ana_Pol_MinSym = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MinSym.place(x=505, y=6, height=20, width=185)
        self.Chk_Ana_Pol_MinSym.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MinSym.configure(justify=LEFT)
        self.Chk_Ana_Pol_MinSym.configure(text='''Minimum symbols (chars):''')
        self.Chk_Ana_Pol_MinSym.configure(variable=home_support.vChk_Ana_Pol_MinSym)

        self.Chk_Ana_Pol_MaxSym = Checkbutton(self.TLabelframe43)
        self.Chk_Ana_Pol_MaxSym.place(x=505, y=28, height=20, width=188)
        self.Chk_Ana_Pol_MaxSym.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Pol_MaxSym.configure(justify=LEFT)
        self.Chk_Ana_Pol_MaxSym.configure(text='''Maximum symbols (chars):''')
        self.Chk_Ana_Pol_MaxSym.configure(variable=home_support.vChk_Ana_Pol_MaxSym)

        self.Txt_Ana_Pol_MinSym = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MinSym.place(x=700, y=7, height=18, width=34)
        self.Txt_Ana_Pol_MinSym.configure(takefocus="")
        self.Txt_Ana_Pol_MinSym.configure(cursor="xterm")

        self.Txt_Ana_Pol_MaxSym = ttk.Entry(self.TLabelframe43)
        self.Txt_Ana_Pol_MaxSym.place(x=700, y=30, height=18, width=34)
        self.Txt_Ana_Pol_MaxSym.configure(takefocus="")
        self.Txt_Ana_Pol_MaxSym.configure(cursor="xterm")

        self.Label39 = Label(self.TLabelframe43)
        self.Label39.place(relx=1.15, rely=0.55, height=18, width=18)
        self.Label39.configure(activebackground="#f9f9f9")
        self._img49 = PhotoImage(file="delete.png")
        self.Label39.configure(image=self._img49)
        self.Label39.configure(text='''Label''')
        self.Label39.bind('<Button-1>',lambda e: home_support.Btn_Gen_Output_Delete())

        self.TLabelframe22 = ttk.Labelframe(self.TNotebook3_pg3)
        self.TLabelframe22.place(x=10, y=225, height=405, width=890)
        self.TLabelframe22.configure(text='''Output''')
        self.TLabelframe22.configure(width=890)

        self.Txt_Ana_Pol_Output = ScrolledText(self.TLabelframe22)
        self.Txt_Ana_Pol_Output.place(x=5, y=0, height=373, width=853)
        self.Txt_Ana_Pol_Output.configure(background="black")
        self.Txt_Ana_Pol_Output.configure(font=self.font7)
        self.Txt_Ana_Pol_Output.configure(foreground="white")
        self.Txt_Ana_Pol_Output.configure(insertborderwidth="3")
        self.Txt_Ana_Pol_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Ana_Pol_Output.configure(width=10)
        self.Txt_Ana_Pol_Output.configure(wrap=NONE)

        self.Label52 = Label(self.TLabelframe22)
        self.Label52.place(relx=0.97, rely=0.07, height=18, width=18)
        self.Label52.configure(activebackground="#f9f9f9")
        self._img50 = PhotoImage(file="clipboard.png")
        self.Label52.configure(image=self._img50)
        self.Label52.configure(text='''Label''')
        self.Label52.bind('<Button-1>',lambda e: home_support.Btn_Ana_Pol_Output_Copy())

        self.Label53 = Label(self.TLabelframe22)
        self.Label53.place(relx=0.97, rely=0.01, height=18, width=18)
        self.Label53.configure(activebackground="#f9f9f9")
        self._img51 = PhotoImage(file="delete.png")
        self.Label53.configure(image=self._img51)
        self.Label53.configure(text='''Label''')
        self.Label53.bind('<Button-1>',lambda e: home_support.Btn_Ana_Pol_Output_Delete())

        self.TLabelframe19 = ttk.Labelframe(self.TNotebook3_pg4)
        self.TLabelframe19.place(x=10, y=10, height=135, width=890)
        self.TLabelframe19.configure(text='''Settings''')
        self.TLabelframe19.configure(width=890)

        self.TLabel21 = ttk.Label(self.TLabelframe19)
        self.TLabel21.place(relx=0.01, rely=0.11, height=16, width=347)
        self.TLabel21.configure(background="#d9d9d9")
        self.TLabel21.configure(foreground="#000000")
        self.TLabel21.configure(relief=FLAT)
        self.TLabel21.configure(text='''Mask file path (obtained from Statsgen):''')

        self.TLabel22 = ttk.Label(self.TLabelframe19)
        self.TLabel22.place(relx=0.01, rely=0.33, height=16, width=337)
        self.TLabel22.configure(background="#d9d9d9")
        self.TLabel22.configure(foreground="#000000")
        self.TLabel22.configure(relief=FLAT)
        self.TLabel22.configure(text='''Hashcat mask file path (obtained from Maskgen):''')

        self.Txt_Ana_Test_Path1 = ttk.Entry(self.TLabelframe19)
        self.Txt_Ana_Test_Path1.place(x=340, y=11, height=18, width=444)
        self.Txt_Ana_Test_Path1.configure(takefocus="")
        self.Txt_Ana_Test_Path1.configure(cursor="xterm")

        self.Txt_Ana_Test_Path2 = ttk.Entry(self.TLabelframe19)
        self.Txt_Ana_Test_Path2.place(x=340, y=40, height=18, width=444)
        self.Txt_Ana_Test_Path2.configure(takefocus="")
        self.Txt_Ana_Test_Path2.configure(cursor="xterm")

        self.Btn_Ana_Test_Browse1 = ttk.Button(self.TLabelframe19)
        self.Btn_Ana_Test_Browse1.place(relx=0.89, rely=0.07, height=25
                , width=83)
        self.Btn_Ana_Test_Browse1.configure(takefocus="")
        self.Btn_Ana_Test_Browse1.configure(text='''Browse''')
        self.Btn_Ana_Test_Browse1.bind('<Button-1>',lambda event:home_support.Btn_Ana_Test_Browse1_Click())

        self.Btn_Ana_Test_Browse2 = ttk.Button(self.TLabelframe19)
        self.Btn_Ana_Test_Browse2.place(relx=0.89, rely=0.3, height=25, width=83)

        self.Btn_Ana_Test_Browse2.configure(takefocus="")
        self.Btn_Ana_Test_Browse2.configure(text='''Browse''')
        self.Btn_Ana_Test_Browse2.bind('<Button-1>',lambda event:home_support.Btn_Ana_Test_Browse2_Click())

        self.Btn_Ana_Test_Run = ttk.Button(self.TLabelframe19)
        self.Btn_Ana_Test_Run.place(relx=0.86, rely=0.59, height=35, width=113)
        self.Btn_Ana_Test_Run.configure(takefocus="")
        self.Btn_Ana_Test_Run.configure(text='''Check coverage''')
        self.Btn_Ana_Test_Run.bind('<Button-1>',lambda event:home_support.Btn_Ana_Test_Run_Click(self.Txt_Ana_Test_Path1.get(),self.Txt_Ana_Test_Path2.get(),self.Txt_Ana_Test_Manual.get(),home_support.vChk_Ana_Test_Manual.get()))

        self.Txt_Ana_Test_Manual = ttk.Entry(self.TLabelframe19)
        self.Txt_Ana_Test_Manual.place(x=340, y=73, height=18, width=314)
        self.Txt_Ana_Test_Manual.configure(takefocus="")
        self.Txt_Ana_Test_Manual.configure(cursor="xterm")

        self.Chk_Ana_Test_Manual = Checkbutton(self.TLabelframe19)
        self.Chk_Ana_Test_Manual.place(x=5, y=72, height=20, width=329)
        self.Chk_Ana_Test_Manual.configure(activebackground="#d9d9d9")
        self.Chk_Ana_Test_Manual.configure(justify=LEFT)
        self.Chk_Ana_Test_Manual.configure(text='''or check mask file against a mask input manually:''')
        self.Chk_Ana_Test_Manual.configure(variable=home_support.vChk_Ana_Test_Manual)

        self.TLabelframe20 = ttk.Labelframe(self.TNotebook3_pg4)
        self.TLabelframe20.place(x=10, y=150, height=475, width=890)
        self.TLabelframe20.configure(text='''Output''')
        self.TLabelframe20.configure(width=890)

        self.Txt_Ana_Test_Output = ScrolledText(self.TLabelframe20)
        self.Txt_Ana_Test_Output.place(x=10, y=1, height=447, width=846)
        self.Txt_Ana_Test_Output.configure(background="black")
        self.Txt_Ana_Test_Output.configure(font="TkTextFont")
        self.Txt_Ana_Test_Output.configure(foreground="white")
        self.Txt_Ana_Test_Output.configure(insertborderwidth="3")
        self.Txt_Ana_Test_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Ana_Test_Output.configure(width=10)
        self.Txt_Ana_Test_Output.configure(wrap=NONE)

        self.Label54 = Label(self.TLabelframe20)
        self.Label54.place(relx=0.97, rely=0.01, height=18, width=18)
        self.Label54.configure(activebackground="#f9f9f9")
        self._img52 = PhotoImage(file="delete.png")
        self.Label54.configure(image=self._img52)
        self.Label54.configure(text='''Label''')
        self.Label54.bind('<Button-1>',lambda e: home_support.Btn_Ana_Test_Output_Delete())

        self.Label55 = Label(self.TLabelframe20)
        self.Label55.place(relx=0.97, rely=0.07, height=18, width=18)
        self.Label55.configure(activebackground="#f9f9f9")
        self._img53 = PhotoImage(file="clipboard.png")
        self.Label55.configure(image=self._img53)
        self.Label55.configure(text='''Label''')
        self.Label55.bind('<Button-1>',lambda e: home_support.Btn_Ana_Test_Output_Copy())

        self.Btn_Speed_Run = ttk.Button(self.TNotebook2_pg6)
        self.Btn_Speed_Run.place(relx=0.75, rely=0.02, height=90, width=228)
        self.Btn_Speed_Run.configure(takefocus="")
        self.Btn_Speed_Run.configure(text='''Run Speed Test (Hashcat)''')
        self.Btn_Speed_Run.bind('<Button-1>',home_support.Btn_Speed_Run_Click)

        self.TLabelframe23 = ttk.Labelframe(self.TNotebook2_pg6)
        self.TLabelframe23.place(x=0, y=0, height=1, width=1)
        self.TLabelframe23.configure(text='''Output''')
        self.TLabelframe23.configure(width=890)

        self.cpd61_pg4_cpd76_cpd74 = Text(self.TLabelframe23)
        self.cpd61_pg4_cpd76_cpd74.place(x=0, y=0, height=1, width=1)
        self.cpd61_pg4_cpd76_cpd74.configure(background="white")
        self.cpd61_pg4_cpd76_cpd74.configure(font="TkTextFont")
        self.cpd61_pg4_cpd76_cpd74.configure(selectbackground="#c4c4c4")
        self.cpd61_pg4_cpd76_cpd74.configure(width=866)
        self.cpd61_pg4_cpd76_cpd74.configure(wrap=WORD)

        self.TLabelframe24 = ttk.Labelframe(self.TNotebook2_pg6)
        self.TLabelframe24.place(x=455, y=175, height=450, width=475)
        self.TLabelframe24.configure(text='''Raw output''')
        self.TLabelframe24.configure(width=475)

        self.Txt_Speed_Output = ScrolledText(self.TLabelframe24)
        self.Txt_Speed_Output.place(x=5, y=-2, height=413, width=463)
        self.Txt_Speed_Output.configure(background="black")
        self.Txt_Speed_Output.configure(font=self.font6)
        self.Txt_Speed_Output.configure(foreground="white")
        self.Txt_Speed_Output.configure(insertborderwidth="3")
        self.Txt_Speed_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Speed_Output.configure(width=10)
        self.Txt_Speed_Output.configure(wrap=NONE)

        self.Label56 = Label(self.TLabelframe24)
        self.Label56.place(relx=0.89, rely=0.95, height=18, width=18)
        self.Label56.configure(activebackground="#f9f9f9")
        self._img54 = PhotoImage(file="delete.png")
        self.Label56.configure(image=self._img54)
        self.Label56.configure(text='''Label''')
        self.Label56.bind('<Button-1>',lambda e: home_support.Btn_Speed_Output_Delete())

        self.Label57 = Label(self.TLabelframe24)
        self.Label57.place(relx=0.94, rely=0.95, height=18, width=18)
        self.Label57.configure(activebackground="#f9f9f9")
        self._img55 = PhotoImage(file="clipboard.png")
        self.Label57.configure(image=self._img55)
        self.Label57.configure(text='''Label''')
        self.Label57.bind('<Button-1>',lambda e: home_support.Btn_Speed_Output_Copy())

        self.TLabelframe25 = ttk.Labelframe(self.TNotebook2_pg6)
        self.TLabelframe25.place(x=10, y=9, height=95, width=680)
        self.TLabelframe25.configure(text='''Devices detected''')
        self.TLabelframe25.configure(width=680)

        self.List_Speed_Devices = ScrolledListBox(self.TLabelframe25)
        self.List_Speed_Devices.place(x=5, y=0, height=74, width=661)
        self.List_Speed_Devices.configure(background="white")
        self.List_Speed_Devices.configure(font=self.font5)
        self.List_Speed_Devices.configure(highlightcolor="#d9d9d9")
        self.List_Speed_Devices.configure(selectbackground="#c4c4c4")
        self.List_Speed_Devices.configure(width=10)

        self.TLabel39 = ttk.Label(self.TLabelframe25)
        self.TLabel39.place(relx=0.21, rely=4.86, height=16, width=130)
        self.TLabel39.configure(background="#d9d9d9")
        self.TLabel39.configure(foreground="#000000")
        self.TLabel39.configure(relief=FLAT)
        self.TLabel39.configure(text='''PPS per Hash type::''')

        self.TLabelframe26 = ttk.Labelframe(self.TNotebook2_pg6)
        self.TLabelframe26.place(x=10, y=106, height=520, width=440)
        self.TLabelframe26.configure(text='''PPS (Passwords per second) per Hash type''')
        self.TLabelframe26.configure(width=440)

        self.List_Speed_PPS = ScrolledListBox(self.TLabelframe26)
        self.List_Speed_PPS.place(x=5, y=-1, height=499, width=426)
        self.List_Speed_PPS.configure(background="white")
        self.List_Speed_PPS.configure(font=self.font5)
        self.List_Speed_PPS.configure(highlightcolor="#d9d9d9")
        self.List_Speed_PPS.configure(selectbackground="#c4c4c4")
        self.List_Speed_PPS.configure(width=10)

        self.cpd61_pg4_tLa48 = ttk.Labelframe(self.TNotebook2_pg6)
        self.cpd61_pg4_tLa48.place(x=455, y=107, height=60, width=475)
        self.cpd61_pg4_tLa48.configure(text='''Select a default Hashtype''')
        self.cpd61_pg4_tLa48.configure(width=475)

        self.Sel_Speed_Default = ttk.Combobox(self.cpd61_pg4_tLa48)
        self.Sel_Speed_Default.place(x=10, y=10, height=18, width=352)
        self.Sel_Speed_Default.configure(textvariable=home_support.vSel_Speed_Default)
        self.Sel_Speed_Default.configure(takefocus="")

        self.Btn_Speed_Apply = ttk.Button(self.cpd61_pg4_tLa48)
        self.Btn_Speed_Apply.place(relx=0.78, rely=0.05, height=30, width=93)
        self.Btn_Speed_Apply.configure(takefocus="")
        self.Btn_Speed_Apply.configure(text='''Apply''')
        self.Btn_Speed_Apply.bind('<Button-1>',lambda event:home_support.Btn_Speed_Apply_Click(self.Sel_Speed_Default.get()))

        self.TLabelframe46 = ttk.Labelframe(self.TNotebook2_pg6)
        self.TLabelframe46.place(x=10, y=625, height=60, width=920)
        self.TLabelframe46.configure(text='''Information''')
        self.TLabelframe46.configure(width=920)

        self.Lbl_Speed_Tip = Message(self.TLabelframe46)
        self.Lbl_Speed_Tip.place(x=55, y=-1, height=40, width=838)
        self.Lbl_Speed_Tip.configure(justify=CENTER)
        self.Lbl_Speed_Tip.configure(text='''Hashcat will run speedtests to determine the PPS per hash type on your hardware. Once this is done, Select a default hash type so that its PPS is used in the Analyze Wordlist tab to estimate time to crack.''')
        self.Lbl_Speed_Tip.configure(width=838)

        self.Label65 = Label(self.TLabelframe46)
        self.Label65.place(relx=0.01, rely=0.02, height=34, width=34)
        self.Label65.configure(activebackground="#f9f9f9")
        self._img56 = PhotoImage(file="info_small.png")
        self.Label65.configure(image=self._img56)
        self.Label65.configure(text='''Label''')

        self.TNotebook4 = ttk.Notebook(self.TNotebook2_pg7)
        self.TNotebook4.place(x=10, y=10, height=663, width=916)
        self.TNotebook4.configure(width=916)
        self.TNotebook4.configure(takefocus="")
        self.TNotebook4_pg0 = ttk.Frame(self.TNotebook4)
        self.TNotebook4.add(self.TNotebook4_pg0, padding=3)
        self.TNotebook4.tab(0, text="Dictionary attack (John)",underline="-1",)
        self.TNotebook4_pg1 = ttk.Frame(self.TNotebook4)
        self.TNotebook4.add(self.TNotebook4_pg1, padding=3)
        self.TNotebook4.tab(1, text="Brute-force attack (Hashcat)",underline="-1",)
        self.TNotebook4_pg2 = ttk.Frame(self.TNotebook4)
        self.TNotebook4.add(self.TNotebook4_pg2, padding=3)
        self.TNotebook4.tab(2, text="Online cracking (Hash Buster)",underline="-1",)

        self.TLabelframe27 = ttk.Labelframe(self.TNotebook4_pg0)
        self.TLabelframe27.place(x=10, y=5, height=230, width=890)
        self.TLabelframe27.configure(text='''Settings''')
        self.TLabelframe27.configure(width=890)

        self.TLabel38 = ttk.Label(self.TLabelframe27)
        self.TLabel38.place(relx=0.01, rely=0.04, height=16, width=87)
        self.TLabel38.configure(background="#d9d9d9")
        self.TLabel38.configure(foreground="#000000")
        self.TLabel38.configure(relief=FLAT)
        self.TLabel38.configure(text='''Wordlist path:''')

        self.Txt_Attack_Dic_Wd_Path = ttk.Entry(self.TLabelframe27)
        self.Txt_Attack_Dic_Wd_Path.place(x=105, y=6, height=18, width=584)
        self.Txt_Attack_Dic_Wd_Path.configure(takefocus="")
        self.Txt_Attack_Dic_Wd_Path.configure(cursor="xterm")

        self.Btn_Attack_Dic_Run = ttk.Button(self.TLabelframe27)
        self.Btn_Attack_Dic_Run.place(relx=0.85, rely=0.67, height=25, width=113)

        self.Btn_Attack_Dic_Run.configure(takefocus="")
        self.Btn_Attack_Dic_Run.configure(text='''Run attack''')
        self.Btn_Attack_Dic_Run.bind('<Button-1>',lambda event:home_support.Btn_Attack_Dic_Run_Click(self.Txt_Attack_Dic_Wd_Path.get(),self.Txt_Attack_Dic_Pwd_Path.get(),home_support.vChk_Attack_Dic_Mangling.get(),home_support.vChk_Attack_Dic_Restore.get(),self.Txt_Attack_Dic_Restore.get(),home_support.vChk_Attack_Dic_Name.get(),self.Txt_Attack_Dic_Name.get(),home_support.vChk_Attack_Dic_Status.get(),self.Txt_Attack_Dic_Status.get(),home_support.vChk_Attack_Dic_Show.get(),home_support.vChk_Attack_Dic_Force.get(),self.Sel_Attack_Dic_Force.get()))

        self.Btn_Attack_Dic_Wd_Browse = ttk.Button(self.TLabelframe27)
        self.Btn_Attack_Dic_Wd_Browse.place(relx=0.78, rely=0.01, height=25
                , width=73)
        self.Btn_Attack_Dic_Wd_Browse.configure(takefocus="")
        self.Btn_Attack_Dic_Wd_Browse.configure(text='''Browse''')
        self.Btn_Attack_Dic_Wd_Browse.bind('<Button-1>',lambda event:home_support.Btn_Attack_Dic_Wd_Browse_Click())

        self.Chk_Attack_Dic_Mangling = Checkbutton(self.TLabelframe27)
        self.Chk_Attack_Dic_Mangling.place(x=5, y=64, height=20, width=192)
        self.Chk_Attack_Dic_Mangling.configure(activebackground="#d9d9d9")
        self.Chk_Attack_Dic_Mangling.configure(justify=LEFT)
        self.Chk_Attack_Dic_Mangling.configure(text='''Enable word mangling rules''')
        self.Chk_Attack_Dic_Mangling.configure(variable=home_support.vChk_Attack_Dic_Mangling)

        self.Chk_Attack_Dic_Restore = Checkbutton(self.TLabelframe27)
        self.Chk_Attack_Dic_Restore.place(x=5, y=95, height=20, width=212)
        self.Chk_Attack_Dic_Restore.configure(activebackground="#d9d9d9")
        self.Chk_Attack_Dic_Restore.configure(justify=LEFT)
        self.Chk_Attack_Dic_Restore.configure(text='''Restore an interrupted session:''')
        self.Chk_Attack_Dic_Restore.configure(variable=home_support.vChk_Attack_Dic_Restore)

        self.Txt_Attack_Dic_Restore = ttk.Entry(self.TLabelframe27)
        self.Txt_Attack_Dic_Restore.place(x=225, y=92, height=18, width=150)
        self.Txt_Attack_Dic_Restore.configure(takefocus="")
        self.Txt_Attack_Dic_Restore.configure(cursor="xterm")

        self.Chk_Attack_Dic_Name = Checkbutton(self.TLabelframe27)
        self.Chk_Attack_Dic_Name.place(x=5, y=127, height=20, width=192)
        self.Chk_Attack_Dic_Name.configure(activebackground="#d9d9d9")
        self.Chk_Attack_Dic_Name.configure(justify=LEFT)
        self.Chk_Attack_Dic_Name.configure(text='''Give a name to this session:''')
        self.Chk_Attack_Dic_Name.configure(variable=home_support.vChk_Attack_Dic_Name)

        self.Txt_Attack_Dic_Name = ttk.Entry(self.TLabelframe27)
        self.Txt_Attack_Dic_Name.place(x=225, y=124, height=18, width=150)
        self.Txt_Attack_Dic_Name.configure(takefocus="")
        self.Txt_Attack_Dic_Name.configure(cursor="xterm")

        self.Chk_Attack_Dic_Status = Checkbutton(self.TLabelframe27)
        self.Chk_Attack_Dic_Status.place(x=5, y=157, height=20, width=207)
        self.Chk_Attack_Dic_Status.configure(activebackground="#d9d9d9")
        self.Chk_Attack_Dic_Status.configure(justify=LEFT)
        self.Chk_Attack_Dic_Status.configure(text='''Give the status of this session:''')
        self.Chk_Attack_Dic_Status.configure(variable=home_support.vChk_Attack_Dic_Status)

        self.Txt_Attack_Dic_Status = ttk.Entry(self.TLabelframe27)
        self.Txt_Attack_Dic_Status.place(x=225, y=154, height=18, width=150)
        self.Txt_Attack_Dic_Status.configure(takefocus="")
        self.Txt_Attack_Dic_Status.configure(cursor="xterm")

        self.Chk_Attack_Dic_Show = Checkbutton(self.TLabelframe27)
        self.Chk_Attack_Dic_Show.place(x=640, y=184, height=20, width=227)
        self.Chk_Attack_Dic_Show.configure(activebackground="#d9d9d9")
        self.Chk_Attack_Dic_Show.configure(justify=LEFT)
        self.Chk_Attack_Dic_Show.configure(text='''Show the cracked passwords only''')
        self.Chk_Attack_Dic_Show.configure(variable=home_support.vChk_Attack_Dic_Show)

        self.TLabel44 = ttk.Label(self.TLabelframe27)
        self.TLabel44.place(relx=0.01, rely=0.17, height=16, width=122)
        self.TLabel44.configure(background="#d9d9d9")
        self.TLabel44.configure(foreground="#000000")
        self.TLabel44.configure(relief=FLAT)
        self.TLabel44.configure(text='''Passwords-file path:''')

        self.Txt_Attack_Dic_Pwd_Path = ttk.Entry(self.TLabelframe27)
        self.Txt_Attack_Dic_Pwd_Path.place(x=145, y=31, height=18, width=544)
        self.Txt_Attack_Dic_Pwd_Path.configure(takefocus="")
        self.Txt_Attack_Dic_Pwd_Path.configure(cursor="xterm")

        self.Btn_Attack_Dic_Pwd_Browse = ttk.Button(self.TLabelframe27)
        self.Btn_Attack_Dic_Pwd_Browse.place(relx=0.78, rely=0.14, height=25
                , width=73)
        self.Btn_Attack_Dic_Pwd_Browse.configure(takefocus="")
        self.Btn_Attack_Dic_Pwd_Browse.configure(text='''Browse''')
        self.Btn_Attack_Dic_Pwd_Browse.bind('<Button-1>',lambda event:home_support.Btn_Attack_Dic_Pwd_Browse_Click())

        self.Chk_Attack_Dic_Force = Checkbutton(self.TLabelframe27)
        self.Chk_Attack_Dic_Force.place(x=5, y=186, height=20, width=137)
        self.Chk_Attack_Dic_Force.configure(activebackground="#d9d9d9")
        self.Chk_Attack_Dic_Force.configure(justify=LEFT)
        self.Chk_Attack_Dic_Force.configure(text='''Force a hash type:''')
        self.Chk_Attack_Dic_Force.configure(variable=home_support.vChk_Attack_Dic_Force)

        self.Sel_Attack_Dic_Force = ttk.Combobox(self.TLabelframe27)
        self.Sel_Attack_Dic_Force.place(x=155, y=187, height=18, width=222)
        self.Sel_Attack_Dic_Force.configure(textvariable=home_support.vSel_Attack_Dic_Force)
        self.Sel_Attack_Dic_Force.configure(takefocus="")

        self.Btn_Attack_Dic_Del = ttk.Button(self.TLabelframe27)
        self.Btn_Attack_Dic_Del.place(relx=0.85, rely=0.52, height=25, width=113)

        self.Btn_Attack_Dic_Del.configure(takefocus="")
        self.Btn_Attack_Dic_Del.configure(text='''Delete POT file''')
        self.Btn_Attack_Dic_Del.bind('<Button-1>',lambda event:home_support.Btn_Attack_Dic_Del_Click())

        self.Label61 = Label(self.TLabelframe27)
        self.Label61.place(relx=0.23, rely=0.24, height=34, width=34)
        self.Label61.configure(activebackground="#f9f9f9")
        self._img57 = PhotoImage(file="info_small.png")
        self.Label61.configure(image=self._img57)
        self.Label61.configure(text='''Label''')
        self.Label61.bind('<Enter>',lambda e: home_support.Tips_Attack_Dic(1))
        self.Label61.bind('<Leave>',lambda e: home_support.Tips_Attack_Dic(0))

        self.Label66 = Label(self.TLabelframe27)
        self.Label66.place(relx=0.43, rely=0.83, height=34, width=34)
        self.Label66.configure(activebackground="#f9f9f9")
        self._img58 = PhotoImage(file="info_small.png")
        self.Label66.configure(image=self._img58)
        self.Label66.configure(text='''Label''')
        self.Label66.bind('<Enter>',lambda e: home_support.Tips_Attack_Dic(2))
        self.Label66.bind('<Leave>',lambda e: home_support.Tips_Attack_Dic(0))

        self.Label67 = Label(self.TLabelframe27)
        self.Label67.place(relx=0.68, rely=0.81, height=34, width=34)
        self.Label67.configure(activebackground="#f9f9f9")
        self._img59 = PhotoImage(file="info_small.png")
        self.Label67.configure(image=self._img59)
        self.Label67.configure(text='''Label''')
        self.Label67.bind('<Enter>',lambda e: home_support.Tips_Attack_Dic(4))
        self.Label67.bind('<Leave>',lambda e: home_support.Tips_Attack_Dic(0))

        self.Label68 = Label(self.TLabelframe27)
        self.Label68.place(relx=0.8, rely=0.49, height=34, width=34)
        self.Label68.configure(activebackground="#f9f9f9")
        self._img60 = PhotoImage(file="info_small.png")
        self.Label68.configure(image=self._img60)
        self.Label68.configure(text='''Label''')
        self.Label68.bind('<Enter>',lambda e: home_support.Tips_Attack_Dic(3))
        self.Label68.bind('<Leave>',lambda e: home_support.Tips_Attack_Dic(0))

        self.TLabelframe28 = ttk.Labelframe(self.TNotebook4_pg0)
        self.TLabelframe28.place(x=10, y=235, height=345, width=890)
        self.TLabelframe28.configure(text='''Output''')
        self.TLabelframe28.configure(width=890)

        self.Txt_Attack_Dic_Output = ScrolledText(self.TLabelframe28)
        self.Txt_Attack_Dic_Output.place(x=10, y=0, height=317, width=846)
        self.Txt_Attack_Dic_Output.configure(background="black")
        self.Txt_Attack_Dic_Output.configure(font="TkTextFont")
        self.Txt_Attack_Dic_Output.configure(foreground="white")
        self.Txt_Attack_Dic_Output.configure(insertborderwidth="3")
        self.Txt_Attack_Dic_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Attack_Dic_Output.configure(width=10)
        self.Txt_Attack_Dic_Output.configure(wrap=NONE)

        self.Label58 = Label(self.TLabelframe28)
        self.Label58.place(relx=0.97, rely=0.01, height=18, width=18)
        self.Label58.configure(activebackground="#f9f9f9")
        self._img61 = PhotoImage(file="delete.png")
        self.Label58.configure(image=self._img61)
        self.Label58.configure(text='''Label''')
        self.Label58.bind('<Button-1>',lambda e: home_support.Btn_Attack_Dic_Output_Delete())

        self.Label59 = Label(self.TLabelframe28)
        self.Label59.place(relx=0.97, rely=0.08, height=18, width=18)
        self.Label59.configure(activebackground="#f9f9f9")
        self._img62 = PhotoImage(file="clipboard.png")
        self.Label59.configure(image=self._img62)
        self.Label59.configure(text='''Label''')
        self.Label59.bind('<Button-1>',lambda e: home_support.Btn_Attack_Dic_Output_Copy())

        self.TLabelframe47 = ttk.Labelframe(self.TNotebook4_pg0)
        self.TLabelframe47.place(x=10, y=579, height=55, width=890)
        self.TLabelframe47.configure(text='''Information''')
        self.TLabelframe47.configure(width=877)

        self.Lbl_Attack_Dic_Tip = Message(self.TLabelframe47)
        self.Lbl_Attack_Dic_Tip.place(x=55, y=1, height=30, width=818)
        self.Lbl_Attack_Dic_Tip.configure(text='''Message''')
        self.Lbl_Attack_Dic_Tip.configure(textvariable=home_support.vLbl_Attack_Dic_Tip)
        self.Lbl_Attack_Dic_Tip.configure(width=808)

        self.Label60 = Label(self.TLabelframe47)
        self.Label60.place(relx=0.01, rely=0.02, height=34, width=34)
        self.Label60.configure(activebackground="#f9f9f9")
        self._img63 = PhotoImage(file="info_small.png")
        self.Label60.configure(image=self._img63)
        self.Label60.configure(text='''Label''')

        self.TLabelframe29 = ttk.Labelframe(self.TNotebook4_pg1)
        self.TLabelframe29.place(x=10, y=5, height=557, width=890)
        self.TLabelframe29.configure(text='''Settings''')
        self.TLabelframe29.configure(width=890)

        self.Btn_Attack_BF_Run = ttk.Button(self.TLabelframe29)
        self.Btn_Attack_BF_Run.place(relx=0.85, rely=0.82, height=25, width=113)
        self.Btn_Attack_BF_Run.configure(takefocus="")
        self.Btn_Attack_BF_Run.configure(text='''Run attack''')
        self.Btn_Attack_BF_Run.bind('<Button-1>',lambda event:home_support.Btn_Attack_BF_Run_Click(self.Txt_Attack_BF_Pwd_Path.get(),self.Sel_Attack_BF_Hash.get(),self.Txt_Attack_BF_Masks_Path.get(),home_support.vChk_Attack_BF_Masks.get(),home_support.vChk_Attack_BF_Out.get(),self.Txt_Attack_BF_Out_Path.get(),home_support.vChk_Attack_BF_Name.get(),self.Txt_Attack_BF_Name.get(),home_support.vChk_Attack_BF_Restore.get(),self.Txt_Attack_BF_Restore.get(),home_support.vChk_Attack_BF_Status_Timer.get(),self.Txt_Attack_BF_Status_Timer.get(),home_support.vChk_Attack_BF_Runtime.get(),self.Txt_Attack_BF_Runtime.get(),home_support.vChk_Attack_BF_Speed.get(),self.Sel_Attack_BF_Device.get(),self.Txt_Attack_BF_Temp.get(),self.Txt_Attack_BF_TempRetain.get(),self.Sel_Attack_BF_Workload.get(),home_support.vChk_Attack_BF_PowerTuning.get()))

        self.Chk_Attack_BF_Masks = Checkbutton(self.TLabelframe29)
        self.Chk_Attack_BF_Masks.place(x=5, y=63, height=20, width=117)
        self.Chk_Attack_BF_Masks.configure(activebackground="#d9d9d9")
        self.Chk_Attack_BF_Masks.configure(justify=LEFT)
        self.Chk_Attack_BF_Masks.configure(text='''Masks file path:''')
        self.Chk_Attack_BF_Masks.configure(variable=home_support.vChk_Attack_BF_Masks)

        self.Chk_Attack_BF_Name = Checkbutton(self.TLabelframe29)
        self.Chk_Attack_BF_Name.place(x=5, y=136, height=20, width=192)
        self.Chk_Attack_BF_Name.configure(activebackground="#d9d9d9")
        self.Chk_Attack_BF_Name.configure(justify=LEFT)
        self.Chk_Attack_BF_Name.configure(text='''Give a name to this session:''')
        self.Chk_Attack_BF_Name.configure(variable=home_support.vChk_Attack_BF_Name)

        self.Txt_Attack_BF_Name = ttk.Entry(self.TLabelframe29)
        self.Txt_Attack_BF_Name.place(x=225, y=134, height=18, width=150)
        self.Txt_Attack_BF_Name.configure(takefocus="")
        self.Txt_Attack_BF_Name.configure(cursor="xterm")

        self.Chk_Attack_BF_Restore = Checkbutton(self.TLabelframe29)
        self.Chk_Attack_BF_Restore.place(x=5, y=164, height=20, width=212)
        self.Chk_Attack_BF_Restore.configure(activebackground="#d9d9d9")
        self.Chk_Attack_BF_Restore.configure(justify=LEFT)
        self.Chk_Attack_BF_Restore.configure(text='''Restore an interrupted session:''')
        self.Chk_Attack_BF_Restore.configure(variable=home_support.vChk_Attack_BF_Restore)

        self.Txt_Attack_BF_Restore = ttk.Entry(self.TLabelframe29)
        self.Txt_Attack_BF_Restore.place(x=225, y=162, height=18, width=150)
        self.Txt_Attack_BF_Restore.configure(takefocus="")
        self.Txt_Attack_BF_Restore.configure(cursor="xterm")

        self.TLabel45 = ttk.Label(self.TLabelframe29)
        self.TLabel45.place(relx=0.01, rely=0.03, height=16, width=97)
        self.TLabel45.configure(background="#d9d9d9")
        self.TLabel45.configure(foreground="#000000")
        self.TLabel45.configure(relief=FLAT)
        self.TLabel45.configure(text='''Hash file path:''')

        self.Txt_Attack_BF_Pwd_Path = ttk.Entry(self.TLabelframe29)
        self.Txt_Attack_BF_Pwd_Path.place(x=105, y=10, height=18, width=635)
        self.Txt_Attack_BF_Pwd_Path.configure(takefocus="")
        self.Txt_Attack_BF_Pwd_Path.configure(cursor="xterm")

        self.Btn_Attack_BF_Pwd_Browse = ttk.Button(self.TLabelframe29)
        self.Btn_Attack_BF_Pwd_Browse.place(relx=0.85, rely=0.02, height=25
                , width=73)
        self.Btn_Attack_BF_Pwd_Browse.configure(takefocus="")
        self.Btn_Attack_BF_Pwd_Browse.configure(text='''Browse''')
        self.Btn_Attack_BF_Pwd_Browse.bind('<Button-1>',lambda event:home_support.Btn_Attack_BF_Pwd_Browse_Click())

        self.Txt_Attack_BF_Masks_Path = ttk.Entry(self.TLabelframe29)
        self.Txt_Attack_BF_Masks_Path.place(x=135, y=60, height=18, width=605)
        self.Txt_Attack_BF_Masks_Path.configure(takefocus="")
        self.Txt_Attack_BF_Masks_Path.configure(cursor="xterm")

        self.Btn_Attack_BF_Hash_Browse = ttk.Button(self.TLabelframe29)
        self.Btn_Attack_BF_Hash_Browse.place(relx=0.85, rely=0.11, height=25
                , width=73)
        self.Btn_Attack_BF_Hash_Browse.configure(takefocus="")
        self.Btn_Attack_BF_Hash_Browse.configure(text='''Browse''')
        self.Btn_Attack_BF_Hash_Browse.bind('<Button-1>',lambda event:home_support.Btn_Attack_BF_Hash_Browse_Click())

        self.Chk_Attack_BF_Out = Checkbutton(self.TLabelframe29)
        self.Chk_Attack_BF_Out.place(x=5, y=89, height=20, width=122)
        self.Chk_Attack_BF_Out.configure(activebackground="#d9d9d9")
        self.Chk_Attack_BF_Out.configure(justify=LEFT)
        self.Chk_Attack_BF_Out.configure(text='''Output file path:''')
        self.Chk_Attack_BF_Out.configure(variable=home_support.vChk_Attack_BF_Out)

        self.Txt_Attack_BF_Out_Path = ttk.Entry(self.TLabelframe29)
        self.Txt_Attack_BF_Out_Path.place(x=135, y=85, height=18, width=605)
        self.Txt_Attack_BF_Out_Path.configure(takefocus="")
        self.Txt_Attack_BF_Out_Path.configure(cursor="xterm")

        self.Btn_Attack_BF_Out_Browse = ttk.Button(self.TLabelframe29)
        self.Btn_Attack_BF_Out_Browse.place(relx=0.85, rely=0.16, height=25
                , width=73)
        self.Btn_Attack_BF_Out_Browse.configure(takefocus="")
        self.Btn_Attack_BF_Out_Browse.configure(text='''Browse''')
        self.Btn_Attack_BF_Out_Browse.bind('<Button-1>',lambda event:home_support.Btn_Attack_BF_Out_Browse_Click())

        self.TLabel46 = ttk.Label(self.TLabelframe29)
        self.TLabel46.place(relx=0.01, rely=0.07, height=16, width=92)
        self.TLabel46.configure(background="#d9d9d9")
        self.TLabel46.configure(foreground="#000000")
        self.TLabel46.configure(relief=FLAT)
        self.TLabel46.configure(text='''Hash file type:''')

        self.Sel_Attack_BF_Hash = ttk.Combobox(self.TLabelframe29)
        self.Sel_Attack_BF_Hash.place(x=105, y=35, height=18, width=635)
        self.Sel_Attack_BF_Hash.configure(textvariable=home_support.vSel_Attack_BF_Hash)
        self.Sel_Attack_BF_Hash.configure(takefocus="")

        self.Chk_Attack_BF_Status_Timer = Checkbutton(self.TLabelframe29)
        self.Chk_Attack_BF_Status_Timer.place(x=5, y=200, height=20, width=182)
        self.Chk_Attack_BF_Status_Timer.configure(activebackground="#d9d9d9")
        self.Chk_Attack_BF_Status_Timer.configure(justify=LEFT)
        self.Chk_Attack_BF_Status_Timer.configure(text='''Show status every X secs:''')
        self.Chk_Attack_BF_Status_Timer.configure(variable=home_support.vChk_Attack_BF_Status_Timer)

        self.Txt_Attack_BF_Status_Timer = ttk.Entry(self.TLabelframe29)
        self.Txt_Attack_BF_Status_Timer.place(x=190, y=200, height=18, width=29)
        self.Txt_Attack_BF_Status_Timer.configure(takefocus="")
        self.Txt_Attack_BF_Status_Timer.configure(cursor="xterm")

        self.Chk_Attack_BF_Runtime = Checkbutton(self.TLabelframe29)
        self.Chk_Attack_BF_Runtime.place(x=5, y=229, height=20, width=237)
        self.Chk_Attack_BF_Runtime.configure(activebackground="#d9d9d9")
        self.Chk_Attack_BF_Runtime.configure(justify=LEFT)
        self.Chk_Attack_BF_Runtime.configure(text='''Set a maximum runtime of X secs:''')
        self.Chk_Attack_BF_Runtime.configure(variable=home_support.vChk_Attack_BF_Runtime)

        self.Txt_Attack_BF_Runtime = ttk.Entry(self.TLabelframe29)
        self.Txt_Attack_BF_Runtime.place(x=245, y=227, height=18, width=49)
        self.Txt_Attack_BF_Runtime.configure(takefocus="")
        self.Txt_Attack_BF_Runtime.configure(cursor="xterm")

        self.Chk_Attack_BF_Speed = Checkbutton(self.TLabelframe29)
        self.Chk_Attack_BF_Speed.place(x=550, y=492, height=25, width=313)
        self.Chk_Attack_BF_Speed.configure(activebackground="#d9d9d9")
        self.Chk_Attack_BF_Speed.configure(justify=LEFT)
        self.Chk_Attack_BF_Speed.configure(text='''Show an estimated speed only, don't run attack''')
        self.Chk_Attack_BF_Speed.configure(variable=home_support.vChk_Attack_BF_Speed)
        self.Chk_Attack_BF_Speed.configure(width=313)

        self.TLabelframe30 = ttk.Labelframe(self.TLabelframe29)
        self.TLabelframe30.place(x=15, y=277, height=115, width=380)
        self.TLabelframe30.configure(text='''GPU''')
        self.TLabelframe30.configure(width=380)

        self.TLabel47 = ttk.Label(self.TLabelframe30)
        self.TLabel47.place(relx=0.03, rely=0.13, height=16, width=137)
        self.TLabel47.configure(background="#d9d9d9")
        self.TLabel47.configure(foreground="#000000")
        self.TLabel47.configure(relief=FLAT)
        self.TLabel47.configure(text='''OpenCL Device Type:''')

        self.Sel_Attack_BF_Device = ttk.Combobox(self.TLabelframe30)
        self.Sel_Attack_BF_Device.place(x=150, y=14, height=18, width=174)
        self.Sel_Attack_BF_Device.configure(textvariable=home_support.vSel_Attack_BF_Device)
        self.Sel_Attack_BF_Device.configure(takefocus="")

        self.TLabel48 = ttk.Label(self.TLabelframe30)
        self.TLabel48.place(relx=0.03, rely=0.67, height=16, width=277)
        self.TLabel48.configure(background="#d9d9d9")
        self.TLabel48.configure(foreground="#000000")
        self.TLabel48.configure(relief=FLAT)
        self.TLabel48.configure(text='''Maximum GPU temperature allowed (Celsius):''')

        self.Txt_Attack_BF_Temp = ttk.Entry(self.TLabelframe30)
        self.Txt_Attack_BF_Temp.place(x=295, y=66, height=18, width=29)
        self.Txt_Attack_BF_Temp.configure(takefocus="")
        self.Txt_Attack_BF_Temp.configure(cursor="xterm")

        self.TLabel56 = ttk.Label(self.TLabelframe30)
        self.TLabel56.place(relx=0.03, rely=0.41, height=16, width=222)
        self.TLabel56.configure(background="#d9d9d9")
        self.TLabel56.configure(foreground="#000000")
        self.TLabel56.configure(relief=FLAT)
        self.TLabel56.configure(text='''GPU temperature to retain (Celsius):''')

        self.Txt_Attack_BF_TempRetain = ttk.Entry(self.TLabelframe30)
        self.Txt_Attack_BF_TempRetain.place(x=245, y=41, height=18, width=29)
        self.Txt_Attack_BF_TempRetain.configure(takefocus="")
        self.Txt_Attack_BF_TempRetain.configure(cursor="xterm")

        self.Label72 = Label(self.TLabelframe30)
        self.Label72.place(relx=0.87, rely=0.53, height=34, width=34)
        self.Label72.configure(activebackground="#f9f9f9")
        self._img64 = PhotoImage(file="info_small.png")
        self.Label72.configure(image=self._img64)
        self.Label72.configure(text='''Label''')
        self.Label72.bind('<Enter>',lambda e: home_support.Tips_Attack_BF(4))
        self.Label72.bind('<Leave>',lambda e: home_support.Tips_Attack_BF(0))

        self.Label75 = Label(self.TLabelframe30)
        self.Label75.place(relx=0.87, rely=0.05, height=34, width=34)
        self.Label75.configure(activebackground="#f9f9f9")
        self._img65 = PhotoImage(file="info_small.png")
        self.Label75.configure(image=self._img65)
        self.Label75.configure(text='''Label''')
        self.Label75.bind('<Enter>',lambda e: home_support.Tips_Attack_BF(3))
        self.Label75.bind('<Leave>',lambda e: home_support.Tips_Attack_BF(0))

        self.Label70 = Label(self.TLabelframe29)
        self.Label70.place(relx=0.34, rely=0.4, height=34, width=34)
        self.Label70.configure(activebackground="#f9f9f9")
        self._img66 = PhotoImage(file="info_small.png")
        self.Label70.configure(image=self._img66)
        self.Label70.configure(text='''Label''')
        self.Label70.bind('<Enter>',lambda e: home_support.Tips_Attack_BF(2))
        self.Label70.bind('<Leave>',lambda e: home_support.Tips_Attack_BF(0))

        self.Label71 = Label(self.TLabelframe29)
        self.Label71.place(relx=0.43, rely=0.26, height=34, width=34)
        self.Label71.configure(activebackground="#f9f9f9")
        self._img67 = PhotoImage(file="info_small.png")
        self.Label71.configure(image=self._img67)
        self.Label71.configure(text='''Label''')
        self.Label71.bind('<Enter>',lambda e: home_support.Tips_Attack_BF(1))
        self.Label71.bind('<Leave>',lambda e: home_support.Tips_Attack_BF(0))

        self.TLabelframe32 = ttk.Labelframe(self.TLabelframe29)
        self.TLabelframe32.place(x=15, y=421, height=90, width=380)
        self.TLabelframe32.configure(text='''Power management''')
        self.TLabelframe32.configure(width=380)

        self.TLabel57 = ttk.Label(self.TLabelframe32)
        self.TLabel57.place(relx=0.03, rely=0.17, height=16, width=137)
        self.TLabel57.configure(background="#d9d9d9")
        self.TLabel57.configure(foreground="#000000")
        self.TLabel57.configure(relief=FLAT)
        self.TLabel57.configure(text='''Workload profile:''')

        self.Sel_Attack_BF_Workload = ttk.Combobox(self.TLabelframe32)
        self.Sel_Attack_BF_Workload.place(x=125, y=10, height=18, width=104)
        self.Sel_Attack_BF_Workload.configure(textvariable=home_support.vSel_Attack_BF_Workload)
        self.Sel_Attack_BF_Workload.configure(takefocus="")

        self.Label73 = Label(self.TLabelframe32)
        self.Label73.place(relx=0.63, rely=0.03, height=34, width=34)
        self.Label73.configure(activebackground="#f9f9f9")
        self._img68 = PhotoImage(file="info_small.png")
        self.Label73.configure(image=self._img68)
        self.Label73.configure(text='''Label''')
        self.Label73.bind('<Enter>',lambda e: home_support.Tips_Attack_BF(5))
        self.Label73.bind('<Leave>',lambda e: home_support.Tips_Attack_BF(0))

        self.Chk_Attack_BF_PowerTuning = Checkbutton(self.TLabelframe32)
        self.Chk_Attack_BF_PowerTuning.place(x=5, y=43, height=20, width=152)
        self.Chk_Attack_BF_PowerTuning.configure(activebackground="#d9d9d9")
        self.Chk_Attack_BF_PowerTuning.configure(justify=LEFT)
        self.Chk_Attack_BF_PowerTuning.configure(text='''Enable Power Tuning''')
        self.Chk_Attack_BF_PowerTuning.configure(variable=home_support.vChk_Attack_BF_PowerTuning)

        self.Label74 = Label(self.TLabelframe32)
        self.Label74.place(relx=0.42, rely=0.47, height=34, width=34)
        self.Label74.configure(activebackground="#f9f9f9")
        self._img69 = PhotoImage(file="info_small.png")
        self.Label74.configure(image=self._img69)
        self.Label74.configure(text='''Label''')
        self.Label74.bind('<Enter>',lambda e: home_support.Tips_Attack_BF(6))
        self.Label74.bind('<Leave>',lambda e: home_support.Tips_Attack_BF(0))

        self.Btn_Attack_BF_Del = ttk.Button(self.TLabelframe29)
        self.Btn_Attack_BF_Del.place(relx=0.85, rely=0.76, height=25, width=113)
        self.Btn_Attack_BF_Del.configure(takefocus="")
        self.Btn_Attack_BF_Del.configure(text='''Delete POT file''')
        self.Btn_Attack_BF_Del.bind('<Button-1>',lambda event:home_support.Btn_Attack_BF_Del_Click())

        self.Label76 = Label(self.TLabelframe29)
        self.Label76.place(relx=0.8, rely=0.75, height=34, width=34)
        self.Label76.configure(activebackground="#f9f9f9")
        self._img70 = PhotoImage(file="info_small.png")
        self.Label76.configure(image=self._img70)
        self.Label76.configure(text='''Label''')
        self.Label76.bind('<Enter>',lambda e: home_support.Tips_Attack_BF(7))
        self.Label76.bind('<Leave>',lambda e: home_support.Tips_Attack_BF(0))

        self.TLabelframe48 = ttk.Labelframe(self.TNotebook4_pg1)
        self.TLabelframe48.place(x=10, y=566, height=65, width=890)
        self.TLabelframe48.configure(text='''Information''')
        self.TLabelframe48.configure(width=877)

        self.Lbl_Attack_BF_Tip = Message(self.TLabelframe48)
        self.Lbl_Attack_BF_Tip.place(x=55, y=6, height=30, width=818)
        self.Lbl_Attack_BF_Tip.configure(text='''Message''')
        self.Lbl_Attack_BF_Tip.configure(textvariable=home_support.vLbl_Attack_BF_Tip)
        self.Lbl_Attack_BF_Tip.configure(width=808)

        self.Label69 = Label(self.TLabelframe48)
        self.Label69.place(relx=0.01, rely=0.02, height=34, width=34)
        self.Label69.configure(activebackground="#f9f9f9")
        self._img71 = PhotoImage(file="info_small.png")
        self.Label69.configure(image=self._img71)
        self.Label69.configure(text='''Label''')

        self.Btn_Attack_Online_Run = ttk.Button(self.TNotebook4_pg2)
        self.Btn_Attack_Online_Run.place(relx=0.16, rely=0.1, height=60
                , width=570)
        self.Btn_Attack_Online_Run.configure(takefocus="")
        self.Btn_Attack_Online_Run.configure(text='''Run Interactive Online Cracking with Hash Buster''')
        self.Btn_Attack_Online_Run.bind('<Button-1>',home_support.Btn_Attack_Online_Run_Click)

        self.Message7 = Message(self.TNotebook4_pg2)
        self.Message7.place(x=65, y=158, height=55, width=798)
        self.Message7.configure(justify=CENTER)
        self.Message7.configure(text='''Hash Buster will prompt you for a hash, it supports MD5, SHA-1, and SHA-2 and queries 5 online crackers for a precomputed match which can save you a lot of time.''')
        self.Message7.configure(width=798)

        self.Label77 = Label(self.TNotebook4_pg2)
        self.Label77.place(relx=0.02, rely=0.25, height=34, width=34)
        self.Label77.configure(activebackground="#f9f9f9")
        self._img72 = PhotoImage(file="info_small.png")
        self.Label77.configure(image=self._img72)
        self.Label77.configure(text='''Label''')

        self.TNotebook6 = ttk.Notebook(self.TNotebook2_pg8)
        self.TNotebook6.place(x=10, y=10, height=668, width=922)
        self.TNotebook6.configure(width=922)
        self.TNotebook6.configure(takefocus="")
        self.TNotebook6_pg0 = ttk.Frame(self.TNotebook6)
        self.TNotebook6.add(self.TNotebook6_pg0, padding=3)
        self.TNotebook6.tab(0, text="Random password",underline="-1",)
        self.TNotebook6_pg1 = ttk.Frame(self.TNotebook6)
        self.TNotebook6.add(self.TNotebook6_pg1, padding=3)
        self.TNotebook6.tab(1, text="Have I been pwned?",underline="-1",)

        self.TLabelframe45 = ttk.Labelframe(self.TNotebook6_pg0)
        self.TLabelframe45.place(x=10, y=92, height=540, width=900)
        self.TLabelframe45.configure(text='''Output''')
        self.TLabelframe45.configure(width=920)

        self.Txt_NewPass_Output = ScrolledText(self.TLabelframe45)
        self.Txt_NewPass_Output.place(x=5, y=0, height=512, width=866)
        self.Txt_NewPass_Output.configure(background="black")
        self.Txt_NewPass_Output.configure(font="TkTextFont")
        self.Txt_NewPass_Output.configure(foreground="white")
        self.Txt_NewPass_Output.configure(insertborderwidth="3")
        self.Txt_NewPass_Output.configure(selectbackground="#c4c4c4")
        self.Txt_NewPass_Output.configure(width=10)
        self.Txt_NewPass_Output.configure(wrap=NONE)

        self.Label62 = Label(self.TLabelframe45)
        self.Label62.place(relx=0.98, rely=0.01, height=18, width=18)
        self.Label62.configure(activebackground="#f9f9f9")
        self._img73 = PhotoImage(file="delete.png")
        self.Label62.configure(image=self._img73)
        self.Label62.configure(text='''Label''')
        self.Label62.bind('<Button-1>',lambda e: home_support.Btn_NewPass_Output_Delete())

        self.Label63 = Label(self.TLabelframe45)
        self.Label63.place(relx=0.98, rely=0.05, height=18, width=18)
        self.Label63.configure(activebackground="#f9f9f9")
        self._img74 = PhotoImage(file="clipboard.png")
        self.Label63.configure(image=self._img74)
        self.Label63.configure(text='''Label''')
        self.Label63.bind('<Button-1>',lambda e: home_support.Btn_NewPass_Output_Copy())

        self.TLabelframe44 = ttk.Labelframe(self.TNotebook6_pg0)
        self.TLabelframe44.place(x=10, y=5, height=80, width=900)
        self.TLabelframe44.configure(text='''Settings''')
        self.TLabelframe44.configure(width=920)

        self.Btn_NewPass_Run = ttk.Button(self.TLabelframe44)
        self.Btn_NewPass_Run.place(relx=0.78, rely=-0.05, height=60, width=185)
        self.Btn_NewPass_Run.configure(takefocus="")
        self.Btn_NewPass_Run.configure(text='''Run PassTrust''')
        self.Btn_NewPass_Run.bind('<Button-1>',lambda event:home_support.Btn_NewPass_Click(self.Txt_NewPass_Len.get(),home_support.vChk_NewPass_Specials.get()))

        self.TLabel55 = ttk.Label(self.TLabelframe44)
        self.TLabel55.place(relx=0.02, rely=0.15, height=16, width=220)
        self.TLabel55.configure(background="#d9d9d9")
        self.TLabel55.configure(foreground="#000000")
        self.TLabel55.configure(relief=FLAT)
        self.TLabel55.configure(text='''Password length (min. 16 max. 64):''')

        self.Txt_NewPass_Len = ttk.Entry(self.TLabelframe44)
        self.Txt_NewPass_Len.place(x=250, y=7, height=18, width=30)
        self.Txt_NewPass_Len.configure(width=30)
        self.Txt_NewPass_Len.configure(takefocus="")
        self.Txt_NewPass_Len.configure(cursor="xterm")

        self.Chk_NewPass_Specials = Checkbutton(self.TLabelframe44)
        self.Chk_NewPass_Specials.place(x=10, y=37, height=20, width=168)
        self.Chk_NewPass_Specials.configure(activebackground="#d9d9d9")
        self.Chk_NewPass_Specials.configure(justify=LEFT)
        self.Chk_NewPass_Specials.configure(text='''Include special symbols''')
        self.Chk_NewPass_Specials.configure(variable=home_support.vChk_NewPass_Specials)

        self.TLabelframe49 = ttk.Labelframe(self.TNotebook6_pg1)
        self.TLabelframe49.place(x=10, y=5, height=80, width=900)
        self.TLabelframe49.configure(text='''Settings''')
        self.TLabelframe49.configure(width=920)

        self.Btn_Pwned_Run = ttk.Button(self.TLabelframe49)
        self.Btn_Pwned_Run.place(relx=0.88, rely=-0.05, height=60, width=100)
        self.Btn_Pwned_Run.configure(takefocus="")
        self.Btn_Pwned_Run.configure(text='''Check''')
        self.Btn_Pwned_Run.bind('<Button-1>',lambda event:home_support.Btn_Pwned_Click(self.Txt_Pwned_Pass.get()))

        self.TLabel58 = ttk.Label(self.TLabelframe49)
        self.TLabel58.place(relx=0.02, rely=0.15, height=16, width=220)
        self.TLabel58.configure(background="#d9d9d9")
        self.TLabel58.configure(foreground="#000000")
        self.TLabel58.configure(relief=FLAT)
        self.TLabel58.configure(text='''Password to check:''')

        self.Txt_Pwned_Pass = ttk.Entry(self.TLabelframe49)
        self.Txt_Pwned_Pass.place(x=150, y=7, height=18, width=175)
        self.Txt_Pwned_Pass.configure(width=175)
        self.Txt_Pwned_Pass.configure(takefocus="")
        self.Txt_Pwned_Pass.configure(cursor="xterm")

        self.Label80 = Label(self.TLabelframe49)
        self.Label80.place(relx=0.02, rely=0.43, height=34, width=34)
        self.Label80.configure(activebackground="#f9f9f9")
        self._img75 = PhotoImage(file="info_small.png")
        self.Label80.configure(image=self._img75)
        self.Label80.configure(text='''Label''')

        self.TLabel49 = ttk.Label(self.TLabelframe49)
        self.TLabel49.place(relx=0.06, rely=0.56, height=16, width=700)
        self.TLabel49.configure(background="#d9d9d9")
        self.TLabel49.configure(foreground="#000000")
        self.TLabel49.configure(relief=FLAT)
        self.TLabel49.configure(text='''The password will be checked against the HaveIBeenPwned.com DB, to know if it was leaked in a previous incident.''')

        self.TLabelframe50 = ttk.Labelframe(self.TNotebook6_pg1)
        self.TLabelframe50.place(x=10, y=92, height=540, width=900)
        self.TLabelframe50.configure(text='''Output''')
        self.TLabelframe50.configure(width=920)

        self.Txt_Pwned_Output = ScrolledText(self.TLabelframe50)
        self.Txt_Pwned_Output.place(x=5, y=0, height=512, width=866)
        self.Txt_Pwned_Output.configure(background="black")
        self.Txt_Pwned_Output.configure(font="TkTextFont")
        self.Txt_Pwned_Output.configure(foreground="white")
        self.Txt_Pwned_Output.configure(insertborderwidth="3")
        self.Txt_Pwned_Output.configure(selectbackground="#c4c4c4")
        self.Txt_Pwned_Output.configure(width=10)
        self.Txt_Pwned_Output.configure(wrap=NONE)

        self.Label78 = Label(self.TLabelframe50)
        self.Label78.place(relx=0.98, rely=0.01, height=18, width=18)
        self.Label78.configure(activebackground="#f9f9f9")
        self._img76 = PhotoImage(file="delete.png")
        self.Label78.configure(image=self._img76)
        self.Label78.configure(text='''Label''')
        self.Label78.bind('<Button-1>',lambda e: home_support.Btn_Pwned_Output_Delete())

        self.Label79 = Label(self.TLabelframe50)
        self.Label79.place(relx=0.98, rely=0.05, height=18, width=18)
        self.Label79.configure(activebackground="#f9f9f9")
        self._img77 = PhotoImage(file="clipboard.png")
        self.Label79.configure(image=self._img77)
        self.Label79.configure(text='''Label''')
        self.Label79.bind('<Button-1>',lambda e: home_support.Btn_Pwned_Output_Copy())





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=self._autoscroll(vsb),
        #    xscrollcommand=self._autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()



